//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SM3023.pso /Fcshaderdump19/SM3023.pso.dis
//
//
// Parameters:
//
//   sampler2D BaseMap;
//   float4 LightColor;
//   float4 LightData;
//   sampler2D ShadowMap;
//   float4 ToggleADTS;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   ToggleADTS   c5       1
//   LightColor   c9       1
//   LightData    c10      1
//   BaseMap      s0       1
//   ShadowMap    s2       1
//

    ps_3_0
    def c0, 0.5, 1, 15, 0
    def c1, -0.00390625, 1, -1, 0
    def c2, 0.0666666701, 0.600000024, 0, 0
    def c3, 0.00999999978, 0.0199999996, -0.00999999978, -0.0199999996
    dcl_texcoord_pp v0.xy
    dcl_texcoord6_centroid v1.xyz
    dcl_texcoord1_pp_centroid v2
    dcl_texcoord2_pp_centroid v3.w
    dcl_2d s0
    dcl_2d s2
    rcp r0.z, c10.w
    mov r5.xyw, c0
    mul r0.w, r5.x, c10.w
    mul r6.w, r0.z, v2.z
    rcp r1.z, r0.w
    rcp_pp r1.w, v2.w
    add r0.xyz, v1, -c10
    dp3 r0.w, r0, r0
    mul_pp r0.xy, r1.w, v2
    rsq r0.w, r0.w
    mad_pp r0.xy, r0, c0.x, c0.x
    rcp r1.w, r0.w
    add_pp r0.zw, -r0.y, c0.y
    mul_sat r5.z, r1.z, r1.w
    cmp_sat_pp r1.xy, r0.xzzw, r0.xwzw, c0.w
    texld r1, r1, s2
    add r0.w, -r5.z, c0.y
    cmp r0.z, -r5.z, c0.y, r0.w
    add r0.w, -r6.w, r1.x
    mul_pp r0.z, r0.z, c0.z
    rcp_pp r3.w, r0.z
    mad_pp r3.xy, r0, c1.yzzw, c1.wyzw
    add r0.w, -r0.w, c1.x
    mad_pp r2, r3.w, c3.xxyy, r3.xyxy
    cmp_pp r0.w, r0.w, c0.w, c0.y
    max_pp r1, r2, c0.w
    add_pp r6.z, -r0.y, c0.y
    mov_sat_pp r1.xy, r1
    texld r2, r1, s2
    mov_sat_pp r1.xy, r1.zwzw
    texld r1, r1, s2
    add r0.z, -r6.w, r2.x
    add r0.z, -r0.z, c1.x
    cmp_pp r0.z, r0.z, c0.w, c0.y
    add_pp r0.w, r0.w, r0.z
    add r0.z, -r6.w, r1.x
    add r0.z, -r0.z, c1.x
    mad_pp r2, r3.w, c3.zxwy, r3.xyxy
    cmp_pp r0.z, r0.z, c0.w, c0.y
    max_pp r1, r2, c0.w
    add_pp r0.w, r0.w, r0.z
    mov_sat_pp r1.xy, r1
    texld r2, r1, s2
    mov_sat_pp r1.xy, r1.zwzw
    texld r1, r1, s2
    add r0.z, -r6.w, r2.x
    add r0.z, -r0.z, c1.x
    cmp_pp r0.z, r0.z, c0.w, c0.y
    add_pp r0.w, r0.w, r0.z
    add r0.z, -r6.w, r1.x
    add r0.z, -r0.z, c1.x
    mad_pp r2, r3.w, c3.xzyw, r3.xyxy
    cmp_pp r0.z, r0.z, c0.w, c0.y
    max_pp r1, r2, c0.w
    add_pp r0.w, r0.w, r0.z
    mov_sat_pp r1.xy, r1
    texld r2, r1, s2
    mov_sat_pp r1.xy, r1.zwzw
    texld r1, r1, s2
    add r0.z, -r6.w, r2.x
    add r0.z, -r0.z, c1.x
    cmp_pp r0.z, r0.z, c0.w, c0.y
    add_pp r0.w, r0.w, r0.z
    add r0.z, -r6.w, r1.x
    add r0.z, -r0.z, c1.x
    mad_pp r2, r3.w, c3.zzww, r3.xyxy
    cmp_pp r0.z, r0.z, c0.w, c0.y
    max_pp r1, r2, c0.w
    add_pp r0.w, r0.w, r0.z
    mov_sat_pp r1.xy, r1
    texld r2, r1, s2
    mov_sat_pp r1.xy, r1.zwzw
    texld r1, r1, s2
    add r0.z, -r6.w, r2.x
    add r0.y, -r0.z, c1.x
    add r0.z, -r6.w, r1.x
    cmp_pp r0.y, r0.y, c0.w, c0.y
    add r0.z, -r0.z, c1.x
    add_pp r0.w, r0.w, r0.y
    cmp_pp r0.z, r0.z, c0.w, c0.y
    add_pp r0.z, r0.w, r0.z
    mov_pp r0.w, r3.y
    mov_pp r3.y, r3.x
    mul_pp r1, r3.w, c3
    mov_sat_pp r2.y, r0.w
    add_sat_pp r2.x, r0.x, r1.w
    texld r4, r2, s2
    add_pp r3.zw, r6.z, r1.xyxy
    max_pp r2, r3.xzxw, c0.w
    add r5.x, -r6.w, r4.x
    mov_sat_pp r2.xy, r2
    texld r4, r2, s2
    mov_sat_pp r2.xy, r2.zwzw
    texld r2, r2, s2
    add r0.y, -r6.w, r4.x
    add r0.y, -r0.y, c1.x
    cmp_pp r0.y, r0.y, c0.w, c0.y
    add_pp r0.z, r0.z, r0.y
    add r0.y, -r6.w, r2.x
    add r0.y, -r0.y, c1.x
    add_pp r3.xz, r6.z, r1.zyww
    cmp_pp r0.y, r0.y, c0.w, c0.y
    max_pp r2, r3.yxyz, c0.w
    add_pp r0.z, r0.z, r0.y
    mov_sat_pp r2.xy, r2
    texld r3, r2, s2
    mov_sat_pp r2.xy, r2.zwzw
    texld r2, r2, s2
    add r0.y, -r6.w, r3.x
    add r0.y, -r0.y, c1.x
    cmp_pp r0.y, r0.y, c0.w, c0.y
    add_pp r2.w, r0.z, r0.y
    add r0.z, -r6.w, r2.x
    add r1.w, -r0.z, c1.x
    add_pp r0.xyz, r0.x, r1.zyxw
    cmp_pp r2.z, r1.w, c0.w, c0.y
    max_pp r1, r0.zwyw, c0.w
    add_pp r0.y, r2.w, r2.z
    mov_sat_pp r1.xy, r1
    texld r2, r1, s2
    mov_sat_pp r1.xy, r1.zwzw
    texld r1, r1, s2
    add r0.z, -r6.w, r2.x
    add r0.z, -r0.z, c1.x
    cmp_pp r1.w, r0.z, c0.w, c0.y
    add r0.z, -r6.w, r1.x
    add_pp r1.w, r0.y, r1.w
    add r0.z, -r0.z, c1.x
    cmp_pp r1.z, r0.z, c0.w, c0.y
    mov_sat_pp r0.xy, r0.xwzw
    texld r0, r0, s2
    add r0.z, -r6.w, r0.x
    add_pp r0.w, r1.w, r1.z
    add r0.z, -r0.z, c1.x
    cmp_pp r0.y, r0.z, c0.w, c0.y
    add r0.z, -r5.x, c1.x
    add_pp r0.w, r0.w, r0.y
    cmp_pp r0.z, r0.z, c0.w, c0.y
    add_pp r0.w, r0.w, r0.z
    mul_sat_pp r0.w, r0.w, c2.x
    add_pp r0.w, r0.w, -c0.y
    mad_pp r0.w, c9.w, r0.w, r5.y
    add_pp r1.w, -r0.w, c0.y
    mul_pp r0.z, r1.w, c2.y
    mul_pp r0.w, r5.z, r5.z
    mad_pp r0.xyz, r0.z, -c9, r5.y
    lrp_pp r2.xyz, r0.w, c0.y, r0
    add_pp r1.xyz, -r2, c0.y
    cmp r0.w, -c5.w, r5.w, r5.y
    if_ne r0.w, -r0.w
      texld_pp r0, v0, s0
      mov_pp r2.w, r0.w
    else
      mov r2.w, c0.y
    endif
    min_pp r0.w, r2.w, c0.y
    mad_pp oC0.xyz, v3.w, r1, r2
    min_pp oC0.w, r0.w, r1.w

// approximately 159 instruction slots used (18 texture, 141 arithmetic)
