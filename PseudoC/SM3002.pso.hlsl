//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SM3002.pso /Fcshaderdump19/SM3002.pso.dis
//
//
// Parameters:
//
//   float4 AmbientColor;
//   sampler2D BaseMap;
//   float3 HairTint;
//   sampler2D LayerMap;
//   float4 LightData[30];
//   float3 MatAlpha;
//   sampler2D NormalMap;
//   float4 ToggleADTS;
//   float4 ToggleNumLights;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    AmbientColor       1
//   HairTint        HairTint       1
//   MatAlpha        MatAlpha       1
//   ToggleADTS      ToggleADTS       1
//   ToggleNumLights ToggleNumLights       1
//   LightData[00]       LightData[00]       1
//   LightData[01]       LightData[01]      1
//   LightData[02]       LightData[02]      1
//   LightData[03]       LightData[03]      1
//   LightData[04]       LightData[04]      1
//   LightData[05]       LightData[05]      1
//   LightData[06]       LightData[06]      1
//   LightData[07]       LightData[07]      1
//   LightData[08]       LightData[08]      1
//   LightData[09]       LightData[09]      1
//   LightData[10]       LightData[10]      1
//   LightData[11]       LightData[11]      1
//   LightData[12]       LightData[12]      1
//   LightData[13]       LightData[13]      1
//   LightData[14]       LightData[14]      1
//   LightData[15]       LightData[15]      1
//   LightData[16]       LightData[16]      1
//   LightData[17]       LightData[17]      1
//   LightData[18]       LightData[18]      1
//   LightData[19]       LightData[19]      1
//   LightData[20]       LightData[20]      1
//   LightData[21]       LightData[21]      1
//   LightData[22]       LightData[22]      1
//   LightData[23]       LightData[23]      1
//   LightData[24]       LightData[24]      1
//   LightData[25]       LightData[25]      1
//   LightData[26]       LightData[26]      1
//   LightData[27]       LightData[27]      1
//   LightData[28]       LightData[28]      1
//   LightData[29]       LightData[29]      1
//   BaseMap         BaseMap       1
//   NormalMap       NormalMap       1
//   LayerMap        LayerMap       1
//

    const_1 = {-0.5, 0, 1, 15};
    const_4 = {-1, -2, 0, 2};
    const_7 = {2, -2, -3, -4};
    const_8 = {2, -4, -5, -6};
    MatAlpha9 = {2, -8, -9, -10};
    const_40 = {2, -10, -11, -12};
    const_41 = {2, -12, -13, -14};
    const_42 = {2, -18, -19, -20};
    const_43 = {2, -20, -21, -22};
    const_44 = {2, -24, -25, -26};
    const_45 = {2, -22, -23, -24};
    const_46 = {2, -28, -29, 0};
    const_47 = {2, -26, -27, -28};
    const_48 = {2, -6, -7, -8};
    const_49 = {2, -14, -15, -16};
    ToggleADTS0 = {2, -16, -17, -18};
    texcoord input_0.xy;			// partial precision
    color input_1.y;			// partial precision
    texcoord_3 input_2.xyz;			// partial precision			// centroid
    texcoord_4 input_3.xyz;			// partial precision			// centroid
    texcoord_5 input_4.xyz;			// partial precision			// centroid
    texcoord_6 input_5.xyz;			// partial precision			// centroid
    texcoord_7 input_6;			// partial precision			// centroid
    sampler BaseMap;
    sampler NormalMap;
    sampler LayerMap;
    r2 = const_1;
    r0.w = r2.w - ToggleNumLights.x;			// partial precision
    r1.x = (ToggleNumLights.y < r0.w ? ToggleNumLights.y : r0.w);			// partial precision
    r1.w = r1.x - floor(r1.x);			// partial precision
    r1.z = (r1.x >= 0.0 ? const_1.z : const_1.y);
    r1.y = (r1.w <= 0.0 ? const_1.z : const_1.y);
    r0 = NormalMap[input_0];			// partial precision
    r0.xyz = r0 - const_1.x;			// partial precision
    r0.xyz = r0 - r0;			// partial precision
    r7.xyz = norm(input_2);			// partial precision
    r4.xyz = norm(r0);			// partial precision
    r0.x = (r7.x * LightData[01].x) + (r7.y * LightData[01].y) + (r7.z * LightData[01].z);			// partial precision
    r6.xyz = norm(input_3);			// partial precision
    r5.xyz = norm(input_4);			// partial precision
    r0.y = (r6.x * LightData[01].x) + (r6.y * LightData[01].y) + (r6.z * LightData[01].z);			// partial precision
    r0.z = (r5.x * LightData[01].x) + (r5.y * LightData[01].y) + (r5.z * LightData[01].z);			// partial precision
    r0.w = r1.x - r1.w;			// partial precision
    r1.w = (r4.x * r0.x) + (r4.y * r0.y) + (r4.z * r0.z);			// partial precision
    r2.w = (r1.z * r1.y) - r0.w;
    r0.z = (r1.w >= const_1.y ? r1.w : const_1.y);			// partial precision
    r0.w = const_1.z;
    r0.xyz = r0.z * LightData[00];			// partial precision
    r0 = (ToggleNumLights.x <= 0.0 ? r0 : r2.y);
    r1.w = (r2.w <= 0.0 ? const_1.z : const_1.y);
    if_ne r1.w, -r1.w
      r3.x = r0.w - r0.w;
      r3.yz = r3.x - const_4.xxyw;
      r1.xyz = r3.x - const_4.zxyw;
      r3.xyz = (r1 >= 0.0 ? -r3 : r1);
      r1 = (r3.x <= 0.0 ? r2.y : LightData[01]);
      r1 = (r3.y <= 0.0 ? r1 : LightData[02]);
      r1 = (r3.z <= 0.0 ? r1 : LightData[03]);
      r8.xyz = r1 - input_5;
      r1.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r1.z);
      r1.xyz = (r3.x <= 0.0 ? r2.y : LightData[00]);			// partial precision
      r3.w = 1.0 / r3.w;
      r1.w = 1.0 / r1.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r3.w = sat(r3.w * r1.w);
      r8.xyz = norm(r9);			// partial precision
      r1.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r3.w = (r3.w * -r3.w) - const_1.z;			// partial precision
      r1.xyz = (r3.y <= 0.0 ? r1 : LightData[01]);			// partial precision
      r3.w = r1.w * r3.w;			// partial precision
      r1.xyz = (r3.z <= 0.0 ? r1 : LightData[02]);			// partial precision
      r1.w = (r3.w >= const_1.y ? r3.w : const_1.y);			// partial precision
      r0.xyz = (r1.w * r1) + r0;			// partial precision
      r0.w = r0.w - const_1.z;
    endif
    if_lt const_1.z, r2.w
      r3.xyz = (const_7.x * r0.w) - const_7.yzww;
      r1 = (r3.x == 0.0 ? LightData[03] : r2.y)
      r1 = (r3.y == 0.0 ? LightData[04] : r1)
      r1 = (r3.z == 0.0 ? LightData[05] : r1)
      r8.xyz = r1 - input_5;
      r1.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r1.z);
      r1.xyz = (r3.x == 0.0 ? LightData[02] : r2.y)			// partial precision
      r3.w = 1.0 / r3.w;
      r1.w = 1.0 / r1.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r3.w = sat(r3.w * r1.w);
      r8.xyz = norm(r9);			// partial precision
      r1.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r3.w = (r3.w * -r3.w) - const_1.z;			// partial precision
      r1.xyz = (r3.y == 0.0 ? LightData[03] : r1)			// partial precision
      r3.w = r1.w * r3.w;			// partial precision
      r1.xyz = (r3.z == 0.0 ? LightData[04] : r1)			// partial precision
      r1.w = (r3.w >= const_1.y ? r3.w : const_1.y);			// partial precision
      r3.xyz = (r1.w * r1) + r0;			// partial precision
      r1.w = r0.w - const_1.z;
    else
      r3.xyz = r0;			// partial precision
      r1.w = r0.w;
    endif
    if_lt const_4.w, r2.w
      r1.xyz = (const_8.x * r1.w) - const_8.yzww;
      r0 = (r1.x == 0.0 ? LightData[05] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[06] : r0)
      r0 = (r1.z == 0.0 ? LightData[07] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[04] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[05] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[06] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_7.z, r2.w
      r1.xyz = (const_48.x * r1.w) - const_48.yzww;
      r0 = (r1.x == 0.0 ? LightData[07] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[08] : r0)
      r0 = (r1.z == 0.0 ? LightData[09] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[06] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[07] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[08] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_7.w, r2.w
      r1.xyz = (MatAlpha9.x * r1.w) - MatAlpha9.yzww;
      r0 = (r1.x == 0.0 ? LightData[09] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[10] : r0)
      r0 = (r1.z == 0.0 ? LightData[11] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[08] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[09] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[10] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_8.z, r2.w
      r1.xyz = (const_40.x * r1.w) - const_40.yzww;
      r0 = (r1.x == 0.0 ? LightData[11] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[12] : r0)
      r0 = (r1.z == 0.0 ? LightData[13] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[10] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[11] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[12] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_8.w, r2.w
      r1.xyz = (const_41.x * r1.w) - const_41.yzww;
      r0 = (r1.x == 0.0 ? LightData[13] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[14] : r0)
      r0 = (r1.z == 0.0 ? LightData[15] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[12] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[13] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[14] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_48.z, r2.w
      r1.xyz = (const_49.x * r1.w) - const_49.yzww;
      r0 = (r1.x == 0.0 ? LightData[15] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[16] : r0)
      r0 = (r1.z == 0.0 ? LightData[17] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[14] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[15] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[16] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_48.w, r2.w
      r1.xyz = (ToggleADTS0.x * r1.w) - ToggleADTS0.yzww;
      r0 = (r1.x == 0.0 ? LightData[17] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[18] : r0)
      r0 = (r1.z == 0.0 ? LightData[19] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[16] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[17] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[18] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -MatAlpha9.z, r2.w
      r1.xyz = (const_42.x * r1.w) - const_42.yzww;
      r0 = (r1.x == 0.0 ? LightData[19] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[20] : r0)
      r0 = (r1.z == 0.0 ? LightData[21] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[18] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[19] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[20] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -MatAlpha9.w, r2.w
      r1.xyz = (const_43.x * r1.w) - const_43.yzww;
      r0 = (r1.x == 0.0 ? LightData[21] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[22] : r0)
      r0 = (r1.z == 0.0 ? LightData[23] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[20] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[21] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[22] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_40.z, r2.w
      r1.xyz = (const_45.x * r1.w) - const_45.yzww;
      r0 = (r1.x == 0.0 ? LightData[23] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[24] : r0)
      r0 = (r1.z == 0.0 ? LightData[25] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[22] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[23] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[24] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_40.w, r2.w
      r1.xyz = (const_44.x * r1.w) - const_44.yzww;
      r0 = (r1.x == 0.0 ? LightData[25] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[26] : r0)
      r0 = (r1.z == 0.0 ? LightData[27] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[24] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[25] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[26] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_41.z, r2.w
      r1.xyz = (const_47.x * r1.w) - const_47.yzww;
      r0 = (r1.x == 0.0 ? LightData[27] : r2.y)
      r0 = (r1.y == 0.0 ? LightData[28] : r0)
      r0 = (r1.z == 0.0 ? LightData[29] : r0)
      r8.xyz = r0 - input_5;
      r0.z = (r8.x * r8.x) + (r8.y * r8.y) + (r8.z * r8.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r1.x == 0.0 ? LightData[26] : r2.y)			// partial precision
      r1.x = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r9.x = (r7.x * r8.x) + (r7.y * r8.y) + (r7.z * r8.z);
      r9.y = (r6.x * r8.x) + (r6.y * r8.y) + (r6.z * r8.z);
      r9.z = (r5.x * r8.x) + (r5.y * r8.y) + (r5.z * r8.z);
      r1.x = sat(r1.x * r0.w);
      r8.xyz = norm(r9);			// partial precision
      r0.w = (r4.x * r8.x) + (r4.y * r8.y) + (r4.z * r8.z);			// partial precision
      r1.x = (r1.x * -r1.x) - const_1.z;			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[27] : r0)			// partial precision
      r1.y = r0.w * r1.x;			// partial precision
      r0.xyz = (r1.z == 0.0 ? LightData[28] : r0)			// partial precision
      r0.w = (r1.y >= const_1.y ? r1.y : const_1.y);			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_41.w, r2.w
      r0.xyz = LightData[29] - input_5;
      r1.x = (r7.x * r0.x) + (r7.y * r0.y) + (r7.z * r0.z);
      r1.y = (r6.x * r0.x) + (r6.y * r0.y) + (r6.z * r0.z);
      r1.z = (r5.x * r0.x) + (r5.y * r0.y) + (r5.z * r0.z);
      r0.w = (r0.x * r0.x) + (r0.y * r0.y) + (r0.z * r0.z);
      r0.xyz = norm(r1);			// partial precision
      r0.w = 1.0 / sqrt(r0.w);
      r1.z = 1.0 / r0.w;
      r1.y = 1.0 / LightData[29].w;
      r0.w = (r4.x * r0.x) + (r4.y * r0.y) + (r4.z * r0.z);			// partial precision
      r0.z = sat(r1.z * r1.y);
      r0.z = (r0.z * -r0.z) - const_1.z;			// partial precision
      r1.xy = (const_46.x * r1.w) - const_46.yzzw;
      r1.w = r0.w * r0.z;			// partial precision
      r0.xyz = (r1.x == 0.0 ? LightData[28] : r2.y)			// partial precision
      r0.w = (r1.w >= const_1.y ? r1.w : const_1.y);			// partial precision
      r0.xyz = (r1.y == 0.0 ? LightData[29] : r0)			// partial precision
      r3.xyz = (r0.w * r0) + r3;			// partial precision
    endif
    r0.xyz = r2.x - HairTint;			// partial precision
    r0.xyz = (input_1.y * r0) - const_1.x;			// partial precision
    r4.xyz = r0 - r0;			// partial precision
    r0 = BaseMap[input_0];			// partial precision
    r1 = LayerMap[input_0];			// partial precision
    r2.w = r2.z - ToggleADTS.x;			// partial precision
    r2.xyz = r1.w * (r1 - r0) + r0;			// partial precision
    r0.z = ToggleADTS.x;			// partial precision
    r0.xyz = (r0.z * AmbientColor) + r2.w;			// partial precision
    r1.xyz = r4 * r2;			// partial precision
    r0.xyz = r3 - r0;			// partial precision
    r1.xyz = r1 * r0;			// partial precision
    r0.xyz = input_6 - r1;			// partial precision
    rendertarget_0.xyz = (input_6.w * r0) - r1;			// partial precision
    rendertarget_0.w = r0.w * MatAlpha.x;			// partial precision

// approximately 454 instruction slots used (3 texture, 451 arithmetic)
