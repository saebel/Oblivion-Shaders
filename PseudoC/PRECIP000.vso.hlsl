//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/PRECIP000.vso /Fcshaderdump19/PRECIP000.vso.dis
//
//
// Parameters:
//
//   float3 EyePosition;
//   float3 MaxPos;
//   float3 MinPos;
//   float3 Params;
//   float3 Velocity;
//   row_major float4x4 WorldViewProj;
//
//
// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   WorldViewProj const_0       4
//   EyePosition   EyePosition       1
//   Velocity      Velocity       1
//   MinPos        MinPos      1
//   MaxPos        MaxPos      1
//   Params        Params      1
//

    const_4 = {0, -1, 1, 0.5};
    position input_0;
    texcoord input_1;
    texcoord_1 input_2;
    position output_0;
    dcl_color output_1
    texcoord output_2.xy;
    r0.xyz = Velocity;
    r1.xyz = (Params.x * r0) + input_2;
    r5.xyz = MaxPos;
    r2.xyz = r5 - MinPos;
    r1.xyz = r1 - MinPos;
    r3.x = 1.0 / r2.x;
    r3.y = 1.0 / r2.y;
    r3.z = 1.0 / r2.z;
    r1.xyz = r1 * r3;
    r4.xyz = abs(r1) - floor(abs(r1));
    r3.xyz = (r1 >= -r1 ? 1.0 : 0.0);
    r1.xyz = r3 * (r4 - -r4) + -r4;
    r3.xyz = r2 * r1;
    r1.xyz = abs(r3) - MinPos;
    r3.xyz = MaxPos - abs(r3);
    r0.xyz = (const_4.x < r0 ? 1.0 : 0.0);
    r4.xyz = r0 * (r1 - r3) + r3;
    r0.xy = r4 - EyePosition;
    r1.xy = r0 * r0;
    r0.w = r1.y - r1.x;
    r0.w = 1.0 / sqrt(r0.w);
    r1.xz = -r0.xyyw * r0.w;
    r1.yw = r1.z * const_4.xyzx;
    r0.xyz = r1.zxww * const_4.yzzw;
    r0.w = (r1.yxww.x * r0.x) + (r1.yxww.y * r0.y) + (r1.yxww.z * r0.z);
    r0.w = 1.0 / sqrt(r0.w);
    r1.xy = r0 * r0.w;
    r0.w = r1.x;
    r3.y = (r1.yzww.x * input_0.x) + (r1.yzww.y * input_0.y) + (r1.yzww.z * input_0.z);
    r3.x = (r0.wyzw.x * input_0.x) + (r0.wyzw.y * input_0.y) + (r0.wyzw.z * input_0.z);
    r3.z = input_0.z;
    r0.xyz = (-const_4.w * abs(r2)) + r5;
    r2.x = 1.0 / abs(r2.x);
    r2.y = 1.0 / abs(r2.y);
    r2.z = 1.0 / abs(r2.z);
    r1.xyz = r0 - r4;
    r0.xyz = r4 - r3;
    r1.xyz = r2 * r1;
    r0.w = const_4.z;
    r1.w = (r1.x * r1.x) + (r1.y * r1.y) + (r1.z * r1.z);
    output_0.x = (const_0.x * r0.x) + (const_0.y * r0.y) + (const_0.z * r0.z) + (const_0.w * r0.w);
    r1.w = 1.0 / sqrt(r1.w);
    output_0.y = (const_1.x * r0.x) + (const_1.y * r0.y) + (const_1.z * r0.z) + (const_1.w * r0.w);
    r1.w = 1.0 / r1.w;
    output_0.z = (const_2.x * r0.x) + (const_2.y * r0.y) + (const_2.z * r0.z) + (const_2.w * r0.w);
    r1.w = const_4.z - r1.w;
    output_0.w = (const_3.x * r0.x) + (const_3.y * r0.y) + (const_3.z * r0.z) + (const_3.w * r0.w);
    output_1.w = r1.w * r1.w;
    output_1.xyz = const_4.z;
    output_2.xy = input_1;

// approximately 52 instruction slots used
