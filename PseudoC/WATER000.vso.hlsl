//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/WATER000.vso /Fcshaderdump19/WATER000.vso.dis
//
//
// Parameters:
//
//   float4 DepthOffset;
//   row_major float4x4 ModelViewProj;
//   float4 QPosAdjust;
//   float Tile;
//   row_major float4x4 WorldMat;
//
//
// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   ModelViewProj[0] ModelViewProj[0]       1
//   ModelViewProj[1] ModelViewProj[1]       1
//   ModelViewProj[2] ModelViewProj[2]       1
//   ModelViewProj[3] ModelViewProj[3]       1
//   WorldMat[0]      WorldMat[0]       1
//   WorldMat[1]      WorldMat[1]       1
//   WorldMat[2]      WorldMat[2]       1
//   WorldMat[3]      WorldMat[3]       1
//   Tile          Tile       1
//   QPosAdjust    QPosAdjust       1
//   DepthOffset   DepthOffset      1
//

    ModelViewProj[1]1 = {0.5, 0.333333343, 0.000732423679, 0};
    ModelViewProj[1]2 = {1, -1, 0, 0};
    position input_0;
    texcoord input_1;
    position.x = (ModelViewProj[0].x * input_0.x) + (ModelViewProj[0].y * input_0.y) + (ModelViewProj[0].z * input_0.z) + (ModelViewProj[0].w * input_0.w);
    position.y = (ModelViewProj[1].x * input_0.x) + (ModelViewProj[1].y * input_0.y) + (ModelViewProj[1].z * input_0.z) + (ModelViewProj[1].w * input_0.w);
    position.z = (ModelViewProj[2].x * input_0.x) + (ModelViewProj[2].y * input_0.y) + (ModelViewProj[2].z * input_0.z) + (ModelViewProj[2].w * input_0.w);
    r1.w = ModelViewProj[1]1.x;
    r0 = r1.w * ModelViewProj[3];
    position.w = (ModelViewProj[3].x * input_0.x) + (ModelViewProj[3].y * input_0.y) + (ModelViewProj[3].z * input_0.z) + (ModelViewProj[3].w * input_0.w);
    texcoord_2 = (r1.w * ModelViewProj[0]) + r0;
    texcoord_3 = (r1.w * ModelViewProj[1]) + r0;
    texcoord_4 = (r1.w * ModelViewProj[2]) + r0;
    texcoord_1.z = (WorldMat[2].x * input_0.x) + (WorldMat[2].y * input_0.y) + (WorldMat[2].z * input_0.z) + (WorldMat[2].w * input_0.w);
    texcoord_1.w = (WorldMat[3].x * input_0.x) + (WorldMat[3].y * input_0.y) + (WorldMat[3].z * input_0.z) + (WorldMat[3].w * input_0.w);
    r0.x = (WorldMat[0].x * input_0.x) + (WorldMat[0].y * input_0.y) + (WorldMat[0].z * input_0.z) + (WorldMat[0].w * input_0.w);
    r0.y = (WorldMat[1].x * input_0.x) + (WorldMat[1].y * input_0.y) + (WorldMat[1].z * input_0.z) + (WorldMat[1].w * input_0.w);
    r0.zw = r0.xyxy - QPosAdjust.xyxy;
    texcoord_1.xy = r0;
    texcoord_7.zw = r0 * ModelViewProj[1]1.z;
    texcoord_0 = input_0;
    texcoord_5 = ModelViewProj[3];
    r1.w = 1.0 / Tile.x;
    texcoord_6.xy = input_1;
    r0.zw = (input_1.xyxy * r1.w) - DepthOffset.xyyx;
    r0.xy = r1.w * input_1;
    r0.zw = r0 * ModelViewProj[1]1.y;
    texcoord_6.zw = (ModelViewProj[1]2.xyxy * r0) + ModelViewProj[1]2.xyzx;
    texcoord_7.xy = r0;

// approximately 25 instruction slots used
