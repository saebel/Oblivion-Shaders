//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/HAIR2001.pso /Fcshaderdump19/HAIR2001.pso.dis
//
//
// Parameters:
//
//   float4 AmbientColor;
//   sampler2D AnisoMap;
//   sampler2D DiffuseMap;
//   sampler2D HeightMap;
//   sampler2D LayerMap;
//   sampler2D NormalMap;
//   float4 PSHairTint;
//   float4 PSLightColor[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   AmbientColor AmbientColor       1
//   PSLightColor PSLightColor       1
//   PSHairTint   PSHairTint      1
//   DiffuseMap   DiffuseMap       1
//   NormalMap    NormalMap       1
//   HeightMap    HeightMap       1
//   AnisoMap     AnisoMap       1
//   LayerMap     LayerMap       1
//

    const_0 = {0.0399999991, -0.0199999996, -0.5, 0};
    const_3 = {1, 0.5, 0.150000006, 0};
    texcoord input_0.xy;
    texcoord input_1.xyz;
    texcoord input_2.xyz;
    texcoord input_3.xyz;
    color input_0;
    color input_1.xy;
    sampler DiffuseMap;
    sampler NormalMap;
    sampler HeightMap;
    sampler AnisoMap;
    sampler LayerMap;
    r0 = HeightMap[texcoord_0];
    r0.w = (r0.x * const_0.x) - const_0.y;
    r0.xy = texcoord_0;
    r1.xy = (r0.w * texcoord_1) + r0;
    r0 = NormalMap[r1];
    r0.xyz = r0 - const_0.z;
    r0.xyz = r0 - r0;
    r4.xyz = norm(r0);
    r5.x = (r4.x * texcoord_2.x) + (r4.y * texcoord_2.y) + (r4.z * texcoord_2.z);
    r5.y = (r4.x * texcoord_3.x) + (r4.y * texcoord_3.y) + (r4.z * texcoord_3.z);
    r1 = LayerMap[r1];
    r0 = DiffuseMap[texcoord_0];
    r2 = AnisoMap[r5];
    r3 = NormalMap[texcoord_0];
    r6.w = (r5.x >= const_0.w ? r5.x : const_0.w);
    r2.x = (r4.x * texcoord_1.x) + (r4.y * texcoord_1.y) + (r4.z * texcoord_1.z);
    r4.w = (r2.x >= const_0.w ? r2.x : const_0.w);
    r4.w = const_3.x - r4.w;
    r5.w = r4.w * r4.w;
    r6.w = sat((r4.w * r5.w) - r6.w);
    r2.xyz = sat((r6.w * PSLightColor) - input_0);
    r2.xyz = sat((r4.w * r5.w) - r2);
    r2.xyz = r2 * PSLightColor;
    r2.xyz = (input_0.w * r2) + AmbientColor;
    r2.xyz = r2 - input_0;
    r3.y = const_0.z;
    r3.xyz = r3.y - PSHairTint;
    r3.xyz = (input_1.y * r3) - const_0.z;
    r4.xyz = r3 - r3;
    r5.xyz = (const_3.y * r3) + const_3.z;
    r1.xyz = r1 * r4;
    r4.w = r4.w * r5.w;
    r2.xyz = r2 * r1;
    r1.xyz = r4.w * PSLightColor;
    r4.w = (texcoord_2.z >= const_0.w ? texcoord_2.z : const_0.w);
    r3.xyz = r4.w * PSLightColor;
    r3.xyz = (input_0.w * r3) + input_0;
    r3.xyz = (input_0.w * r1) + r3;
    r1.xyz = r3.w * PSLightColor;
    r3.w = r2.w * input_0.w;
    r1.xyz = r5 * r1;
    r3.xyz = r3 - AmbientColor;
    r4.w = (r1.x <= 0.0 ? const_3.x : const_3.w);
    r0.xyz = r0 * r4;
    r5.w = (r1.y <= 0.0 ? const_3.x : const_3.w);
    r3.xyz = r3 * r0;
    r2.w = (r1.z <= 0.0 ? const_3.x : const_3.w);
    r0.xyz = r1.w * (r2 - r3) + r3;
    r1.w = r4.w * r5.w;
    r1.xyz = (r3.w * r1) + r0;
    r1.w = r2.w * r1.w;
    r0.w = r0.w * AmbientColor.w;
    r0.xyz = (r1.w <= 0.0 ? r1 : r0);
    rendertarget_0 = r0;

// approximately 57 instruction slots used (6 texture, 51 arithmetic)
