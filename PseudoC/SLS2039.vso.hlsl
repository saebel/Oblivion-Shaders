//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2039.vso /Fcshaderdump19/SLS2039.vso.dis
//
//
// Parameters:
//
//   float4 BoundWorldCenter;
//   float4 EyePosition;
//   row_major float4x4 ModelViewProj;
//   row_major float4x4 ObjToCubeSpace;
//
//
// Registers:
//
//   Name             Reg   Size
//   ---------------- ----- ----
//   ModelViewProj[0]    const_0        1
//   ModelViewProj[1]    const_1        1
//   ModelViewProj[2]    const_2        1
//   ModelViewProj[3]    const_3        1
//   ObjToCubeSpace[0]   const_8        1
//   ObjToCubeSpace[1]   const_9        1
//   ObjToCubeSpace[2]   const_10        1
//   ObjToCubeSpace[3]   const_11        1
//   EyePosition      const_25      1
//   BoundWorldCenter const_46      1
//

    const int4 const_4 = {1, -2, 3, 0};
    const float4 const_5 = {0.5, -0.8, 6.66666651, 0};
    float4 IN.position : POSITION;
    float4 IN.texcoord_0 : TEXCOORD0;
    float4 IN.color_0 : COLOR0;
    r1.w = dot(ObjToCubeSpace[3].xyzw, IN.position.xyzw);
    r1.x = dot(ObjToCubeSpace[0].xyzw, IN.position.xyzw);
    r1.y = dot(ObjToCubeSpace[1].xyzw, IN.position.xyzw);
    r1.z = dot(ObjToCubeSpace[2].xyzw, IN.position.xyzw);
    r0.xyzw = r1.xyzw - BoundWorldCenter.xyzw;
    r0.w = dot(r0.xyzw, r0.xyzw);	// normalize + length
    OUT.position.x = dot(ModelViewProj[0].xyzw, IN.position.xyzw);
    r0.w = 1.0 / sqrt(r0.w);
    r2.xyz = EyePosition.xyz - r1.xyz;
    r1.xyz = r0.xyz * r0.w;
    r0.xyz = normalize(r2.xyz);
    r3.x = dot(r1.xyz, r1.xyz);	// normalize + length
    r2.x = dot(r1.xyz, r0.xyz);
    r0.w = 1.0 / sqrt(r3.x);
    OUT.position.y = dot(ModelViewProj[1].xyzw, IN.position.xyzw);
    r0.w = (r2.x * r0.w) - 0.8;
    OUT.position.z = dot(ModelViewProj[2].xyzw, IN.position.xyzw);
    r0.w = r0.w * 6.66666651;
    OUT.position.w = dot(ModelViewProj[3].xyzw, IN.position.xyzw);
    r0.w = max(r0.w, 0);
    OUT.texcoord_1.xyz = (0.5 * r1.xyz) + 0.5;
    r1.w = min(r0.w, 1);
    r0.w = (r1.w * -2) + 3;
    r1.w = r1.w * r1.w;
    OUT.texcoord_2.xyz = r0.xyz;
    OUT.texcoord_1.w = r0.w * r1.w;
    OUT.texcoord_0.xy = IN.texcoord_0.xy;
    OUT.color_0.rgb = IN.color_0.rgb;

// approximately 30 instruction slots used
