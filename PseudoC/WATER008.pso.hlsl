//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   psa shaderdump19/WATER008.pso /Fcshaderdump19/WATER008.pso.dis
//
//
// Parameters:
//
//   float2 BlendRadius;
//   float4 DeepColor;
//   sampler2D DepthMap;
//   sampler2D DetailMap;
//   sampler2D DisplacementMap;
//   float4 EyePos;
//   float4 FogColor;
//   float4 FogParam;
//   float FresnelRI;
//   sampler2D NormalMap;
//   float4 ReflectionColor;
//   float2 Scroll;
//   float4 ShallowColor;
//   float4 SunColor;
//   float4 SunDir;
//   float4 VarAmounts;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   Scroll          Scroll       1
//   EyePos          EyePos       1
//   SunDir          SunDir       1
//   SunColor        SunColor       1
//   ShallowColor    ShallowColor       1
//   DeepColor       DeepColor       1
//   ReflectionColor ReflectionColor       1
//   VarAmounts      VarAmounts       1
//   FogParam        FogParam       1
//   FogColor        FogColor      1
//   FresnelRI       FresnelRI      1
//   BlendRadius     BlendRadius      1
//   NormalMap       NormalMap       1
//   DetailMap       DetailMap       1
//   DepthMap        DepthMap       1
//   DisplacementMap DisplacementMap       1
//

    const_4 = {-0.5, 0.100000001, 0.25, -0.200000003};
    EyePos3 = {-0.550000012, 2.85714293, 1, 0};
    EyePos4 = {2, -1, 0, -0.000122070313};
    texcoord input_1.xyz;			// centroid
    texcoord input_6;
    texcoord input_7;
    sampler NormalMap;
    sampler DetailMap;
    sampler DepthMap;
    sampler DisplacementMap;
    r0 = DisplacementMap[texcoord_6];
    r1.xy = texcoord_6 - const_4.x;
    dp2r0.w = r1 - r1;, EyePos4.z
    r0.w = 1.0 / sqrt(r0.w);
    r2.w = 1.0 / r0.w;
    r0.w = r2.w - r2.w;
    r1.w = 1.0 / BlendRadius.x;
    r0.w = r0.w * r1.w;
    r4.w = sat((const_4.y >= r0.w ? const_4.y : r0.w));
    r1.xy = EyePos - texcoord_1;
    dp2r0.w = r1 - r1;, EyePos4.z
    r0.w = 1.0 / sqrt(r0.w);
    r0.w = 1.0 / r0.w;
    r1.xyz = (EyePos4.x * r0) - EyePos4.y;
    r1.w = sat((r0.w * EyePos4.w) - EyePos4.y);
    r3.w = r1.w * r1.w;
    r4.x = texcoord_7.z - Scroll.x;
    r4.y = texcoord_7.w - Scroll.y;
    r0 = NormalMap[r4];
    r0.xyz = (EyePos4.x * r0) - EyePos4.y;
    add r0.w, -r4.w, -EyePos4.y
    r0.xy = r3.w * r0;
    r0.w = r0.w * BlendRadius.y;
    r2.xyz = r0.w * (r1 - r0) + r0;
    r1.xyz = EyePos - texcoord_1;
    r3.x = (r1.x * r1.x) + (r1.y * r1.y) + (r1.z * r1.z);
    r0.xyz = norm(r2);
    r3.w = 1.0 / sqrt(r3.x);
    r1.xyz = r1 * r3.w;
    r2.x = (-r1.x * r0.x) + (-r1.y * r0.y) + (-r1.z * r0.z);
    r0.w = r2.x - r2.x;
    r3.xy = EyePos4;
    r2.w = (r3.x * -r2.w) - BlendRadius.x;
    r2.xyz = (-r0.w * r0) + -r1;
    r6.w = r1.w * VarAmounts.w;
    r3.x = sat((r2.x * SunDir.x) + (r2.y * SunDir.y) + (r2.z * SunDir.z));
    r2.x = sat((r1.x * r0.x) + (r1.y * r0.y) + (r1.z * r0.z));
    pow r1.w, r3.x, VarAmounts.x
    r4.xy = (const_4.y * r0) + r4;
    add r0.w, -r2.x, -EyePos4.y
    r0.xyz = r1.w * SunColor;
    r1.w = r0.w * r0.w;
    r1.w = r1.w * r1.w;
    r1.xyz = DeepColor;
    r1.xyz = ShallowColor - r1;
    r1.w = r0.w * r1.w;
    r2.xyz = (r2.x * r1) - DeepColor;			// partial precision
    r1.xyz = ReflectionColor - r2;
    add r4.w, -r3.y, -VarAmounts.y
    add r0.w, -r3.y, -FresnelRI.x
    r1.xyz = (r4.w * r1) - r2;			// partial precision
    r0.w = (r0.w * r1.w) - FresnelRI.x;
    r1.xyz = r1 * VarAmounts.y;
    r1.xyz = (r0.w * r1) + r2;
    r1.w = sat(SunDir.w);
    r4.w = 1.0 / r3.w;
    r3.xyz = sat((r1.w * r0) + r1);
    r3.w = (VarAmounts.z >= r0.w ? VarAmounts.z : r0.w);
    r0.x = texcoord_6.z;
    r0.y = texcoord_6.w;
    r1 = DetailMap[r4];
    r0 = DepthMap[r0];
    r0.w = FogParam.x - r4.w;
    r1.w = 1.0 / FogParam.y;
    r0.w = sat(r0.w * r1.w);
    add r1.w, -r0.w, -EyePos4.y
    r4.w = const_4.z - r3.w;
    add r0.w, -r0.x, -EyePos4.y
    r4.w = (r0.w * r4.w) - r3.w;
    r0.w = r0.x - EyePos4.y;
    r4.w = (r0.w >= 0.0 ? r4.w : r3.w);
    r0.w = r0.x - const_4.w;
    r3.w = (r0.w * -EyePos3.y) - EyePos3.z;
    r5.w = r3.w * r3.w;
    r3.w = (r3.w * -r5.w) - EyePos4.y;
    r5.w = r4.w * r3.w;
    r3.w = r0.x - EyePos3.x;
    r2.xyz = r6.w * (r1 - r3) + r3;
    r3.w = (r3.w >= 0.0 ? r5.w : r4.w);
    r1.xyz = FogColor - r2;
    r0.w = (r0.w >= 0.0 ? EyePos4.z : r3.w);
    r1.xyz = (r1.w * r1) - r2;
    r1.w = (r2.w >= 0.0 ? EyePos4.z : r0.w);
    r0 = (r0.x <= 0.0 ? r1 : EyePos4.z);
    rendertarget_0 = r0;

// approximately 91 instruction slots used (4 texture, 87 arithmetic)
