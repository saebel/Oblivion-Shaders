//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/STB1008.vso /Fcshaderdump19/STB1008.vso.dis
//
//
// Parameters:
//
//   float4 EyePosition;
//   float4 LightPosition[3];
//   row_major float4x4 ModelViewProj;
//   float4 WindMatrices[16];
//
//
// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   ModelViewProj[0] const_0        1
//   ModelViewProj[1] const_1        1
//   ModelViewProj[2] const_2        1
//   ModelViewProj[3] const_3        1
//   LightPosition[0] const_16       1
//   EyePosition   const_25      1
//   WindMatrices[0]  const_38      4
//   WindMatrices[1]  const_39      4
//   WindMatrices[2]  const_40      4
//   WindMatrices[3]  const_41      4
//

    const float4 const_4 = {0.5, 0, 0, 0};
    float4 IN.position : POSITION;
    float3 IN.normal : NORMAL;
    float4 IN.texcoord_0 : TEXCOORD0;
    float3 IN.tangent : TANGENT;
    float3 IN.binormal : BINORMAL;
    float4 IN.blendindices : BLENDINDICES;
    offset.x = IN.blendindices.y;
    r0.x = dot(WindMatrices[0 + offset.x], IN.position);
    r0.y = dot(WindMatrices[1 + offset.x], IN.position);
    r0.z = dot(WindMatrices[2 + offset.x], IN.position);
    r0.w = dot(WindMatrices[3 + offset.x], IN.position);
    r0 = r0 - IN.position;
    r1 = IN.position;
    r0 = (IN.blendindices.x * r0) + r1;

    float3 spcvec;
    float3 spcmod;
    float3 pntvec;
    float3 pntdir;
    float3 pntmod;

    spcvec = EyePosition - r0;
    pntvec = LightPosition[0] - r0;

    pntdir = normalize(normalize(spcvec) + normalize(pntvec)v);

    OUT.texcoord_3.x = dot(IN.tangent , pntdir);
    OUT.texcoord_3.y = dot(IN.binormal, pntdir);
    OUT.texcoord_3.z = dot(IN.normal,   pntdir);

    r0.x = dot(IN.tangent,  IN.normal);
    r0.y = dot(IN.binormal, IN.normal);
    r0.z = dot(IN.normal,   IN.normal);

    OUT.color_0.rgb = (const_4.x * r0) + const_4.x;

    pntvec = pntvec / LightPosition[0].w;

    OUT.texcoord_1.xy = (const_4.x * r0) + const_4.x;
    OUT.texcoord_2.x = (r0.z * const_4.x) + const_4.x;
    OUT.texcoord_0.xy = IN.texcoord_0;
    OUT.texcoord_2.y = const_4.x;

// approximately 37 instruction slots used
