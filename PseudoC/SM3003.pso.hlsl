//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SM3003.pso /Fcshaderdump19/SM3003.pso.dis
//
//
// Parameters:
//
//   float4 AmbientColor;
//   sampler2D AnisoMap;
//   sampler2D BaseMap;
//   float3 EyePosition;
//   float3 HairTint;
//   sampler2D LayerMap;
//   float4 LightData[16];
//   float3 MatAlpha;
//   sampler2D NormalMap;
//   float4 ToggleADTS;
//   float4 ToggleNumLights;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    AmbientColor       1
//   EyePosition     EyePosition       1
//   HairTint        HairTint       1
//   MatAlpha        MatAlpha       1
//   ToggleADTS      ToggleADTS       1
//   ToggleNumLights ToggleNumLights       1
//   LightData[00]       LightData[00]       1
//   LightData[01]       LightData[01]      1
//   LightData[02]       LightData[02]      1
//   LightData[03]       LightData[03]      1
//   LightData[04]       LightData[04]      1
//   LightData[05]       LightData[05]      1
//   LightData[06]       LightData[06]      1
//   LightData[07]       LightData[07]      1
//   LightData[08]       LightData[08]      1
//   LightData[09]       LightData[09]      1
//   LightData[10]       LightData[10]      1
//   LightData[11]       LightData[11]      1
//   LightData[12]       LightData[12]      1
//   LightData[13]       LightData[13]      1
//   LightData[14]       LightData[14]      1
//   LightData[15]       LightData[15]      1
//   BaseMap         BaseMap       1
//   NormalMap       NormalMap       1
//   AnisoMap        AnisoMap       1
//   LayerMap        LayerMap       1
//

    const_4 = {-0.0500000007, 0, 0.699999988, 8};
    const_7 = {-2, -3, -4, 5};
    const_8 = {-0.5, 0, 1, 0.5};
    HairTint5 = {-6, -7, -8, 7};
    HairTint6 = {-8, -9, -10, 0};
    HairTint7 = {2, -14, -15, 0};
    HairTint8 = {-12, -13, -14, 0};
    HairTint9 = {0.300000012, 0.200000003, 3, 4};
    MatAlpha0 = {-1, -2, 0, 2};
    MatAlpha1 = {-4, -5, -6, 6};
    MatAlpha2 = {-10, -11, -12, 0};
    texcoord input_0.xy;			// partial precision
    color input_1.y;			// partial precision
    texcoord_3 input_2.xyz;			// partial precision			// centroid
    texcoord_4 input_3.xyz;			// partial precision			// centroid
    texcoord_5 input_4.xyz;			// partial precision			// centroid
    texcoord_6 input_5.xyz;			// partial precision			// centroid
    texcoord_7 input_6;			// partial precision			// centroid
    sampler BaseMap;
    sampler NormalMap;
    sampler AnisoMap;
    sampler LayerMap;
    r1 = NormalMap[input_0];			// partial precision
    r0.xyz = r1 - const_8.x;			// partial precision
    r0.xyz = r0 - r0;			// partial precision
    r5.xyz = norm(r0);			// partial precision
    r0.xyz = r5 * const_8.w;			// partial precision
    r0.w = r0.z - const_8.z;			// partial precision
    r1.xyz = r0 - const_8.yyzw;			// partial precision
    r0.w = (r0.xyww.x * r1.x) + (r0.xyww.y * r1.y) + (r0.xyww.z * r1.z);			// partial precision
    r0.w = 1.0 / sqrt(r0.w);			// partial precision
    r0.xyz = r1 * r0.w;			// partial precision
    r0.w = r0.x - const_4.x;			// partial precision
    r1.xyz = r0 - const_4.xyyw;			// partial precision
    r6.xyz = const_8;
    r4.w = (ToggleNumLights.x <= 0.0 ? r6.z : r6.y);			// partial precision
    r0.w = (r0.wyzw.x * r1.x) + (r0.wyzw.y * r1.y) + (r0.wyzw.z * r1.z);			// partial precision
    r3.xyz = EyePosition - input_5;			// partial precision
    r10.xyz = norm(input_4);			// partial precision
    r0.w = 1.0 / sqrt(r0.w);			// partial precision
    r2.z = (r10.x * r3.x) + (r10.y * r3.y) + (r10.z * r3.z);			// partial precision
    r4.z = (r10.x * LightData[01].x) + (r10.y * LightData[01].y) + (r10.z * LightData[01].z);			// partial precision
    r12.xyz = norm(input_2);			// partial precision
    r4.x = (r12.x * LightData[01].x) + (r12.y * LightData[01].y) + (r12.z * LightData[01].z);			// partial precision
    r11.xyz = norm(input_3);			// partial precision
    r2.x = (r12.x * r3.x) + (r12.y * r3.y) + (r12.z * r3.z);			// partial precision
    r2.y = (r11.x * r3.x) + (r11.y * r3.y) + (r11.z * r3.z);			// partial precision
    r9.xyz = norm(r2);			// partial precision
    r4.y = (r11.x * LightData[01].x) + (r11.y * LightData[01].y) + (r11.z * LightData[01].z);			// partial precision
    r8.xyz = r1 * r0.w;			// partial precision
    r2.xyz = r4 - r9;
    r3.x = (r0.x * r4.x) + (r0.y * r4.y) + (r0.z * r4.z);			// partial precision
    r1.xyz = norm(r2);			// partial precision
    r2.y = (r8.x * r1.x) + (r8.y * r1.y) + (r8.z * r1.z);			// partial precision
    r3.y = (r0.x * r1.x) + (r0.y * r1.y) + (r0.z * r1.z);			// partial precision
    r3 = AnisoMap[r3];			// partial precision
    r2.x = (r8.x * r4.x) + (r8.y * r4.y) + (r8.z * r4.z);			// partial precision
    r2 = AnisoMap[r2];			// partial precision
    if_ne r4.w, -r4.w
      r1.xyz = r6.x - HairTint;			// partial precision
      r3.z = (r5.x * r4.x) + (r5.y * r4.y) + (r5.z * r4.z);			// partial precision
      r1.xyz = (input_1.y * r1) - const_8.w;			// partial precision
      r0.w = r3.w * const_4.z;			// partial precision
      r1.xyz = r1 - r1;			// partial precision
      r2.z = (r3.z >= const_8.y ? r3.z : const_8.y);			// partial precision
      r1.xyz = (r2.w * r1) + r0.w;			// partial precision
      r0.w = (r4.z >= const_8.y ? r4.z : const_8.y);			// partial precision
      r1.xyz = r1 * LightData[00];			// partial precision
      r4.xyz = r2.z * LightData[00];			// partial precision
      r1.xyz = r0.w * r1;			// partial precision
      r0.w = const_8.z;			// partial precision
    else
      r0.w = const_8.y;
      r4.xyz = r0.w;			// partial precision
      r1.xyz = r0.w;			// partial precision
    endif
    r13.x = r0.w - r0.w;
    r13.yz = r13.x - MatAlpha0.xxyw;
    r2.xyz = r13.x - MatAlpha0.zxyw;
    r14.xyz = (r2 >= 0.0 ? -r13 : r2);
    r2.xyz = (r14.x <= 0.0 ? r6.y : LightData[01]);
    r2.w = const_4.w;			// partial precision
    r2.w = r2.w - ToggleNumLights.x;			// partial precision
    r2.xyz = (r14.y <= 0.0 ? r2 : LightData[02]);
    r3.y = (ToggleNumLights.y < r2.w ? ToggleNumLights.y : r2.w);			// partial precision
    r2.xyz = (r14.z <= 0.0 ? r2 : LightData[03]);
    r2.w = (r3.y >= 0.0 ? const_8.z : const_8.y);			// partial precision
    r15.xyz = r2 - input_5;
    r3.z = r3.y - floor(r3.y);			// partial precision
    r2.x = (r12.x * r15.x) + (r12.y * r15.y) + (r12.z * r15.z);
    r2.y = (r11.x * r15.x) + (r11.y * r15.y) + (r11.z * r15.z);
    r2.z = (r10.x * r15.x) + (r10.y * r15.y) + (r10.z * r15.z);
    r3.w = (r3.z <= 0.0 ? const_8.z : const_8.y);			// partial precision
    r7.xyz = norm(r2);			// partial precision
    r2.z = r3.y - r3.z;			// partial precision
    r3.xyz = r9 - r7;			// partial precision
    r4.w = (r2.w * r3.w) - r2.z;
    r2.xyz = norm(r3);			// partial precision
    r5.w = (r4.w <= 0.0 ? const_8.z : const_8.y);			// partial precision
    r16.y = (r8.x * r2.x) + (r8.y * r2.y) + (r8.z * r2.z);			// partial precision
    r3.x = (r0.x * r7.x) + (r0.y * r7.y) + (r0.z * r7.z);			// partial precision
    r3.y = (r0.x * r2.x) + (r0.y * r2.y) + (r0.z * r2.z);			// partial precision
    r3 = AnisoMap[r3];			// partial precision
    r16.x = (r8.x * r7.x) + (r8.y * r7.y) + (r8.z * r7.z);			// partial precision
    r2 = AnisoMap[r16];			// partial precision
    if_ne r5.w, -r5.w
      r2.z = (r15.x * r15.x) + (r15.y * r15.y) + (r15.z * r15.z);
      r2.y = (r14.x <= 0.0 ? r6.y : LightData[01].w);			// partial precision
      r5.w = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);			// partial precision
      r2.y = (r14.y <= 0.0 ? r2.y : LightData[02].w);			// partial precision
      r2.y = (r14.z <= 0.0 ? r2.y : LightData[03].w);			// partial precision
      r2.z = 1.0 / sqrt(r2.z);
      r2.z = 1.0 / r2.z;
      r2.y = 1.0 / r2.y;			// partial precision
      r2.z = sat(r2.z * r2.y);
      r6.w = r3.w * const_4.z;			// partial precision
      r3.w = (r2.z * -r2.z) - const_8.z;			// partial precision
      r2.xyz = r13.x - MatAlpha0.zxyw;
      r13.xyz = (r2.x == 0.0 ? LightData[00] : r6.y)			// partial precision
      r3.xyz = r6.x - HairTint;			// partial precision
      r13.xyz = (r2.y == 0.0 ? LightData[01] : r13)			// partial precision
      r3.xyz = (input_1.y * r3) - const_8.w;			// partial precision
      r2.xyz = (r2.z == 0.0 ? LightData[02] : r13)			// partial precision
      r13.xyz = (HairTint9.x * r3) + HairTint9.y;			// partial precision
      r3.xyz = r3.w * r2;			// partial precision
      r13.xyz = (r2.w * r13) + r6.w;			// partial precision
      r3.xyz = r3 * r13;			// partial precision
      r2.w = (r7.z >= const_8.y ? r7.z : const_8.y);			// partial precision
      r1.xyz = (r2.w * r3) + r1;			// partial precision
      r3.w = r5.w * r3.w;			// partial precision
      r2.w = (r3.w >= const_8.y ? r3.w : const_8.y);			// partial precision
      r5.w = r0.w - const_8.z;
      r4.xyz = (r2.w * r2) + r4;			// partial precision
    else
      r5.w = r0.w;
    endif
    r7.w = r5.w - r5.w;
    r13.xyz = r7.w - const_7;
    r2.xyz = (r13.x == 0.0 ? LightData[03] : r6.y)
    r2.xyz = (r13.y == 0.0 ? LightData[04] : r2)
    r2.xyz = (r13.z == 0.0 ? LightData[05] : r2)
    r14.xyz = r2 - input_5;
    r2.x = (r12.x * r14.x) + (r12.y * r14.y) + (r12.z * r14.z);
    r2.y = (r11.x * r14.x) + (r11.y * r14.y) + (r11.z * r14.z);
    r2.z = (r10.x * r14.x) + (r10.y * r14.y) + (r10.z * r14.z);
    r7.xyz = norm(r2);			// partial precision
    r3.xyz = r9 - r7;			// partial precision
    r2.xyz = norm(r3);			// partial precision
    r15.y = (r8.x * r2.x) + (r8.y * r2.y) + (r8.z * r2.z);			// partial precision
    r3.x = (r0.x * r7.x) + (r0.y * r7.y) + (r0.z * r7.z);			// partial precision
    r3.y = (r0.x * r2.x) + (r0.y * r2.y) + (r0.z * r2.z);			// partial precision
    r3 = AnisoMap[r3];			// partial precision
    r15.x = (r8.x * r7.x) + (r8.y * r7.y) + (r8.z * r7.z);			// partial precision
    r2 = AnisoMap[r15];			// partial precision
    if_lt const_8.z, r4.w
      r2.z = (r14.x * r14.x) + (r14.y * r14.y) + (r14.z * r14.z);
      r2.y = (r13.x == 0.0 ? LightData[03].w : r6.y)			// partial precision
      r0.w = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);			// partial precision
      r2.y = (r13.y == 0.0 ? LightData[04].w : r2.y)			// partial precision
      r2.y = (r13.z == 0.0 ? LightData[05].w : r2.y)			// partial precision
      r2.z = 1.0 / sqrt(r2.z);
      r2.z = 1.0 / r2.z;
      r2.y = 1.0 / r2.y;			// partial precision
      r2.z = sat(r2.z * r2.y);
      r6.w = r3.w * const_4.z;			// partial precision
      r3.w = (r2.z * -r2.z) - const_8.z;			// partial precision
      r2.xyz = r7.w - const_7;
      r13.xyz = (r2.x == 0.0 ? LightData[02] : r6.y)			// partial precision
      r3.xyz = r6.x - HairTint;			// partial precision
      r13.xyz = (r2.y == 0.0 ? LightData[03] : r13)			// partial precision
      r3.xyz = (input_1.y * r3) - const_8.w;			// partial precision
      r2.xyz = (r2.z == 0.0 ? LightData[04] : r13)			// partial precision
      r13.xyz = (HairTint9.x * r3) + HairTint9.y;			// partial precision
      r3.xyz = r3.w * r2;			// partial precision
      r13.xyz = (r2.w * r13) + r6.w;			// partial precision
      r3.xyz = r3 * r13;			// partial precision
      r2.w = (r7.z >= const_8.y ? r7.z : const_8.y);			// partial precision
      r1.xyz = (r2.w * r3) + r1;			// partial precision
      r2.w = r0.w * r3.w;			// partial precision
      r0.w = (r2.w >= const_8.y ? r2.w : const_8.y);			// partial precision
      r5.w = r5.w - const_8.z;
      r4.xyz = (r0.w * r2) + r4;			// partial precision
    endif
    r7.w = r5.w - r5.w;
    r13.xyz = r7.w - MatAlpha1;
    r2.xyz = (r13.x == 0.0 ? LightData[05] : r6.y)
    r2.xyz = (r13.y == 0.0 ? LightData[06] : r2)
    r2.xyz = (r13.z == 0.0 ? LightData[07] : r2)
    r14.xyz = r2 - input_5;
    r2.x = (r12.x * r14.x) + (r12.y * r14.y) + (r12.z * r14.z);
    r2.y = (r11.x * r14.x) + (r11.y * r14.y) + (r11.z * r14.z);
    r2.z = (r10.x * r14.x) + (r10.y * r14.y) + (r10.z * r14.z);
    r7.xyz = norm(r2);			// partial precision
    r3.xyz = r9 - r7;			// partial precision
    r2.xyz = norm(r3);			// partial precision
    r15.y = (r8.x * r2.x) + (r8.y * r2.y) + (r8.z * r2.z);			// partial precision
    r3.x = (r0.x * r7.x) + (r0.y * r7.y) + (r0.z * r7.z);			// partial precision
    r3.y = (r0.x * r2.x) + (r0.y * r2.y) + (r0.z * r2.z);			// partial precision
    r3 = AnisoMap[r3];			// partial precision
    r15.x = (r8.x * r7.x) + (r8.y * r7.y) + (r8.z * r7.z);			// partial precision
    r2 = AnisoMap[r15];			// partial precision
    if_lt MatAlpha0.w, r4.w
      r2.z = (r14.x * r14.x) + (r14.y * r14.y) + (r14.z * r14.z);
      r2.y = (r13.x == 0.0 ? LightData[05].w : r6.y)			// partial precision
      r0.w = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);			// partial precision
      r2.y = (r13.y == 0.0 ? LightData[06].w : r2.y)			// partial precision
      r2.y = (r13.z == 0.0 ? LightData[07].w : r2.y)			// partial precision
      r2.z = 1.0 / sqrt(r2.z);
      r2.z = 1.0 / r2.z;
      r2.y = 1.0 / r2.y;			// partial precision
      r2.z = sat(r2.z * r2.y);
      r6.w = r3.w * const_4.z;			// partial precision
      r3.w = (r2.z * -r2.z) - const_8.z;			// partial precision
      r2.xyz = r7.w - MatAlpha1;
      r13.xyz = (r2.x == 0.0 ? LightData[04] : r6.y)			// partial precision
      r3.xyz = r6.x - HairTint;			// partial precision
      r13.xyz = (r2.y == 0.0 ? LightData[05] : r13)			// partial precision
      r3.xyz = (input_1.y * r3) - const_8.w;			// partial precision
      r2.xyz = (r2.z == 0.0 ? LightData[06] : r13)			// partial precision
      r13.xyz = (HairTint9.x * r3) + HairTint9.y;			// partial precision
      r3.xyz = r3.w * r2;			// partial precision
      r13.xyz = (r2.w * r13) + r6.w;			// partial precision
      r3.xyz = r3 * r13;			// partial precision
      r2.w = (r7.z >= const_8.y ? r7.z : const_8.y);			// partial precision
      r1.xyz = (r2.w * r3) + r1;			// partial precision
      r2.w = r0.w * r3.w;			// partial precision
      r0.w = (r2.w >= const_8.y ? r2.w : const_8.y);			// partial precision
      r5.w = r5.w - const_8.z;
      r4.xyz = (r0.w * r2) + r4;			// partial precision
    endif
    r7.w = r5.w - r5.w;
    r13.xyz = r7.w - HairTint5;
    r2.xyz = (r13.x == 0.0 ? LightData[07] : r6.y)
    r2.xyz = (r13.y == 0.0 ? LightData[08] : r2)
    r2.xyz = (r13.z == 0.0 ? LightData[09] : r2)
    r14.xyz = r2 - input_5;
    r2.x = (r12.x * r14.x) + (r12.y * r14.y) + (r12.z * r14.z);
    r2.y = (r11.x * r14.x) + (r11.y * r14.y) + (r11.z * r14.z);
    r2.z = (r10.x * r14.x) + (r10.y * r14.y) + (r10.z * r14.z);
    r7.xyz = norm(r2);			// partial precision
    r3.xyz = r9 - r7;			// partial precision
    r2.xyz = norm(r3);			// partial precision
    r15.y = (r8.x * r2.x) + (r8.y * r2.y) + (r8.z * r2.z);			// partial precision
    r3.x = (r0.x * r7.x) + (r0.y * r7.y) + (r0.z * r7.z);			// partial precision
    r3.y = (r0.x * r2.x) + (r0.y * r2.y) + (r0.z * r2.z);			// partial precision
    r3 = AnisoMap[r3];			// partial precision
    r15.x = (r8.x * r7.x) + (r8.y * r7.y) + (r8.z * r7.z);			// partial precision
    r2 = AnisoMap[r15];			// partial precision
    if_lt HairTint9.z, r4.w
      r2.z = (r14.x * r14.x) + (r14.y * r14.y) + (r14.z * r14.z);
      r2.y = (r13.x == 0.0 ? LightData[07].w : r6.y)			// partial precision
      r0.w = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);			// partial precision
      r2.y = (r13.y == 0.0 ? LightData[08].w : r2.y)			// partial precision
      r2.y = (r13.z == 0.0 ? LightData[09].w : r2.y)			// partial precision
      r2.z = 1.0 / sqrt(r2.z);
      r2.z = 1.0 / r2.z;
      r2.y = 1.0 / r2.y;			// partial precision
      r2.z = sat(r2.z * r2.y);
      r6.w = r3.w * const_4.z;			// partial precision
      r3.w = (r2.z * -r2.z) - const_8.z;			// partial precision
      r2.xyz = r7.w - HairTint5;
      r13.xyz = (r2.x == 0.0 ? LightData[06] : r6.y)			// partial precision
      r3.xyz = r6.x - HairTint;			// partial precision
      r13.xyz = (r2.y == 0.0 ? LightData[07] : r13)			// partial precision
      r3.xyz = (input_1.y * r3) - const_8.w;			// partial precision
      r2.xyz = (r2.z == 0.0 ? LightData[08] : r13)			// partial precision
      r13.xyz = (HairTint9.x * r3) + HairTint9.y;			// partial precision
      r3.xyz = r3.w * r2;			// partial precision
      r13.xyz = (r2.w * r13) + r6.w;			// partial precision
      r3.xyz = r3 * r13;			// partial precision
      r2.w = (r7.z >= const_8.y ? r7.z : const_8.y);			// partial precision
      r1.xyz = (r2.w * r3) + r1;			// partial precision
      r2.w = r0.w * r3.w;			// partial precision
      r0.w = (r2.w >= const_8.y ? r2.w : const_8.y);			// partial precision
      r5.w = r5.w - const_8.z;
      r4.xyz = (r0.w * r2) + r4;			// partial precision
    endif
    r7.w = r5.w - r5.w;
    r13.xyz = r7.w - HairTint6;
    r2.xyz = (r13.x == 0.0 ? LightData[09] : r6.y)
    r2.xyz = (r13.y == 0.0 ? LightData[10] : r2)
    r2.xyz = (r13.z == 0.0 ? LightData[11] : r2)
    r14.xyz = r2 - input_5;
    r2.x = (r12.x * r14.x) + (r12.y * r14.y) + (r12.z * r14.z);
    r2.y = (r11.x * r14.x) + (r11.y * r14.y) + (r11.z * r14.z);
    r2.z = (r10.x * r14.x) + (r10.y * r14.y) + (r10.z * r14.z);
    r7.xyz = norm(r2);			// partial precision
    r3.xyz = r9 - r7;			// partial precision
    r2.xyz = norm(r3);			// partial precision
    r15.y = (r8.x * r2.x) + (r8.y * r2.y) + (r8.z * r2.z);			// partial precision
    r3.x = (r0.x * r7.x) + (r0.y * r7.y) + (r0.z * r7.z);			// partial precision
    r3.y = (r0.x * r2.x) + (r0.y * r2.y) + (r0.z * r2.z);			// partial precision
    r3 = AnisoMap[r3];			// partial precision
    r15.x = (r8.x * r7.x) + (r8.y * r7.y) + (r8.z * r7.z);			// partial precision
    r2 = AnisoMap[r15];			// partial precision
    if_lt HairTint9.w, r4.w
      r2.z = (r14.x * r14.x) + (r14.y * r14.y) + (r14.z * r14.z);
      r2.y = (r13.x == 0.0 ? LightData[09].w : r6.y)			// partial precision
      r0.w = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);			// partial precision
      r2.y = (r13.y == 0.0 ? LightData[10].w : r2.y)			// partial precision
      r2.y = (r13.z == 0.0 ? LightData[11].w : r2.y)			// partial precision
      r2.z = 1.0 / sqrt(r2.z);
      r2.z = 1.0 / r2.z;
      r2.y = 1.0 / r2.y;			// partial precision
      r2.z = sat(r2.z * r2.y);
      r6.w = r3.w * const_4.z;			// partial precision
      r3.w = (r2.z * -r2.z) - const_8.z;			// partial precision
      r2.xyz = r7.w - HairTint6;
      r13.xyz = (r2.x == 0.0 ? LightData[08] : r6.y)			// partial precision
      r3.xyz = r6.x - HairTint;			// partial precision
      r13.xyz = (r2.y == 0.0 ? LightData[09] : r13)			// partial precision
      r3.xyz = (input_1.y * r3) - const_8.w;			// partial precision
      r2.xyz = (r2.z == 0.0 ? LightData[10] : r13)			// partial precision
      r13.xyz = (HairTint9.x * r3) + HairTint9.y;			// partial precision
      r3.xyz = r3.w * r2;			// partial precision
      r13.xyz = (r2.w * r13) + r6.w;			// partial precision
      r3.xyz = r3 * r13;			// partial precision
      r2.w = (r7.z >= const_8.y ? r7.z : const_8.y);			// partial precision
      r1.xyz = (r2.w * r3) + r1;			// partial precision
      r2.w = r0.w * r3.w;			// partial precision
      r0.w = (r2.w >= const_8.y ? r2.w : const_8.y);			// partial precision
      r5.w = r5.w - const_8.z;
      r4.xyz = (r0.w * r2) + r4;			// partial precision
    endif
    r7.w = r5.w - r5.w;
    r13.xyz = r7.w - MatAlpha2;
    r2.xyz = (r13.x == 0.0 ? LightData[11] : r6.y)
    r2.xyz = (r13.y == 0.0 ? LightData[12] : r2)
    r2.xyz = (r13.z == 0.0 ? LightData[13] : r2)
    r14.xyz = r2 - input_5;
    r2.x = (r12.x * r14.x) + (r12.y * r14.y) + (r12.z * r14.z);
    r2.y = (r11.x * r14.x) + (r11.y * r14.y) + (r11.z * r14.z);
    r2.z = (r10.x * r14.x) + (r10.y * r14.y) + (r10.z * r14.z);
    r7.xyz = norm(r2);			// partial precision
    r3.xyz = r9 - r7;			// partial precision
    r2.xyz = norm(r3);			// partial precision
    r15.y = (r8.x * r2.x) + (r8.y * r2.y) + (r8.z * r2.z);			// partial precision
    r3.x = (r0.x * r7.x) + (r0.y * r7.y) + (r0.z * r7.z);			// partial precision
    r3.y = (r0.x * r2.x) + (r0.y * r2.y) + (r0.z * r2.z);			// partial precision
    r3 = AnisoMap[r3];			// partial precision
    r15.x = (r8.x * r7.x) + (r8.y * r7.y) + (r8.z * r7.z);			// partial precision
    r2 = AnisoMap[r15];			// partial precision
    if_lt const_7.w, r4.w
      r2.z = (r14.x * r14.x) + (r14.y * r14.y) + (r14.z * r14.z);
      r2.y = (r13.x == 0.0 ? LightData[11].w : r6.y)			// partial precision
      r0.w = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);			// partial precision
      r2.y = (r13.y == 0.0 ? LightData[12].w : r2.y)			// partial precision
      r2.y = (r13.z == 0.0 ? LightData[13].w : r2.y)			// partial precision
      r2.z = 1.0 / sqrt(r2.z);
      r2.z = 1.0 / r2.z;
      r2.y = 1.0 / r2.y;			// partial precision
      r2.z = sat(r2.z * r2.y);
      r6.w = r3.w * const_4.z;			// partial precision
      r3.w = (r2.z * -r2.z) - const_8.z;			// partial precision
      r2.xyz = r7.w - MatAlpha2;
      r13.xyz = (r2.x == 0.0 ? LightData[10] : r6.y)			// partial precision
      r3.xyz = r6.x - HairTint;			// partial precision
      r13.xyz = (r2.y == 0.0 ? LightData[11] : r13)			// partial precision
      r3.xyz = (input_1.y * r3) - const_8.w;			// partial precision
      r2.xyz = (r2.z == 0.0 ? LightData[12] : r13)			// partial precision
      r13.xyz = (HairTint9.x * r3) + HairTint9.y;			// partial precision
      r3.xyz = r3.w * r2;			// partial precision
      r13.xyz = (r2.w * r13) + r6.w;			// partial precision
      r3.xyz = r3 * r13;			// partial precision
      r2.w = (r7.z >= const_8.y ? r7.z : const_8.y);			// partial precision
      r1.xyz = (r2.w * r3) + r1;			// partial precision
      r2.w = r0.w * r3.w;			// partial precision
      r0.w = (r2.w >= const_8.y ? r2.w : const_8.y);			// partial precision
      r5.w = r5.w - const_8.z;
      r4.xyz = (r0.w * r2) + r4;			// partial precision
    endif
    r7.w = r5.w - r5.w;
    r13.xyz = r7.w - HairTint8;
    r2.xyz = (r13.x == 0.0 ? LightData[13] : r6.y)
    r2.xyz = (r13.y == 0.0 ? LightData[14] : r2)
    r2.xyz = (r13.z == 0.0 ? LightData[15] : r2)
    r14.xyz = r2 - input_5;
    r2.x = (r12.x * r14.x) + (r12.y * r14.y) + (r12.z * r14.z);
    r2.y = (r11.x * r14.x) + (r11.y * r14.y) + (r11.z * r14.z);
    r2.z = (r10.x * r14.x) + (r10.y * r14.y) + (r10.z * r14.z);
    r7.xyz = norm(r2);			// partial precision
    r3.xyz = r9 - r7;			// partial precision
    r2.xyz = norm(r3);			// partial precision
    r15.y = (r8.x * r2.x) + (r8.y * r2.y) + (r8.z * r2.z);			// partial precision
    r3.x = (r0.x * r7.x) + (r0.y * r7.y) + (r0.z * r7.z);			// partial precision
    r3.y = (r0.x * r2.x) + (r0.y * r2.y) + (r0.z * r2.z);			// partial precision
    r3 = AnisoMap[r3];			// partial precision
    r15.x = (r8.x * r7.x) + (r8.y * r7.y) + (r8.z * r7.z);			// partial precision
    r2 = AnisoMap[r15];			// partial precision
    if_lt MatAlpha1.w, r4.w
      r2.z = (r14.x * r14.x) + (r14.y * r14.y) + (r14.z * r14.z);
      r2.y = (r13.x == 0.0 ? LightData[13].w : r6.y)			// partial precision
      r0.w = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);			// partial precision
      r2.y = (r13.y == 0.0 ? LightData[14].w : r2.y)			// partial precision
      r2.y = (r13.z == 0.0 ? LightData[15].w : r2.y)			// partial precision
      r2.z = 1.0 / sqrt(r2.z);
      r2.z = 1.0 / r2.z;
      r2.y = 1.0 / r2.y;			// partial precision
      r2.z = sat(r2.z * r2.y);
      r6.w = r3.w * const_4.z;			// partial precision
      r3.w = (r2.z * -r2.z) - const_8.z;			// partial precision
      r2.xyz = r7.w - HairTint8;
      r13.xyz = (r2.x == 0.0 ? LightData[12] : r6.y)			// partial precision
      r3.xyz = r6.x - HairTint;			// partial precision
      r13.xyz = (r2.y == 0.0 ? LightData[13] : r13)			// partial precision
      r3.xyz = (input_1.y * r3) - const_8.w;			// partial precision
      r2.xyz = (r2.z == 0.0 ? LightData[14] : r13)			// partial precision
      r13.xyz = (HairTint9.x * r3) + HairTint9.y;			// partial precision
      r3.xyz = r3.w * r2;			// partial precision
      r13.xyz = (r2.w * r13) + r6.w;			// partial precision
      r3.xyz = r3 * r13;			// partial precision
      r2.w = (r7.z >= const_8.y ? r7.z : const_8.y);			// partial precision
      r1.xyz = (r2.w * r3) + r1;			// partial precision
      r2.w = r0.w * r3.w;			// partial precision
      r0.w = (r2.w >= const_8.y ? r2.w : const_8.y);			// partial precision
      r5.w = r5.w - const_8.z;
      r4.xyz = (r0.w * r2) + r4;			// partial precision
    endif
    r7.xyz = LightData[15] - input_5;
    r2.x = (r12.x * r7.x) + (r12.y * r7.y) + (r12.z * r7.z);
    r2.y = (r11.x * r7.x) + (r11.y * r7.y) + (r11.z * r7.z);
    r2.z = (r10.x * r7.x) + (r10.y * r7.y) + (r10.z * r7.z);
    r3.xyz = norm(r2);			// partial precision
    r9.xyz = r9 - r3;			// partial precision
    r2.xyz = norm(r9);			// partial precision
    r9.y = (r8.x * r2.x) + (r8.y * r2.y) + (r8.z * r2.z);			// partial precision
    r2.y = (r0.x * r2.x) + (r0.y * r2.y) + (r0.z * r2.z);			// partial precision
    r2.x = (r0.x * r3.x) + (r0.y * r3.y) + (r0.z * r3.z);			// partial precision
    r2 = AnisoMap[r2];			// partial precision
    r9.x = (r8.x * r3.x) + (r8.y * r3.y) + (r8.z * r3.z);			// partial precision
    r0 = AnisoMap[r9];			// partial precision
    if_lt HairTint5.w, r4.w
      r0.z = (r7.x * r7.x) + (r7.y * r7.y) + (r7.z * r7.z);
      r0.z = 1.0 / sqrt(r0.z);
      r0.z = 1.0 / r0.z;
      r0.y = 1.0 / LightData[15].w;
      r3.w = (r5.x * r3.x) + (r5.y * r3.y) + (r5.z * r3.z);			// partial precision
      r0.z = sat(r0.z * r0.y);
      r4.w = (r0.z * -r0.z) - const_8.z;			// partial precision
      r2.w = r2.w * const_4.z;			// partial precision
      r3.xy = (HairTint7.x * r5.w) - HairTint7.yzzw;
      r2.xyz = r6.x - HairTint;			// partial precision
      r0.xyz = (r3.x == 0.0 ? LightData[14] : r6.y)			// partial precision
      r2.xyz = (input_1.y * r2) - const_8.w;			// partial precision
      r0.xyz = (r3.y == 0.0 ? LightData[15] : r0)			// partial precision
      r5.xyz = (HairTint9.x * r2) + HairTint9.y;			// partial precision
      r2.xyz = r4.w * r0;			// partial precision
      r5.xyz = (r0.w * r5) + r2.w;			// partial precision
      r2.xyz = r2 * r5;			// partial precision
      r3.w = r3.w * r4.w;			// partial precision
      r2.w = (r3.z >= const_8.y ? r3.z : const_8.y);			// partial precision
      r0.w = (r3.w >= const_8.y ? r3.w : const_8.y);			// partial precision
      r1.xyz = (r2.w * r2) + r1;			// partial precision
      r4.xyz = (r0.w * r0) + r4;			// partial precision
    endif
    r0.xyz = r6.x - HairTint;			// partial precision
    r0.xyz = (input_1.y * r0) - const_8.w;			// partial precision
    r3.xyz = r1 * input_1.y;			// partial precision
    r5.xyz = r0 - r0;			// partial precision
    r0 = BaseMap[input_0];			// partial precision
    r2 = LayerMap[input_0];			// partial precision
    r1.xyz = r2.w * (r2 - r0) + r0;			// partial precision
    r0.y = r6.z - ToggleADTS.x;			// partial precision
    r1.xyz = r5 * r1;			// partial precision
    r0.z = ToggleADTS.x;			// partial precision
    r0.xyz = (r0.z * AmbientColor) + r0.y;			// partial precision
    r0.xyz = r4 - r0;			// partial precision
    r2.xyz = r1.w * r3;			// partial precision
    r1.xyz = (r1 * r0) + r2;			// partial precision
    r0.xyz = input_6 - r1;			// partial precision
    rendertarget_0.xyz = (input_6.w * r0) - r1;			// partial precision
    rendertarget_0.w = r0.w * MatAlpha.x;			// partial precision

// approximately 495 instruction slots used (21 texture, 474 arithmetic)
