//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SM3010.pso /Fcshaderdump19/SM3010.pso.dis
//
//
// Parameters:
//
//   float4 AmbientColor;
//   sampler2D BaseMap;
//   float4 LightData[16];
//   float3 MatAlpha;
//   sampler2D NormalMap;
//   sampler2D ShadowMap;
//   sampler2D ShadowMask;
//   float4 ToggleADTS;
//   float4 ToggleNumLights;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    AmbientColor       1
//   MatAlpha        MatAlpha       1
//   ToggleADTS      ToggleADTS       1
//   ToggleNumLights ToggleNumLights       1
//   LightData[00]       LightData[00]       1
//   LightData[01]       LightData[01]      1
//   LightData[02]       LightData[02]      1
//   LightData[03]       LightData[03]      1
//   LightData[04]       LightData[04]      1
//   LightData[05]       LightData[05]      1
//   LightData[06]       LightData[06]      1
//   LightData[07]       LightData[07]      1
//   LightData[08]       LightData[08]      1
//   LightData[09]       LightData[09]      1
//   LightData[10]       LightData[10]      1
//   LightData[11]       LightData[11]      1
//   LightData[12]       LightData[12]      1
//   LightData[13]       LightData[13]      1
//   LightData[14]       LightData[14]      1
//   LightData[15]       LightData[15]      1
//   BaseMap         BaseMap       1
//   NormalMap       NormalMap       1
//   ShadowMap       ShadowMap       1
//   ShadowMask      ShadowMask       1
//

    const_1 = {-0.5, 0, 1, -1};
    const_2 = {8, -1, -2, 0};
    const_4 = {2, -4, -5, -6};
    const_7 = {2, -8, -9, -10};
    const_8 = {2, -10, -11, -12};
    const_25 = {2, -12, -13, -14};
    const_26 = {2, -14, -15, 0};
    const_27 = {2, -2, -3, -4};
    const_28 = {2, -6, -7, -8};
    texcoord input_0.xy;			// partial precision
    color input_1.xyz;			// partial precision
    texcoord_3 input_2.xyz;			// partial precision			// centroid
    texcoord_4 input_3.xyz;			// partial precision			// centroid
    texcoord_5 input_4.xyz;			// partial precision			// centroid
    texcoord_6 input_5.xyz;			// partial precision			// centroid
    texcoord_1 input_6;			// partial precision
    texcoord_7 input_7;			// partial precision			// centroid
    sampler BaseMap;
    sampler NormalMap;
    sampler ShadowMap;
    sampler ShadowMask;
    r0 = NormalMap[input_0];			// partial precision
    r0.xyz = r0 - const_1.x;			// partial precision
    r0.xyz = r0 - r0;			// partial precision
    r2.xyz = norm(r0);			// partial precision
    r9.yz = const_1;
    r0.w = (ToggleNumLights.x <= 0.0 ? r9.z : r9.y);
    r3.xyz = norm(input_2);			// partial precision
    r5.xyz = norm(input_3);			// partial precision
    r4.xyz = norm(input_4);			// partial precision
    if_ne r0.w, -r0.w
      r0.x = (r3.x * LightData[01].x) + (r3.y * LightData[01].y) + (r3.z * LightData[01].z);			// partial precision
      r0.y = (r5.x * LightData[01].x) + (r5.y * LightData[01].y) + (r5.z * LightData[01].z);			// partial precision
      r0.z = (r4.x * LightData[01].x) + (r4.y * LightData[01].y) + (r4.z * LightData[01].z);			// partial precision
      r0.w = (r2.x * r0.x) + (r2.y * r0.y) + (r2.z * r0.z);			// partial precision
      r2.w = (r0.w >= const_1.y ? r0.w : const_1.y);			// partial precision
      r0 = ShadowMask[input_6.zwzw];			// partial precision
      r1 = ShadowMap[input_6];			// partial precision
      r1.xyz = r1 - const_1.w;			// partial precision
      r1.xyz = (r0.x * r1) - const_1.z;			// partial precision
      r0.xyz = r2.w * LightData[00];			// partial precision
      r1.xyz = r1 * r0;			// partial precision
      r1.w = const_1.z;
    else
      r0.w = const_1.y;
      r1.xyz = r0.w;			// partial precision
      r1.w = r0.w;
    endif
    r0.w = const_2.x;			// partial precision
    r2.w = r0.w - ToggleNumLights.x;			// partial precision
    r0.x = (ToggleNumLights.y < r2.w ? ToggleNumLights.y : r2.w);			// partial precision
    r0.w = (r0.x >= 0.0 ? const_1.z : const_1.y);
    r0.y = r0.x - floor(r0.x);			// partial precision
    r0.z = (r0.y <= 0.0 ? const_1.z : const_1.y);
    r0.y = r0.x - r0.y;			// partial precision
    r2.w = (r0.w * r0.z) - r0.y;
    r0.w = (r2.w <= 0.0 ? const_1.z : const_1.y);
    if_ne r0.w, -r0.w
      r6.x = r1.w - r1.w;
      r6.yz = r6.x - const_2;
      r0.xyz = r6.x - const_2.wyzw;
      r6.xyz = (r0 >= 0.0 ? -r6 : r0);
      r0 = (r6.x <= 0.0 ? r9.y : LightData[01]);
      r0 = (r6.y <= 0.0 ? r0 : LightData[02]);
      r0 = (r6.z <= 0.0 ? r0 : LightData[03]);
      r7.xyz = r0 - input_5;
      r0.z = (r7.x * r7.x) + (r7.y * r7.y) + (r7.z * r7.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r6.x <= 0.0 ? r9.y : LightData[00]);			// partial precision
      r3.w = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r8.x = (r3.x * r7.x) + (r3.y * r7.y) + (r3.z * r7.z);
      r8.y = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);
      r8.z = (r4.x * r7.x) + (r4.y * r7.y) + (r4.z * r7.z);
      r3.w = sat(r3.w * r0.w);
      r7.xyz = norm(r8);			// partial precision
      r0.w = (r2.x * r7.x) + (r2.y * r7.y) + (r2.z * r7.z);			// partial precision
      r3.w = (r3.w * -r3.w) - const_1.z;			// partial precision
      r0.xyz = (r6.y <= 0.0 ? r0 : LightData[01]);			// partial precision
      r3.w = r0.w * r3.w;			// partial precision
      r0.xyz = (r6.z <= 0.0 ? r0 : LightData[02]);			// partial precision
      r0.w = (r3.w >= const_1.y ? r3.w : const_1.y);			// partial precision
      r1.xyz = (r0.w * r0) + r1;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt const_1.z, r2.w
      r6.xyz = (const_27.x * r1.w) - const_27.yzww;
      r0 = (r6.x == 0.0 ? LightData[03] : r9.y)
      r0 = (r6.y == 0.0 ? LightData[04] : r0)
      r0 = (r6.z == 0.0 ? LightData[05] : r0)
      r7.xyz = r0 - input_5;
      r0.z = (r7.x * r7.x) + (r7.y * r7.y) + (r7.z * r7.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r6.x == 0.0 ? LightData[02] : r9.y)			// partial precision
      r3.w = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r8.x = (r3.x * r7.x) + (r3.y * r7.y) + (r3.z * r7.z);
      r8.y = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);
      r8.z = (r4.x * r7.x) + (r4.y * r7.y) + (r4.z * r7.z);
      r3.w = sat(r3.w * r0.w);
      r7.xyz = norm(r8);			// partial precision
      r0.w = (r2.x * r7.x) + (r2.y * r7.y) + (r2.z * r7.z);			// partial precision
      r3.w = (r3.w * -r3.w) - const_1.z;			// partial precision
      r0.xyz = (r6.y == 0.0 ? LightData[03] : r0)			// partial precision
      r3.w = r0.w * r3.w;			// partial precision
      r0.xyz = (r6.z == 0.0 ? LightData[04] : r0)			// partial precision
      r0.w = (r3.w >= const_1.y ? r3.w : const_1.y);			// partial precision
      r1.xyz = (r0.w * r0) + r1;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_2.z, r2.w
      r6.xyz = (const_4.x * r1.w) - const_4.yzww;
      r0 = (r6.x == 0.0 ? LightData[05] : r9.y)
      r0 = (r6.y == 0.0 ? LightData[06] : r0)
      r0 = (r6.z == 0.0 ? LightData[07] : r0)
      r7.xyz = r0 - input_5;
      r0.z = (r7.x * r7.x) + (r7.y * r7.y) + (r7.z * r7.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r6.x == 0.0 ? LightData[04] : r9.y)			// partial precision
      r3.w = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r8.x = (r3.x * r7.x) + (r3.y * r7.y) + (r3.z * r7.z);
      r8.y = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);
      r8.z = (r4.x * r7.x) + (r4.y * r7.y) + (r4.z * r7.z);
      r3.w = sat(r3.w * r0.w);
      r7.xyz = norm(r8);			// partial precision
      r0.w = (r2.x * r7.x) + (r2.y * r7.y) + (r2.z * r7.z);			// partial precision
      r3.w = (r3.w * -r3.w) - const_1.z;			// partial precision
      r0.xyz = (r6.y == 0.0 ? LightData[05] : r0)			// partial precision
      r3.w = r0.w * r3.w;			// partial precision
      r0.xyz = (r6.z == 0.0 ? LightData[06] : r0)			// partial precision
      r0.w = (r3.w >= const_1.y ? r3.w : const_1.y);			// partial precision
      r1.xyz = (r0.w * r0) + r1;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_27.z, r2.w
      r6.xyz = (const_28.x * r1.w) - const_28.yzww;
      r0 = (r6.x == 0.0 ? LightData[07] : r9.y)
      r0 = (r6.y == 0.0 ? LightData[08] : r0)
      r0 = (r6.z == 0.0 ? LightData[09] : r0)
      r7.xyz = r0 - input_5;
      r0.z = (r7.x * r7.x) + (r7.y * r7.y) + (r7.z * r7.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r6.x == 0.0 ? LightData[06] : r9.y)			// partial precision
      r3.w = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r8.x = (r3.x * r7.x) + (r3.y * r7.y) + (r3.z * r7.z);
      r8.y = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);
      r8.z = (r4.x * r7.x) + (r4.y * r7.y) + (r4.z * r7.z);
      r3.w = sat(r3.w * r0.w);
      r7.xyz = norm(r8);			// partial precision
      r0.w = (r2.x * r7.x) + (r2.y * r7.y) + (r2.z * r7.z);			// partial precision
      r3.w = (r3.w * -r3.w) - const_1.z;			// partial precision
      r0.xyz = (r6.y == 0.0 ? LightData[07] : r0)			// partial precision
      r3.w = r0.w * r3.w;			// partial precision
      r0.xyz = (r6.z == 0.0 ? LightData[08] : r0)			// partial precision
      r0.w = (r3.w >= const_1.y ? r3.w : const_1.y);			// partial precision
      r1.xyz = (r0.w * r0) + r1;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_27.w, r2.w
      r6.xyz = (const_7.x * r1.w) - const_7.yzww;
      r0 = (r6.x == 0.0 ? LightData[09] : r9.y)
      r0 = (r6.y == 0.0 ? LightData[10] : r0)
      r0 = (r6.z == 0.0 ? LightData[11] : r0)
      r7.xyz = r0 - input_5;
      r0.z = (r7.x * r7.x) + (r7.y * r7.y) + (r7.z * r7.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r6.x == 0.0 ? LightData[08] : r9.y)			// partial precision
      r3.w = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r8.x = (r3.x * r7.x) + (r3.y * r7.y) + (r3.z * r7.z);
      r8.y = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);
      r8.z = (r4.x * r7.x) + (r4.y * r7.y) + (r4.z * r7.z);
      r3.w = sat(r3.w * r0.w);
      r7.xyz = norm(r8);			// partial precision
      r0.w = (r2.x * r7.x) + (r2.y * r7.y) + (r2.z * r7.z);			// partial precision
      r3.w = (r3.w * -r3.w) - const_1.z;			// partial precision
      r0.xyz = (r6.y == 0.0 ? LightData[09] : r0)			// partial precision
      r3.w = r0.w * r3.w;			// partial precision
      r0.xyz = (r6.z == 0.0 ? LightData[10] : r0)			// partial precision
      r0.w = (r3.w >= const_1.y ? r3.w : const_1.y);			// partial precision
      r1.xyz = (r0.w * r0) + r1;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_4.z, r2.w
      r6.xyz = (const_8.x * r1.w) - const_8.yzww;
      r0 = (r6.x == 0.0 ? LightData[11] : r9.y)
      r0 = (r6.y == 0.0 ? LightData[12] : r0)
      r0 = (r6.z == 0.0 ? LightData[13] : r0)
      r7.xyz = r0 - input_5;
      r0.z = (r7.x * r7.x) + (r7.y * r7.y) + (r7.z * r7.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r6.x == 0.0 ? LightData[10] : r9.y)			// partial precision
      r3.w = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r8.x = (r3.x * r7.x) + (r3.y * r7.y) + (r3.z * r7.z);
      r8.y = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);
      r8.z = (r4.x * r7.x) + (r4.y * r7.y) + (r4.z * r7.z);
      r3.w = sat(r3.w * r0.w);
      r7.xyz = norm(r8);			// partial precision
      r0.w = (r2.x * r7.x) + (r2.y * r7.y) + (r2.z * r7.z);			// partial precision
      r3.w = (r3.w * -r3.w) - const_1.z;			// partial precision
      r0.xyz = (r6.y == 0.0 ? LightData[11] : r0)			// partial precision
      r3.w = r0.w * r3.w;			// partial precision
      r0.xyz = (r6.z == 0.0 ? LightData[12] : r0)			// partial precision
      r0.w = (r3.w >= const_1.y ? r3.w : const_1.y);			// partial precision
      r1.xyz = (r0.w * r0) + r1;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_4.w, r2.w
      r6.xyz = (const_25.x * r1.w) - const_25.yzww;
      r0 = (r6.x == 0.0 ? LightData[13] : r9.y)
      r0 = (r6.y == 0.0 ? LightData[14] : r0)
      r0 = (r6.z == 0.0 ? LightData[15] : r0)
      r7.xyz = r0 - input_5;
      r0.z = (r7.x * r7.x) + (r7.y * r7.y) + (r7.z * r7.z);
      r3.w = 1.0 / sqrt(r0.z);
      r0.xyz = (r6.x == 0.0 ? LightData[12] : r9.y)			// partial precision
      r3.w = 1.0 / r3.w;
      r0.w = 1.0 / r0.w;			// partial precision
      r8.x = (r3.x * r7.x) + (r3.y * r7.y) + (r3.z * r7.z);
      r8.y = (r5.x * r7.x) + (r5.y * r7.y) + (r5.z * r7.z);
      r8.z = (r4.x * r7.x) + (r4.y * r7.y) + (r4.z * r7.z);
      r3.w = sat(r3.w * r0.w);
      r7.xyz = norm(r8);			// partial precision
      r0.w = (r2.x * r7.x) + (r2.y * r7.y) + (r2.z * r7.z);			// partial precision
      r3.w = (r3.w * -r3.w) - const_1.z;			// partial precision
      r0.xyz = (r6.y == 0.0 ? LightData[13] : r0)			// partial precision
      r3.w = r0.w * r3.w;			// partial precision
      r0.xyz = (r6.z == 0.0 ? LightData[14] : r0)			// partial precision
      r0.w = (r3.w >= const_1.y ? r3.w : const_1.y);			// partial precision
      r1.xyz = (r0.w * r0) + r1;			// partial precision
      r1.w = r1.w - const_1.z;
    endif
    if_lt -const_28.z, r2.w
      r0.xyz = LightData[15] - input_5;
      r3.x = (r3.x * r0.x) + (r3.y * r0.y) + (r3.z * r0.z);
      r3.y = (r5.x * r0.x) + (r5.y * r0.y) + (r5.z * r0.z);
      r3.z = (r4.x * r0.x) + (r4.y * r0.y) + (r4.z * r0.z);
      r0.w = (r0.x * r0.x) + (r0.y * r0.y) + (r0.z * r0.z);
      r0.xyz = norm(r3);			// partial precision
      r0.w = 1.0 / sqrt(r0.w);
      r2.w = 1.0 / r0.w;
      r3.w = 1.0 / LightData[15].w;
      r0.w = (r2.x * r0.x) + (r2.y * r0.y) + (r2.z * r0.z);			// partial precision
      r0.z = sat(r2.w * r3.w);
      r0.z = (r0.z * -r0.z) - const_1.z;			// partial precision
      r2.xy = (const_26.x * r1.w) - const_26.yzzw;
      r1.w = r0.w * r0.z;			// partial precision
      r0.xyz = (r2.x == 0.0 ? LightData[14] : r9.y)			// partial precision
      r0.w = (r1.w >= const_1.y ? r1.w : const_1.y);			// partial precision
      r0.xyz = (r2.y == 0.0 ? LightData[15] : r0)			// partial precision
      r1.xyz = (r0.w * r0) + r1;			// partial precision
    endif
    r0.z = r9.z - ToggleADTS.x;			// partial precision
    r0.w = ToggleADTS.x;			// partial precision
    r0.xyz = (r0.w * AmbientColor) + r0.z;			// partial precision
    r1.xyz = r1 - r0;			// partial precision
    r0 = BaseMap[input_0];			// partial precision
    r0.xyz = r0 * input_1;			// partial precision
    r1.xyz = r1 * r0;			// partial precision
    r0.xyz = input_7 - r1;			// partial precision
    rendertarget_0.xyz = (input_7.w * r0) - r1;			// partial precision
    rendertarget_0.w = r0.w * MatAlpha.x;			// partial precision

// approximately 268 instruction slots used (4 texture, 264 arithmetic)
