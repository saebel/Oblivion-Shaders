//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/BOLT.vso /Fcshaderdump19/BOLT.vso.dis
//
//
// Parameters:
//
//   row_major float4x4 ModelViewProj;
//   float4 SegmentData[2];
//   float4 fVars0;
//   float4 fVars1;
//   float4 fVars2;
//
//
// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   ModelViewProj[0] const_0        1
//   ModelViewProj[1] const_1        1
//   ModelViewProj[2] const_2        1
//   ModelViewProj[3] const_3        1
//   fVars0        const_4       1
//   fVars1        const_5       1
//   fVars2        const_6       1
//   SegmentData[0]   const_14       1
//   SegmentData[1]   const_15       1
//

    const int4 const_7 = {-1, 1, 0, -2};
    float4 IN.position : POSITION;
    float4 IN.color_1 : COLOR1;
    r0.w = (IN.color_1.r >= fVars0.y ? 1.0 : 0.0);
    r2.w = (r0.w * -fVars0.y) + IN.color_1.r;
    r1.w = r2.w + const_7.x;
    r3.xyz = const_7;
    offset.x = r2.w;
    r0 = (SegmentData[0 + offset.x].xyzx * r3.yyyz) + r3.zzzy;
    offset.x = r1.w;
    r1 = (SegmentData[0 + offset.x].xyzx * r3.yyyz) + r3.zzzy;
    offset.x = r2.w;
    r2 = (SegmentData[1 + offset.x].xyzx * r3.yyyz) + r3.zzzy;
    r5.x = dot(ModelViewProj[0], r1);
    r4.x = dot(ModelViewProj[0], r0);
    r4.y = dot(ModelViewProj[1], r0);
    r6.x = dot(ModelViewProj[0], r2);
    r6.y = dot(ModelViewProj[1], r2);
    r5.y = dot(ModelViewProj[1], r1);
    r2.xy = r6 - r4;
    r1.xy = r5 - r4;
    r6.xy = r2 * r2;
    r5.xy = r1 * r1;
    r2.w = r6.y + r6.x;
    r1.w = r5.y + r5.x;
    r2.w = 1.0 / sqrt(r2.w);
    r1.w = 1.0 / sqrt(r1.w);
    r2.xy = r2 * r2.w;
    r1.xy = (r1.w * r1) + r2;
    r1.z = r2.x * r1.y;
    OUT.position.z = dot(ModelViewProj[2], r0);
    r1.w = (r1.x * r2.y) - r1.z;
    OUT.position.w = dot(ModelViewProj[3], r0);
    r0.w = (r1.w < const_7.z ? 1.0 : 0.0);
    r0.xy = r1 * r0.w;
    r7.y = pow(2.0, fVars0.z);	// partial precision
    r0.w = r7.y;
    r0.xy = (const_7.w * r0) + r1;
    r4.w = fVars0.z - r0.w;
    r1.xy = r0 * r0;
    r1.w = 1.0 / r4.w;
    r0.w = r1.y + r1.x;
    r6.w = r1.w * IN.color_1.r;
    r2.w = 1.0 / sqrt(r0.w);
    r0.w = max(-r6.w, r6.w);
    r0.xy = r0 * r2.w;
    r7.y = pow(2.0, r0.w);	// partial precision
    r5.w = r7.y;
    r0.w = (r6.w >= -r6.w ? 1.0 : 0.0);
    r3.w = r5.w + r5.w;
    r7.y = pow(2.0, r6.w);	// partial precision
    r2.w = r7.y;
    r0.w = (r0.w * r3.w) - r5.w;
    r1.w = (IN.color_1.r * r1.w) - r2.w;
    r3.w = r4.w * r0.w;
    r1.w = (r1.w * fVars1.w) + fVars1.z;
    r7.y = pow(2.0, r3.w);	// partial precision
    r2.w = r7.y;
    r0.w = (r0.w * r4.w) - r2.w;
    r3.w = r3.x + fVars1.y;
    r6.w = (r0.w >= r3.w ? 1.0 : 0.0);
    r5.w = (r0.w < fVars1.x ? 1.0 : 0.0);
    r2.w = r0.w * fVars2.x;
    r6.w = (r6.w * -r5.w) + const_7.y;
    r3.w = (r2.w >= r3.w ? 1.0 : 0.0);
    r2.w = (r3.z < fVars2.x ? 1.0 : 0.0);
    r3.w = (r3.w * -r6.w) + r6.w;
    r2.w = r5.w * r2.w;
    r0.w = (r0.w >= r4.w ? 1.0 : 0.0);
    r2.w = (r2.w * -r3.w) + r3.w;
    r1.w = r1.w * IN.position.x;
    r0.w = (r0.w * -r2.w) + r2.w;
    OUT.position.xy = (r1.w * r0) + r4;
    OUT.color_0.a = r0.w * fVars2.y;
    OUT.color_0.rgb = const_7.y;
    OUT.texcoord_0.xy = IN.position;

// approximately 73 instruction slots used
