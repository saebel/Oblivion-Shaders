//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS1S016.vso /Fcshaderdump19/SLS1S016.vso.dis
//
//
// Parameters:
//
//   float4 Bones[54];
//   float3 LightDirection[3];
//   float4 LightPosition[3];
//   row_major float4x4 SkinModelViewProj;
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   SkinModelViewProj[0] const_1        1
//   SkinModelViewProj[1] const_2        1
//   SkinModelViewProj[2] const_3        1
//   SkinModelViewProj[3] const_4        1
//   LightDirection[0]    const_13       1
//   LightPosition[0]     const_16       1
//   LightPosition[1]     const_17       1
//   Bones[0]             const_42      18
//   Bones[1]             const_43      18
//   Bones[2]             const_44      18
//

    const float4 const_0 = {1, 765.01001, 0, 0.5};
    float4 IN.position : POSITION;
    float3 IN.tangent : TANGENT;
    float3 IN.binormal : BINORMAL;
    float3 IN.normal : NORMAL;
    float4 IN.texcoord_0 : TEXCOORD0;
    float3 IN.blendweight : BLENDWEIGHT;
    float4 IN.blendindices : BLENDINDICES;
    r2.x = dot(IN.blendweight, const_0.x);
    r1 = (IN.position.xyzx * const_0.xxxz) + const_0.zzzx;
    r0 = IN.blendindices.zyxw * const_0.y;
    r2.w = const_0.x - r2.x;
    offset.x = r0.y;
    r2.x = dot(Bones[0 + offset.x], r1);
    r2.y = dot(Bones[1 + offset.x], r1);
    r2.z = dot(Bones[2 + offset.x], r1);
    r3.xyz = r2 * IN.blendweight.y;
    offset.x = r0.x;
    r2.x = dot(Bones[0 + offset.x], r1);
    r2.y = dot(Bones[1 + offset.x], r1);
    r2.z = dot(Bones[2 + offset.x], r1);
    r3.xyz = (IN.blendweight.x * r2) + r3;
    offset.x = r0.z;
    r2.x = dot(Bones[0 + offset.x], r1);
    r2.y = dot(Bones[1 + offset.x], r1);
    r2.z = dot(Bones[2 + offset.x], r1);
    r3.xyz = (IN.blendweight.z * r2) + r3;
    offset.x = r0.w;
    r2.x = dot(Bones[0 + offset.x], r1);
    r2.y = dot(Bones[1 + offset.x], r1);
    r2.z = dot(Bones[2 + offset.x], r1);
    r1.w = const_0.x;
    r1.xyz = (r2.w * r2) + r3;
    OUT.position.x = dot(SkinModelViewProj[0], r1);
    OUT.position.y = dot(SkinModelViewProj[1], r1);
    OUT.position.z = dot(SkinModelViewProj[2], r1);
    offset.x = r0.y;
    r2.x = dot(Bones[0 + offset.x], IN.tangent);
    r2.y = dot(Bones[1 + offset.x], IN.tangent);
    r2.z = dot(Bones[2 + offset.x], IN.tangent);
    r3.xyz = r2 * IN.blendweight.y;
    offset.x = r0.x;
    r2.x = dot(Bones[0 + offset.x], IN.tangent);
    r2.y = dot(Bones[1 + offset.x], IN.tangent);
    r2.z = dot(Bones[2 + offset.x], IN.tangent);
    r3.xyz = (IN.blendweight.x * r2) + r3;
    offset.x = r0.z;
    r2.x = dot(Bones[0 + offset.x], IN.tangent);
    r2.y = dot(Bones[1 + offset.x], IN.tangent);
    r2.z = dot(Bones[2 + offset.x], IN.tangent);
    r3.xyz = (IN.blendweight.z * r2) + r3;
    offset.x = r0.w;
    r2.x = dot(Bones[0 + offset.x], IN.tangent);
    r2.y = dot(Bones[1 + offset.x], IN.tangent);
    r2.z = dot(Bones[2 + offset.x], IN.tangent);
    OUT.position.w = dot(SkinModelViewProj[3], r1);
    r4.xyz = (r2.w * r2) + r3;
    r1.xyz = LightPosition[1] - r1;
    r2.x = dot(r4, r4);	// normalize + length
    r1.w = 1.0 / sqrt(r2.x);
    offset.x = r0.y;
    r2.x = dot(Bones[0 + offset.x], IN.binormal);
    r2.y = dot(Bones[1 + offset.x], IN.binormal);
    r2.z = dot(Bones[2 + offset.x], IN.binormal);
    r3.xyz = r2 * IN.blendweight.y;
    offset.x = r0.x;
    r2.x = dot(Bones[0 + offset.x], IN.binormal);
    r2.y = dot(Bones[1 + offset.x], IN.binormal);
    r2.z = dot(Bones[2 + offset.x], IN.binormal);
    r3.xyz = (IN.blendweight.x * r2) + r3;
    offset.x = r0.z;
    r2.x = dot(Bones[0 + offset.x], IN.binormal);
    r2.y = dot(Bones[1 + offset.x], IN.binormal);
    r2.z = dot(Bones[2 + offset.x], IN.binormal);
    r3.xyz = (IN.blendweight.z * r2) + r3;
    offset.x = r0.w;
    r2.x = dot(Bones[0 + offset.x], IN.binormal);
    r2.y = dot(Bones[1 + offset.x], IN.binormal);
    r2.z = dot(Bones[2 + offset.x], IN.binormal);
    r4.xyz = r4 * r1.w;
    r3.xyz = (r2.w * r2) + r3;
    r5.x = dot(r4, LightDirection[0]);
    r2.x = dot(r3, r3);	// normalize + length
    r1.w = 1.0 / sqrt(r2.x);
    offset.x = r0.y;
    r2.x = dot(Bones[0 + offset.x], IN.normal);
    r2.y = dot(Bones[1 + offset.x], IN.normal);
    r2.z = dot(Bones[2 + offset.x], IN.normal);
    r6.xyz = r2 * IN.blendweight.y;
    offset.x = r0.x;
    r2.x = dot(Bones[0 + offset.x], IN.normal);
    r2.y = dot(Bones[1 + offset.x], IN.normal);
    r2.z = dot(Bones[2 + offset.x], IN.normal);
    r2.xyz = (IN.blendweight.x * r2) + r6;
    offset.x = r0.z;
    r0.x = dot(Bones[0 + offset.x], IN.normal);
    r0.y = dot(Bones[1 + offset.x], IN.normal);
    r0.z = dot(Bones[2 + offset.x], IN.normal);
    r2.xyz = (IN.blendweight.z * r0) + r2;
    offset.x = r0.w;
    r0.x = dot(Bones[0 + offset.x], IN.normal);
    r0.y = dot(Bones[1 + offset.x], IN.normal);
    r0.z = dot(Bones[2 + offset.x], IN.normal);
    r3.xyz = r3 * r1.w;
    r0.xyz = (r2.w * r0) + r2;
    r5.y = dot(r3, LightDirection[0]);
    r2.x = dot(r0, r0);	// normalize + length
    r0.w = 1.0 / sqrt(r2.x);
    r2.x = dot(r1, r1);	// normalize + length
    r0.xyz = r0 * r0.w;
    r0.w = 1.0 / sqrt(r2.x);
    r5.z = dot(r0, LightDirection[0]);
    r2.xyz = r1 * r0.w;
    OUT.color_0.rgb = (const_0.w * r5) + const_0.w;
    OUT.texcoord_3.x = dot(r4, r2);
    OUT.texcoord_3.y = dot(r3, r2);
    r0.w = 1.0 / LightPosition[1].w;
    OUT.texcoord_3.z = dot(r0, r2);
    r0.xyz = r1 * r0.w;
    OUT.texcoord_1.xy = (const_0.w * r0) + const_0.w;
    OUT.texcoord_2.x = (r0.z * const_0.w) + const_0.w;
    OUT.texcoord_0.xy = IN.texcoord_0;
    OUT.texcoord_2.y = const_0.w;

// approximately 115 instruction slots used
