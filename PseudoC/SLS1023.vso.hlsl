//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS1023.vso /Fcshaderdump19/SLS1023.vso.dis
//
//
// Parameters:
//
//   float3 LightDirection[3];
//   float4 LightPosition[3];
//   row_major float4x4 ModelViewProj;
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   ModelViewProj[0]  ModelViewProj[0]       1
//   ModelViewProj[1]  ModelViewProj[1]       1
//   ModelViewProj[2]  ModelViewProj[2]       1
//   ModelViewProj[3]  ModelViewProj[3]       1
//   LightDirection LightDirection      1
//   LightPosition[0]  LightPosition[0]      1
//   LightPosition[1]  LightPosition[1]      1
//

    const_4 = {0, 1, 0, 0};
    position input_0;
    normal input_1;
    texcoord input_2;
    color input_3;
    position.x = (ModelViewProj[0].x * input_0.x) + (ModelViewProj[0].y * input_0.y) + (ModelViewProj[0].z * input_0.z) + (ModelViewProj[0].w * input_0.w);
    position.y = (ModelViewProj[1].x * input_0.x) + (ModelViewProj[1].y * input_0.y) + (ModelViewProj[1].z * input_0.z) + (ModelViewProj[1].w * input_0.w);
    position.z = (ModelViewProj[2].x * input_0.x) + (ModelViewProj[2].y * input_0.y) + (ModelViewProj[2].z * input_0.z) + (ModelViewProj[2].w * input_0.w);
    r0.xyz = LightPosition[1] - input_0;
    position.w = (ModelViewProj[3].x * input_0.x) + (ModelViewProj[3].y * input_0.y) + (ModelViewProj[3].z * input_0.z) + (ModelViewProj[3].w * input_0.w);
    r2.x = (r0.x * r0.x) + (r0.y * r0.y) + (r0.z * r0.z);
    r1.x = (LightDirection.x * input_1.x) + (LightDirection.y * input_1.y) + (LightDirection.z * input_1.z);
    r2.w = 1.0 / sqrt(r2.x);
    r3.w = 1.0 / LightPosition[1].w;
    r0.w = 1.0 / r2.w;
    r1.w = (r1.x >= const_4.x ? r1.x : const_4.x);
    r0.w = r3.w * r0.w;
    r1.w = (r1.w < const_4.y ? r1.w : const_4.y);
    r0.w = (r0.w >= const_4.x ? r0.w : const_4.x);
    r0.xyz = r0 * r2.w;
    r0.w = (r0.w < const_4.y ? r0.w : const_4.y);
    r0.w = (r0.w * -r0.w) - const_4.y;
    r0.x = (r0.x * input_1.x) + (r0.y * input_1.y) + (r0.z * input_1.z);
    color_0.xyz = r1.w * input_3;
    r0.w = r0.w * r0.x;
    color_1.xyz = r0.w * input_3;
    texcoord_0.xy = input_2;

// approximately 22 instruction slots used
