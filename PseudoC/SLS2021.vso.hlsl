//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2021.vso /Fcshaderdump19/SLS2021.vso.dis
//
//
// Parameters:
//
//   float3 LightDirection[3];
//   float4 LightPosition[3];
//   row_major float4x4 ModelViewProj;
//   row_major float4x4 ShadowProj;
//   float4 ShadowProjData;
//   float4 ShadowProjTransform;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   ModelViewProj[0]    ModelViewProj[0]       1
//   ModelViewProj[1]    ModelViewProj[1]       1
//   ModelViewProj[2]    ModelViewProj[2]       1
//   ModelViewProj[3]    ModelViewProj[3]       1
//   LightDirection[0]   LightDirection[0]      1
//   LightDirection[1]   LightDirection[1]      1
//   LightDirection[2]   LightDirection[2]      1
//   LightPosition       ModelViewProj[1]6      2
//   ShadowProj[0]       ShadowProj[0]      1
//   ShadowProj[1]       ShadowProj[1]      1
//   ShadowProj[2]       ShadowProj[2]      1
//   ShadowProj[3]       ShadowProj[3]      1
//   ShadowProjData      ShadowProjData      1
//   ShadowProjTransform ShadowProjTransform      1
//

    const_4 = {0.5, 1, 0, 0};
    position input_0;
    tangent input_1;
    binormal input_2;
    normal input_3;
    texcoord input_4;
    position.x = (ModelViewProj[0].x * input_0.x) + (ModelViewProj[0].y * input_0.y) + (ModelViewProj[0].z * input_0.z) + (ModelViewProj[0].w * input_0.w);
    position.y = (ModelViewProj[1].x * input_0.x) + (ModelViewProj[1].y * input_0.y) + (ModelViewProj[1].z * input_0.z) + (ModelViewProj[1].w * input_0.w);
    position.z = (ModelViewProj[2].x * input_0.x) + (ModelViewProj[2].y * input_0.y) + (ModelViewProj[2].z * input_0.z) + (ModelViewProj[2].w * input_0.w);
    position.w = (ModelViewProj[3].x * input_0.x) + (ModelViewProj[3].y * input_0.y) + (ModelViewProj[3].z * input_0.z) + (ModelViewProj[3].w * input_0.w);
    r2.x = (input_1.x * LightDirection[0].x) + (input_1.y * LightDirection[0].y) + (input_1.z * LightDirection[0].z);
    r2.y = (input_2.x * LightDirection[0].x) + (input_2.y * LightDirection[0].y) + (input_2.z * LightDirection[0].z);
    r2.z = (input_3.x * LightDirection[0].x) + (input_3.y * LightDirection[0].y) + (input_3.z * LightDirection[0].z);
    r1.x = (r2.x * r2.x) + (r2.y * r2.y) + (r2.z * r2.z);
    r0.xyz = ModelViewProj[1]7 - input_0;
    r0.w = 1.0 / sqrt(r1.x);
    r1.xyz = norm(r0);
    texcoord_1.xyz = r2 * r0.w;
    texcoord_2.x = (input_1.x * r1.x) + (input_1.y * r1.y) + (input_1.z * r1.z);
    texcoord_2.y = (input_2.x * r1.x) + (input_2.y * r1.y) + (input_2.z * r1.z);
    texcoord_2.z = (input_3.x * r1.x) + (input_3.y * r1.y) + (input_3.z * r1.z);
    r0.w = 1.0 / ModelViewProj[1]7.w;
    r1.w = (ShadowProj[3].x * input_0.x) + (ShadowProj[3].y * input_0.y) + (ShadowProj[3].z * input_0.z) + (ShadowProj[3].w * input_0.w);
    r0.xyz = r0 * r0.w;
    r1.y = r1.w * ShadowProjTransform.w;
    texcoord_4.xyz = (const_4.x * r0) + const_4.x;
    r0.w = 1.0 / r1.y;
    r0.x = (ShadowProj[0].x * input_0.x) + (ShadowProj[0].y * input_0.y) + (ShadowProj[0].z * input_0.z) + (ShadowProj[0].w * input_0.w);
    r0.y = (ShadowProj[1].x * input_0.x) + (ShadowProj[1].y * input_0.y) + (ShadowProj[1].z * input_0.z) + (ShadowProj[1].w * input_0.w);
    r1.xy = (r1.w * ShadowProjTransform) - r0;
    r0.xy = r0 - ShadowProjData;
    texcoord_6.xy = r0.w * r1;
    r0.w = 1.0 / ShadowProjData.w;
    texcoord_6.z = r0.x * r0.w;
    texcoord_6.w = (r0.y * -r0.w) - const_4.y;
    texcoord_0.xy = input_4;
    texcoord_4.w = const_4.x;

// approximately 33 instruction slots used
