//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   psa shaderdump19/WATER007.pso /Fcshaderdump19/WATER007.pso.dis
//
//
// Parameters:
//
//   float2 BlendRadius;
//   float4 DeepColor;
//   sampler2D DepthMap;
//   sampler2D DetailMap;
//   sampler2D DisplacementMap;
//   float4 EyePos;
//   float4 FogColor;
//   float4 FogParam;
//   float FresnelRI;
//   sampler2D NormalMap;
//   float4 ReflectionColor;
//   sampler2D ReflectionMap;
//   float2 Scroll;
//   float4 ShallowColor;
//   float4 SunColor;
//   float4 SunDir;
//   float4 VarAmounts;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   Scroll          Scroll       1
//   EyePos          EyePos       1
//   SunDir          SunDir       1
//   SunColor        SunColor       1
//   ShallowColor    ShallowColor       1
//   DeepColor       DeepColor       1
//   ReflectionColor ReflectionColor       1
//   VarAmounts      VarAmounts       1
//   FogParam        FogParam       1
//   FogColor        FogColor      1
//   FresnelRI       FresnelRI      1
//   BlendRadius     BlendRadius      1
//   ReflectionMap   ReflectionMap       1
//   NormalMap       NormalMap       1
//   DetailMap       DetailMap       1
//   DepthMap        DepthMap       1
//   DisplacementMap DisplacementMap       1
//

    const_4 = {-0.5, 0.100000001, 0.000199999995, 0.25};
    EyePos3 = {2496, 4, -0.200000003, -0.550000012};
    EyePos4 = {2.85714293, 1, 0, 0};
    EyePos5 = {2, -1, 0, -0.000122070313};
    texcoord input_0.xyz;			// centroid
    texcoord input_1.xyz;			// centroid
    texcoord input_2;			// centroid
    texcoord input_3;			// centroid
    texcoord input_4;			// centroid
    texcoord input_5;			// centroid
    texcoord input_6;
    texcoord input_7;
    sampler ReflectionMap;
    sampler NormalMap;
    sampler DetailMap;
    sampler DepthMap;
    sampler DisplacementMap;
    r0.xy = EyePos - texcoord_1;
    dp2r0.w = r0 - r0;, EyePos5.z
    r0.w = 1.0 / sqrt(r0.w);
    r4.w = 1.0 / r0.w;
    r2.w = sat((r4.w * EyePos5.w) - EyePos5.y);
    r0.xy = texcoord_6 - const_4.x;
    dp2r0.w = r0 - r0;, EyePos5.z
    r0.w = 1.0 / sqrt(r0.w);
    r3.w = 1.0 / r0.w;
    r0.w = r3.w - r3.w;
    r1.w = 1.0 / BlendRadius.x;
    r1.w = r0.w * r1.w;
    r0.w = sat((const_4.y >= r1.w ? const_4.y : r1.w));
    add r5.w, -r0.w, -EyePos5.y
    r6.w = r2.w * r2.w;
    r4.x = texcoord_7.z - Scroll.x;
    r4.y = texcoord_7.w - Scroll.y;
    r1 = NormalMap[r4];
    r0 = DisplacementMap[texcoord_6];
    r2.xyz = (EyePos5.x * r1) - EyePos5.y;
    r2.xy = r6.w * r2;
    r1.w = r5.w * BlendRadius.y;
    r1.xyz = (EyePos5.x * r0) - EyePos5.y;
    r0.w = sat(r4.w * const_4.z);
    r0.xyz = r1.w * (r1 - r2) + r2;
    r0.w = (r0.w * EyePos3.x) - EyePos3.y;
    r3.xyz = norm(r0);
    r1.xy = (r0.w * r3) - texcoord_0;
    r1.z = texcoord_0.z;
    r1.w = -EyePos5.y;
    r0.x = (texcoord_2.x * r1.x) + (texcoord_2.y * r1.y) + (texcoord_2.z * r1.z) + (texcoord_2.w * r1.w);
    r0.y = (texcoord_3.x * r1.x) + (texcoord_3.y * r1.y) + (texcoord_3.z * r1.z) + (texcoord_3.w * r1.w);
    r0.z = (texcoord_4.x * r1.x) + (texcoord_4.y * r1.y) + (texcoord_4.z * r1.z) + (texcoord_4.w * r1.w);
    r0.w = (texcoord_5.x * r1.x) + (texcoord_5.y * r1.y) + (texcoord_5.z * r1.z) + (texcoord_5.w * r1.w);
    r5.xy = EyePos5;
    r3.w = (r5.x * -r3.w) - BlendRadius.x;
    r1.xy = (const_4.y * r3) + r4;
    r6.w = r2.w * VarAmounts.w;
    r4.x = texcoord_6.z;
    r4.y = texcoord_6.w;
    texldp r2, r0, ReflectionMap			// partial precision
    r1 = DetailMap[r1];
    r0 = DepthMap[r4];
    r4.xyz = EyePos - texcoord_1;
    r5.x = (r4.x * r4.x) + (r4.y * r4.y) + (r4.z * r4.z);
    r0.w = 1.0 / sqrt(r5.x);
    r4.xyz = r4 * r0.w;
    r0.w = 1.0 / r0.w;
    r5.x = sat((r4.x * r3.x) + (r4.y * r3.y) + (r4.z * r3.z));
    add r1.w, -r5.x, -EyePos5.y
    r2.w = r1.w * r1.w;
    r2.w = r2.w * r2.w;
    r4.w = r1.w * r2.w;
    add r2.w, -r5.y, -FresnelRI.x
    r6.x = (-r4.x * r3.x) + (-r4.y * r3.y) + (-r4.z * r3.z);
    r1.w = r6.x - r6.x;
    r9.w = (r2.w * r4.w) - FresnelRI.x;
    r3.xyz = (-r1.w * r3) + -r4;
    r4.w = (VarAmounts.z >= r9.w ? VarAmounts.z : r9.w);
    r3.x = sat((r3.x * SunDir.x) + (r3.y * SunDir.y) + (r3.z * SunDir.z));
    pow r7.w, r3.x, VarAmounts.x
    r2.w = sat(SunDir.w);
    r0.w = FogParam.x - r0.w;
    r1.w = 1.0 / FogParam.y;
    r0.w = sat(r0.w * r1.w);
    add r1.w, -r0.w, -EyePos5.y
    r5.w = const_4.w - r4.w;
    add r0.w, -r0.x, -EyePos5.y
    r5.w = (r0.w * r5.w) - r4.w;
    r0.w = r0.x - EyePos5.y;
    r2.xyz = r2 - ReflectionColor;
    r4.w = (r0.w >= 0.0 ? r5.w : r4.w);
    r0.z = VarAmounts.y;
    r2.xyz = (r0.z * r2) - ReflectionColor;			// partial precision
    r0.w = r0.x - EyePos3.z;
    r3.xyz = DeepColor;
    r3.xyz = ShallowColor - r3;
    r5.w = (r0.w * -EyePos4.x) - EyePos4.y;
    r4.xyz = (r5.x * r3) - DeepColor;			// partial precision
    r8.w = r5.w * r5.w;
    r3.xyz = r9.w * (r2 - r4) + r4;
    r5.w = (r5.w * -r8.w) - EyePos5.y;
    r2.xyz = r7.w * SunColor;
    r5.w = r4.w * r5.w;
    r3.xyz = (r2.w * r2) + r3;
    r2.w = r0.x - EyePos3.w;
    r2.xyz = r6.w * (r1 - r3) + r3;
    r2.w = (r2.w >= 0.0 ? r5.w : r4.w);
    r1.xyz = FogColor - r2;
    r0.w = (r0.w >= 0.0 ? EyePos5.z : r2.w);
    r1.xyz = (r1.w * r1) - r2;
    r1.w = (r3.w >= 0.0 ? EyePos5.z : r0.w);
    r0 = (r0.x <= 0.0 ? r1 : EyePos5.z);
    rendertarget_0 = r0;

// approximately 101 instruction slots used (5 texture, 96 arithmetic)
