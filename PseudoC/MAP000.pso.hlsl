//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/MAP000.pso /Fcshaderdump19/MAP000.pso.dis
//
//
// Parameters:
//
//   float4 CameraPos;
//   sampler2D Src0;
//   sampler2D Src1;
//   sampler2D Src2;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   CameraPos    const_1       1
//   Src0         texture_0       1
//   Src1         texture_1       1
//   Src2         texture_2       1
//

    const float4 const_0 = {0.2, 0.2, 0.15, 0.1};
    const float4 const_2 = {0.5, 0.25, 0.75, 0};
    const float4 const_3 = {0.458999991, 0.231000006, 0.128999993, 0};
    const int4 const_4 = {1, -1, 2, 10};
    float2 texcoord_0 : TEXCOORD0;
    sampler2D Src0;
    sampler2D Src1;
    sampler2D Src2;
    r3.x = IN.texcoord_0.x;
    r0.xy = const_4.xy;
    r7.xy = (-r0.xy * CameraPos.xy) + IN.texcoord_0.xy;
    r3.y = r7.y;
    r6.x = IN.texcoord_0.x;
    r5.xy = IN.texcoord_0.xy - CameraPos.xy;
    r6.y = r5.y;
    r1.x = r5.x;
    r4.xy = (r0.xy * CameraPos.xy) + IN.texcoord_0.xy;
    r0.x = r4.x;
    r2.xy = IN.texcoord_0.xy + CameraPos.xy;
    r1.y = IN.texcoord_0.y;
    r0.y = IN.texcoord_0.y;
    r7.xyzw = tex2D(Src0, r7.xy);
    r3.xyzw = tex2D(Src0, r3.xy);
    r9.xyzw = tex2D(Src0, r6.xy);
    r8.xyzw = tex2D(Src0, r5.xy);
    r6.xyzw = tex2D(Src0, r4.xy);
    r4.xyzw = tex2D(Src0, r2.xy);
    r5.xyzw = tex2D(Src0, r1.xy);
    r2.xyzw = tex2D(Src0, r0.xy);
    r1.xyzw = tex2D(Src1, IN.texcoord_0.xy);
    r0.xyzw = tex2D(Src2, IN.texcoord_0.xy);
    r9.xyzw = (2 * r9.xyzw) + r8.xyzw;
    r9.x.zw = r6.xy + r9.xy;
    r9.x.zw = r9.xy - r7.xy;
    r3.xyzw = (2 * -r3.xyzw) + r9.xyzw;
    r3.x.zw = r3.xy - r4.xy;
    r3.x.zw = r3.xy * r3.xy;
    r5.xyzw = (2 * r5.xyzw) + r8.xyzw;
    r5.x.zw = r7.xy + r5.xy;
    r5.x.zw = r5.xy - r6.xy;
    r2.xyzw = (2 * -r2.xyzw) + r5.xyzw;
    r2.x.zw = r2.xy - r4.xy;
    r2.xyzw = (r2.xyzw * r2.xyzw) + r3.xyzw;
    r1.w = r2.w * 10;
    r2.x = dot(const_0.xyz, r2.xyz);
    r0.w = min(r1.w, 0.1);
    r0.w = r2.x + r0.w;
    r1.xyz = r1.xyz * 0.25;
    r1.w = min(r0.w, 0.5);
    r1.xyz = (0.75 * r0.xyz) + r1.xyz;
    r0.xyz = lerp(const_3.xyz, r1.xyz, r1.w);
    r0.w = 1;
    OUT.color_0.rgba = r0.xyzw;

// approximately 46 instruction slots used (10 texture, 36 arithmetic)
