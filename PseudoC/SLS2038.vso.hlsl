//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2038.vso /Fcshaderdump19/SLS2038.vso.dis
//
//
// Parameters:
//
//   float4 Bones[54];
//   float4 EyePosition;
//   row_major float4x4 SkinModelViewProj;
//   row_major float4x4 SkinToCubeSpace;
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   SkinModelViewProj[0] SkinModelViewProj[0]       1
//   SkinModelViewProj[1] SkinModelViewProj[1]       1
//   SkinModelViewProj[2] SkinModelViewProj[2]       1
//   SkinModelViewProj[3] SkinModelViewProj[3]       1
//   SkinToCubeSpace   const_9       3
//   EyePosition       EyePosition      1
//   Bones[0]             Bones[0]     17
//   Bones[1]             Bones[1]     17
//   Bones[2]             Bones[2]     17
//

    const_0 = {1, 765.01001, 0, 0.100000001};
    position input_0;
    texcoord input_1;
    normal input_2;
    tangent input_3;
    binormal input_4;
    color input_5;
    dcl_blendweight input_6
    dcl_blendindices input_7
    r0 = input_7.zyxw * const_0.y;
    r0 = r0 - floor(r0);
    r2.x = (input_6.x * const_0.x.x) + (input_6.y * const_0.x.y) + (input_6.z * const_0.x.z);
    r1 = (input_7.zyxw * const_0.y) - r0;
    r0 = (input_0.xyzx * const_0.xxxz) - const_0.zzzx;
    mova a0, r1
    r1.w = const_0.x - r2.x;
    r1.x = (Bones[0][a0.y].x * r0.x) + (Bones[0][a0.y].y * r0.y) + (Bones[0][a0.y].z * r0.z) + (Bones[0][a0.y].w * r0.w);
    r1.y = (Bones[1][a0.y].x * r0.x) + (Bones[1][a0.y].y * r0.y) + (Bones[1][a0.y].z * r0.z) + (Bones[1][a0.y].w * r0.w);
    r1.z = (Bones[2][a0.y].x * r0.x) + (Bones[2][a0.y].y * r0.y) + (Bones[2][a0.y].z * r0.z) + (Bones[2][a0.y].w * r0.w);
    r2.xyz = r1 * input_6.y;
    r1.x = (Bones[0][a0.x].x * r0.x) + (Bones[0][a0.x].y * r0.y) + (Bones[0][a0.x].z * r0.z) + (Bones[0][a0.x].w * r0.w);
    r1.y = (Bones[1][a0.x].x * r0.x) + (Bones[1][a0.x].y * r0.y) + (Bones[1][a0.x].z * r0.z) + (Bones[1][a0.x].w * r0.w);
    r1.z = (Bones[2][a0.x].x * r0.x) + (Bones[2][a0.x].y * r0.y) + (Bones[2][a0.x].z * r0.z) + (Bones[2][a0.x].w * r0.w);
    r2.xyz = (input_6.x * r1) + r2;
    r1.x = (Bones[0][a0.z].x * r0.x) + (Bones[0][a0.z].y * r0.y) + (Bones[0][a0.z].z * r0.z) + (Bones[0][a0.z].w * r0.w);
    r1.y = (Bones[1][a0.z].x * r0.x) + (Bones[1][a0.z].y * r0.y) + (Bones[1][a0.z].z * r0.z) + (Bones[1][a0.z].w * r0.w);
    r1.z = (Bones[2][a0.z].x * r0.x) + (Bones[2][a0.z].y * r0.y) + (Bones[2][a0.z].z * r0.z) + (Bones[2][a0.z].w * r0.w);
    r2.xyz = (input_6.z * r1) + r2;
    r1.x = (Bones[0][a0.w].x * r0.x) + (Bones[0][a0.w].y * r0.y) + (Bones[0][a0.w].z * r0.z) + (Bones[0][a0.w].w * r0.w);
    r1.y = (Bones[1][a0.w].x * r0.x) + (Bones[1][a0.w].y * r0.y) + (Bones[1][a0.w].z * r0.z) + (Bones[1][a0.w].w * r0.w);
    r1.z = (Bones[2][a0.w].x * r0.x) + (Bones[2][a0.w].y * r0.y) + (Bones[2][a0.w].z * r0.z) + (Bones[2][a0.w].w * r0.w);
    r0.xyz = (r1.w * r1) + r2;
    r0.w = const_0.x;
    position.x = (SkinModelViewProj[0].x * r0.x) + (SkinModelViewProj[0].y * r0.y) + (SkinModelViewProj[0].z * r0.z) + (SkinModelViewProj[0].w * r0.w);
    r1.x = (Bones[0][a0.y].x * input_3.x) + (Bones[0][a0.y].y * input_3.y) + (Bones[0][a0.y].z * input_3.z);
    r1.y = (Bones[1][a0.y].x * input_3.x) + (Bones[1][a0.y].y * input_3.y) + (Bones[1][a0.y].z * input_3.z);
    r1.z = (Bones[2][a0.y].x * input_3.x) + (Bones[2][a0.y].y * input_3.y) + (Bones[2][a0.y].z * input_3.z);
    r2.xyz = r1 * input_6.y;
    r1.x = (Bones[0][a0.x].x * input_3.x) + (Bones[0][a0.x].y * input_3.y) + (Bones[0][a0.x].z * input_3.z);
    r1.y = (Bones[1][a0.x].x * input_3.x) + (Bones[1][a0.x].y * input_3.y) + (Bones[1][a0.x].z * input_3.z);
    r1.z = (Bones[2][a0.x].x * input_3.x) + (Bones[2][a0.x].y * input_3.y) + (Bones[2][a0.x].z * input_3.z);
    r2.xyz = (input_6.x * r1) + r2;
    r1.x = (Bones[0][a0.z].x * input_3.x) + (Bones[0][a0.z].y * input_3.y) + (Bones[0][a0.z].z * input_3.z);
    r1.y = (Bones[1][a0.z].x * input_3.x) + (Bones[1][a0.z].y * input_3.y) + (Bones[1][a0.z].z * input_3.z);
    r1.z = (Bones[2][a0.z].x * input_3.x) + (Bones[2][a0.z].y * input_3.y) + (Bones[2][a0.z].z * input_3.z);
    r2.xyz = (input_6.z * r1) + r2;
    r1.x = (Bones[0][a0.w].x * input_3.x) + (Bones[0][a0.w].y * input_3.y) + (Bones[0][a0.w].z * input_3.z);
    r1.y = (Bones[1][a0.w].x * input_3.x) + (Bones[1][a0.w].y * input_3.y) + (Bones[1][a0.w].z * input_3.z);
    r1.z = (Bones[2][a0.w].x * input_3.x) + (Bones[2][a0.w].y * input_3.y) + (Bones[2][a0.w].z * input_3.z);
    position.y = (SkinModelViewProj[1].x * r0.x) + (SkinModelViewProj[1].y * r0.y) + (SkinModelViewProj[1].z * r0.z) + (SkinModelViewProj[1].w * r0.w);
    r2.xyz = (r1.w * r1) + r2;
    position.z = (SkinModelViewProj[2].x * r0.x) + (SkinModelViewProj[2].y * r0.y) + (SkinModelViewProj[2].z * r0.z) + (SkinModelViewProj[2].w * r0.w);
    r1.xyz = norm(r2);
    position.w = (SkinModelViewProj[3].x * r0.x) + (SkinModelViewProj[3].y * r0.y) + (SkinModelViewProj[3].z * r0.z) + (SkinModelViewProj[3].w * r0.w);
    r3.xyz = r1 * const_0.w;
    texcoord_1.x = (r3.x * const_9.x) + (r3.y * const_9.y) + (r3.z * const_9.z);
    r1.x = (Bones[0][a0.y].x * input_4.x) + (Bones[0][a0.y].y * input_4.y) + (Bones[0][a0.y].z * input_4.z);
    r1.y = (Bones[1][a0.y].x * input_4.x) + (Bones[1][a0.y].y * input_4.y) + (Bones[1][a0.y].z * input_4.z);
    r1.z = (Bones[2][a0.y].x * input_4.x) + (Bones[2][a0.y].y * input_4.y) + (Bones[2][a0.y].z * input_4.z);
    r2.xyz = r1 * input_6.y;
    r1.x = (Bones[0][a0.x].x * input_4.x) + (Bones[0][a0.x].y * input_4.y) + (Bones[0][a0.x].z * input_4.z);
    r1.y = (Bones[1][a0.x].x * input_4.x) + (Bones[1][a0.x].y * input_4.y) + (Bones[1][a0.x].z * input_4.z);
    r1.z = (Bones[2][a0.x].x * input_4.x) + (Bones[2][a0.x].y * input_4.y) + (Bones[2][a0.x].z * input_4.z);
    r2.xyz = (input_6.x * r1) + r2;
    r1.x = (Bones[0][a0.z].x * input_4.x) + (Bones[0][a0.z].y * input_4.y) + (Bones[0][a0.z].z * input_4.z);
    r1.y = (Bones[1][a0.z].x * input_4.x) + (Bones[1][a0.z].y * input_4.y) + (Bones[1][a0.z].z * input_4.z);
    r1.z = (Bones[2][a0.z].x * input_4.x) + (Bones[2][a0.z].y * input_4.y) + (Bones[2][a0.z].z * input_4.z);
    r2.xyz = (input_6.z * r1) + r2;
    r1.x = (Bones[0][a0.w].x * input_4.x) + (Bones[0][a0.w].y * input_4.y) + (Bones[0][a0.w].z * input_4.z);
    r1.y = (Bones[1][a0.w].x * input_4.x) + (Bones[1][a0.w].y * input_4.y) + (Bones[1][a0.w].z * input_4.z);
    r1.z = (Bones[2][a0.w].x * input_4.x) + (Bones[2][a0.w].y * input_4.y) + (Bones[2][a0.w].z * input_4.z);
    r5.xyz = (r1.w * r1) + r2;
    r1.x = (Bones[0][a0.y].x * input_2.x) + (Bones[0][a0.y].y * input_2.y) + (Bones[0][a0.y].z * input_2.z);
    r1.y = (Bones[1][a0.y].x * input_2.x) + (Bones[1][a0.y].y * input_2.y) + (Bones[1][a0.y].z * input_2.z);
    r1.z = (Bones[2][a0.y].x * input_2.x) + (Bones[2][a0.y].y * input_2.y) + (Bones[2][a0.y].z * input_2.z);
    r2.xyz = r1 * input_6.y;
    r1.x = (Bones[0][a0.x].x * input_2.x) + (Bones[0][a0.x].y * input_2.y) + (Bones[0][a0.x].z * input_2.z);
    r1.y = (Bones[1][a0.x].x * input_2.x) + (Bones[1][a0.x].y * input_2.y) + (Bones[1][a0.x].z * input_2.z);
    r1.z = (Bones[2][a0.x].x * input_2.x) + (Bones[2][a0.x].y * input_2.y) + (Bones[2][a0.x].z * input_2.z);
    r2.xyz = (input_6.x * r1) + r2;
    r1.x = (Bones[0][a0.z].x * input_2.x) + (Bones[0][a0.z].y * input_2.y) + (Bones[0][a0.z].z * input_2.z);
    r1.y = (Bones[1][a0.z].x * input_2.x) + (Bones[1][a0.z].y * input_2.y) + (Bones[1][a0.z].z * input_2.z);
    r1.z = (Bones[2][a0.z].x * input_2.x) + (Bones[2][a0.z].y * input_2.y) + (Bones[2][a0.z].z * input_2.z);
    r4.xyz = (input_6.z * r1) + r2;
    r2.x = (Bones[0][a0.w].x * input_2.x) + (Bones[0][a0.w].y * input_2.y) + (Bones[0][a0.w].z * input_2.z);
    r2.y = (Bones[1][a0.w].x * input_2.x) + (Bones[1][a0.w].y * input_2.y) + (Bones[1][a0.w].z * input_2.z);
    r2.z = (Bones[2][a0.w].x * input_2.x) + (Bones[2][a0.w].y * input_2.y) + (Bones[2][a0.w].z * input_2.z);
    r1.xyz = norm(r5);
    r4.xyz = (r1.w * r2) + r4;
    r1.xyz = r1 * const_0.w;
    r2.xyz = norm(r4);
    texcoord_1.y = (r1.x * const_9.x) + (r1.y * const_9.y) + (r1.z * const_9.z);
    texcoord_1.z = (r2.x * const_9.x) + (r2.y * const_9.y) + (r2.z * const_9.z);
    texcoord_2.x = (r3.x * SkinModelViewProj[0]0.x) + (r3.y * SkinModelViewProj[0]0.y) + (r3.z * SkinModelViewProj[0]0.z);
    texcoord_3.x = (r3.x * SkinModelViewProj[0]1.x) + (r3.y * SkinModelViewProj[0]1.y) + (r3.z * SkinModelViewProj[0]1.z);
    texcoord_2.y = (r1.x * SkinModelViewProj[0]0.x) + (r1.y * SkinModelViewProj[0]0.y) + (r1.z * SkinModelViewProj[0]0.z);
    texcoord_3.y = (r1.x * SkinModelViewProj[0]1.x) + (r1.y * SkinModelViewProj[0]1.y) + (r1.z * SkinModelViewProj[0]1.z);
    texcoord_2.z = (r2.x * SkinModelViewProj[0]0.x) + (r2.y * SkinModelViewProj[0]0.y) + (r2.z * SkinModelViewProj[0]0.z);
    r1.x = (const_9.x * r0.x) + (const_9.y * r0.y) + (const_9.z * r0.z) + (const_9.w * r0.w);
    r1.y = (SkinModelViewProj[0]0.x * r0.x) + (SkinModelViewProj[0]0.y * r0.y) + (SkinModelViewProj[0]0.z * r0.z) + (SkinModelViewProj[0]0.w * r0.w);
    r1.z = (SkinModelViewProj[0]1.x * r0.x) + (SkinModelViewProj[0]1.y * r0.y) + (SkinModelViewProj[0]1.z * r0.z) + (SkinModelViewProj[0]1.w * r0.w);
    texcoord_3.z = (r2.x * SkinModelViewProj[0]1.x) + (r2.y * SkinModelViewProj[0]1.y) + (r2.z * SkinModelViewProj[0]1.z);
    r1.xyz = EyePosition - r1;
    texcoord_0.xy = input_1;
    r0.xyz = norm(r1);
    texcoord_1.w = r0.x;
    texcoord_2.w = r0.y;
    texcoord_3.w = r0.z;
    color_0.xyz = input_5;

// approximately 108 instruction slots used
