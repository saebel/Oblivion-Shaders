//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   psa shaderdump19/WATER015.pso /Fcshaderdump19/WATER015.pso.dis
//
//
// Parameters:
//
//   float4 DeepColor;
//   sampler2D DetailMap;
//   float4 EyePos;
//   float FresnelRI;
//   sampler2D NormalMap;
//   float4 ReflectionColor;
//   sampler2D ReflectionMap;
//   float2 Scroll;
//   float4 ShallowColor;
//   float4 SunColor;
//   float4 SunDir;
//   float4 VarAmounts;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   Scroll          const_0       1
//   EyePos          const_1       1
//   SunDir          const_2       1
//   SunColor        const_3       1
//   ShallowColor    const_5       1
//   DeepColor       const_6       1
//   ReflectionColor const_7       1
//   VarAmounts      const_8       1
//   FresnelRI       const_11      1
//   ReflectionMap   texture_0       1
//   NormalMap       texture_1       1
//   DetailMap       texture_2       1
//

    const float4 const_4 = {0.1, 0.0002, 2496, 4};
    const float4 const_9 = {2, -1, 0, -(1.0 / 8192)};
    float3 texcoord_0 : TEXCOORD0_centroid;
    float3 texcoord_1 : TEXCOORD1_centroid;
    float4 texcoord_2 : TEXCOORD2_centroid;
    float4 texcoord_3 : TEXCOORD3_centroid;
    float4 texcoord_4 : TEXCOORD4_centroid;
    float4 texcoord_5 : TEXCOORD5_centroid;
    float2 texcoord_6 : TEXCOORD6;
    sampler2D ReflectionMap;
    sampler2D NormalMap;
    sampler2D DetailMap;
    r0.xy = EyePos.xy - IN.texcoord_1.xy;
    r0.w = dot(r0.xy, r0.xy);
    r0.w = 1.0 / sqrt(r0.w);
    r1.w = 1.0 / r0.w;
    r2.w = saturate((r1.w * -(1.0 / 8192)) - -1);
    r3.w = r2.w * r2.w;
    r3.xy = IN.texcoord_6.xy + Scroll.xy;
    r0.xyzw = tex2D(NormalMap, r3.xy);
    r0.xyz = (2 * r0.xyz) - 1;
    r0.xy = r3.w * r0.xy;
    r0.w = saturate(r1.w * 0.0002);
    r0.w = (r0.w * 2496) + 4;
    r2.xyz = normalize(r0.xyz);
    r1.xy = (r0.w * r2.xy) + IN.texcoord_0.xy;
    r1.z = IN.texcoord_0.z;
    r1.w = 1;
    r0.x = dot(IN.texcoord_2.xyzw, r1.xyzw);
    r0.y = dot(IN.texcoord_3.xyzw, r1.xyzw);
    r0.z = dot(IN.texcoord_4.xyzw, r1.xyzw);
    r0.w = dot(IN.texcoord_5.xyzw, r1.xyzw);
    r2.w = r2.w * VarAmounts.w;
    r1.xy = (0.1 * r2.xy) + r3.xy;
    r0.xyzw = tex2Dproj(ReflectionMap, r0.xyzw);			// partial precision
    r1.xyzw = tex2D(DetailMap, r1.xy);
    r3.xyz = EyePos.xyz - IN.texcoord_1.xyz;
    r4.xyz = normalize(r3.xyz);
    r6.x = saturate(dot(r4.xyz, r2.xyz));
    r0.xyz = r0.xyz - ReflectionColor.rgb;
    r0.w = -(r6.x - 1);
    r3.z = VarAmounts.y;
    r0.xyz = (r3.z * r0.xyz) + ReflectionColor.rgb;			// partial precision
    r1.w = r0.w * r0.w;
    r1.w = r1.w * r1.w;
    r3.xyz = DeepColor.rgb;
    r3.xyz = ShallowColor.rgb - r3.xyz;
    r1.w = r0.w * r1.w;
    r5.x = dot(-r4.xyz, r2.xyz);
    r3.xyz = (r6.x * r3.xyz) + DeepColor.rgb;			// partial precision
    r3.w = 2 * r5.x;
    r5.z = -1;
    r0.w = -(r5.z + FresnelRI.x);
    r2.xyz = (-r3.w * r2.xyz) - r4.xyz;
    r1.w = (r0.w * r1.w) + FresnelRI.x;
    r4.x = saturate(dot(r2.xyz, SunDir.xyz));
    r2.xyz = lerp(r3.xyz, r0.xyz, r1.w);
    r0.w = pow(abs(r4.x), VarAmounts.x);
    r0.xyz = r0.w * SunColor.rgb;
    r0.w = saturate(SunDir.w);
    r2.xyz = (r0.w * r0.xyz) + r2.xyz;
    r0.w = max(VarAmounts.z, r1.w);
    r0.xyz = lerp(r2.xyz, r1.xyz, r2.w);
    OUT.color_0.rgba = r0.xyzw;

// approximately 60 instruction slots used (3 texture, 57 arithmetic)
