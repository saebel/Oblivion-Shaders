//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/PARTICLE.vso /Fcshaderdump19/PARTICLE.vso.dis
//
//
// Parameters:
//
//   float4 Acceleration;
//   float4 Color1;
//   float4 Color2;
//   float4 Color3;
//   float4 InstanceData[2];
//   float4 Velocity;
//   row_major float4x4 WorldViewProj;
//   float4 fVars0;
//   float4 fVars1;
//   float4 fVars2;
//   float4 fVars3;
//
//
// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   WorldViewProj[0] const_0        1
//   WorldViewProj[1] const_1        1
//   WorldViewProj[2] const_2        1
//   WorldViewProj[3] const_3        1
//   fVars0        const_4       1
//   fVars1        const_5       1
//   fVars2        const_6       1
//   fVars3        const_7       1
//   Color1        const_8       1
//   Color2        const_9       1
//   Color3        const_10      1
//   Velocity      const_11      1
//   Acceleration  const_12      1
//   InstanceData[0]  const_15       1
//   InstanceData[1]  const_16       1
//

    const float4 const_13 = {2, 0.5, 1, 0};
    float4 IN.position : POSITION;
    float4 IN.texcoord_0 : TEXCOORD0;
    float4 IN.color_1 : COLOR1;
    r0.w = 2.w * IN.color_1.r;
    r0.w = frac(r0.w);
    r0.w = (2 * IN.color_1.r) - r0.w;
    offset.w = r0.w;
    r1.xzw = fVars0.xzw;
    r0.w = r1.x - InstanceData[0 + offset.w].w;
    r0.xyz = InstanceData[1 + offset.w];
    r1.xyz = (r1.z * r0.xyz) + Velocity.xyz;
    r3.w = r0.w * InstanceData[1 + offset.w].w;
    r0.xyz = (r1.w * r0.xyz) + Acceleration.xyz;
    r0.w = r3.w * r3.w;
    r1.xyz = (r3.w * r1.xyz) + InstanceData[0 + offset.w];
    r0.xyz = r0.xyz * r0.w;
    r0.xyz = (0.5 * r0.xyz) + r1.xyz;
    r0.xyz = r0.xyz - fVars3.xyz;
    r5.w = 1.0 / fVars0.y;
    r0.w = 1;
    r6.w = r3.w * r5.w;
    r2.xz = fVars2.xz;
    r3.xy = (fVars2.zw < r6.w ? 1.0 : 0.0);
    r4.zw = const_13.zw;
    r1.xzw = (fVars2.yyw * r4.zyz) + r4.wywz;
    r2.xz = r2.xz * r3.x;
    r2.yw = lerp(fVars2.yw, fVars2.xx, r3.x);
    r1.xzw = r1.xzw - r2.xzw;
    r1.y = -r2.y;
    OUT.position.z = dot(WorldViewProj[2].xyzw, r0.xyzw);
    r1.xyzw = (r3.y * r1.xyzw) + r2.xyzw;
    OUT.position.w = dot(WorldViewProj[3].xyzw, r0.xyzw);
    r2.w = r1.w - r1.z;
    r1.w = (r3.w * r5.w) - r1.z;
    r2.w = 1.0 / r2.w;
    r3.xyz = (fVars1.xyz < r6.w ? 1.0 : 0.0);
    r1.w = r1.w * r2.w;
    r2.w = lerp(r1.y, r1.x, r1.w);
    r1.w = fVars1.x;
    r1.x = r3.x * r1.w;
    r1.z = lerp(fVars1.y, fVars1.x, r3.x);
    r5.xy = lerp(fVars1.yz, r1.xz, r3.y);
    r2.xy = (fVars1.z * r4.zw) + r4.wz;
    r4.xy = r2.w * IN.position.xy;
    r1.xy = lerp(r2.xy, r5.xy, r3.z);
    r5.x = dot(WorldViewProj[0].xyzw, r0.xyzw);
    r2.w = r1.y - r1.x;
    r1.w = (r3.w * r5.w) - r1.x;
    r2.w = 1.0 / r2.w;
    r5.y = dot(WorldViewProj[1].xyzw, r0.xyzw);
    r5.w = r1.w * r2.w;
    r0.xyzw = Color1.rgba - r4.zzzw;
    r1.xyzw = Color1.rgba;
    r1.xyzw = Color2.rgba - r1.xyzw;
    r0.xyzw = (r3.x * r0.xyzw) + const_13.zzzw;
    r2.xyzw = (r3.x * r1.xyzw) + Color1.rgba;
    r1.xyzw = lerp(Color2.rgba, r0.xyzw, r3.y);
    r0.xyzw = lerp(Color3.rgba, r2.xyzw, r3.y);
    r2.xyzw = lerp(Color3.rgba, r1.xyzw, r3.z);
    r1.xyzw = lerp(const_13.zzzw, r0.xyzw, r3.z);
    r3.w = 1.0 / fVars1.w;
    r0.xyzw = lerp(r1.xyzw, r2.xyzw, r5.w);
    OUT.position.xy = (r3.w * r4.xy) + r5.xy;
    OUT.color_0.a = r0.w * fVars3.w;
    OUT.color_0.rgb = r0.xyz;
    OUT.texcoord_0.xy = IN.texcoord_0.xy;

// approximately 73 instruction slots used
