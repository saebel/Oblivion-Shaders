//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/PRECIP001.vso /Fcshaderdump19/PRECIP001.vso.dis
//
//
// Parameters:
//
//   float3 CameraUp;
//   float3 EyePosition;
//   float3 MaxPos;
//   float3 MinPos;
//   float3 Params;
//   float3 Velocity;
//   row_major float4x4 WorldViewProj;
//
//
// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   WorldViewProj[0] const_0        1
//   WorldViewProj[1] const_1        1
//   WorldViewProj[2] const_2        1
//   WorldViewProj[3] const_3        1
//   EyePosition   const_8       1
//   Velocity      const_9       1
//   MinPos        const_10      1
//   MaxPos        const_11      1
//   Params        const_12      1
//   CameraUp      const_13      1
//

    const float4 const_4 = {0, 1, 0.5, 0};
    float4 IN.position : POSITION;
    float4 IN.texcoord_0 : TEXCOORD0;
    float4 IN.texcoord_1 : TEXCOORD1;
    float4 OUT.position : POSITION;
    float4 OUT.color_0 : COLOR0;
    float2 OUT.texcoord_0 : TEXCOORD0;
    r0.xyz = Velocity;
    r3.xyz = (Params.x * r0) + IN.texcoord_1;
    r1.xyz = MaxPos;
    r2.xyz = r1 - MinPos;
    r3.xyz = r3 - MinPos;
    r4.x = 1.0 / r2.x;
    r4.y = 1.0 / r2.y;
    r4.z = 1.0 / r2.z;
    r3.xyz = r3 * r4;
    r5.xyz = abs(r3) - floor(abs(r3));
    r4.xyz = (r3 >= -r3 ? 1.0 : 0.0);
    r3.xyz = lerp(r5, -r5, r4);
    r3.xyz = r2 * r3;
    r4.xyz = abs(r3) + MinPos;
    r5.xyz = MaxPos - abs(r3);
    r0.xyz = (const_4.x < r0 ? 1.0 : 0.0);
    r3.xyz = lerp(r4, r5, r0);
    r4.xyz = r3 - EyePosition;
    r0.xyz = normalize(-r4);
    r4.xyz = r0.yzxw * CameraUp.zxyw;
    r5.xyz = (CameraUp.yzxw * r0.zxyw) - r4;
    r4.xyz = r0 * IN.position.y;
    r0.xyz = normalize(r5);
    r0.xyz = (IN.position.x * r0) + r4;
    r0.xyz = (IN.position.z * CameraUp) + r0;
    r1.xyz = (-const_4.z * abs(r2)) + r1;
    r2.x = 1.0 / abs(r2.x);
    r2.y = 1.0 / abs(r2.y);
    r2.z = 1.0 / abs(r2.z);
    r1.xyz = r1 - r3;
    r0.xyz = r3 + r0;
    r1.xyz = r2 * r1;
    r0.w = const_4.y;
    r1.w = dot(r1, r1);	// normalize + length
    OUT.position.x = dot(WorldViewProj[0], r0);
    r1.w = 1.0 / sqrt(r1.w);
    OUT.position.y = dot(WorldViewProj[1], r0);
    r1.w = 1.0 / r1.w;
    OUT.position.z = dot(WorldViewProj[2], r0);
    r1.w = const_4.y - r1.w;
    OUT.position.w = dot(WorldViewProj[3], r0);
    OUT.color_0.a = r1.w * r1.w;
    OUT.color_0.rgb = const_4.y;
    OUT.texcoord_0.xy = IN.texcoord_0;

// approximately 50 instruction slots used
