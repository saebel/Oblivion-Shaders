//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2072.vso /Fcshaderdump19/SLS2072.vso.dis
//
//
// Parameters:
//
//   float4 Bones[54];
//   float4 EyePosition;
//   float3 FogColor;
//   float4 FogParam;
//   row_major float4x4 SkinModelViewProj;
//   float UOffset;
//   float VOffset;
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   SkinModelViewProj[0] const_4        1
//   SkinModelViewProj[1] const_5        1
//   SkinModelViewProj[2] const_6        1
//   SkinModelViewProj[3] const_7        1
//   EyePosition       const_8       1
//   UOffset           const_9       1
//   VOffset           const_10      1
//   FogParam          const_12      1
//   FogColor          const_13      1
//   Bones             const_14     54
//

    const float4 const_0 = {0.025, 0.0208350997, -0.0851330012, 0.180141002};
    const float4 const_1 = {-0.330299497, 0.999866009, -2, PI / 2};
    const float4 const_2 = {-PI, 0.318471342, 1, 765.01001};
    const int4 const_3 = {1, 0, 0, 0};
    float4 IN.position : POSITION;
    float3 IN.tangent : TANGENT;
    float3 IN.binormal : BINORMAL;
    float3 IN.normal : NORMAL;
    float4 IN.texcoord_0 : TEXCOORD0;
    float3 IN.blendweight : BLENDWEIGHT;
    float4 IN.blendindices : BLENDINDICES;
    r0.xy = abs(IN.position);
    r0.w = max(r0.y, r0.x);
    r1.w = 1.0 / r0.w;
    r0.w = min(r0.y, r0.x);
    r0.w = r1.w * r0.w;
    r1.w = r0.w * r0.w;
    r2.w = (r1.w * const_0.y) + const_0.z;
    r2.w = (r1.w * r2.w) + const_0.w;
    r2.w = (r1.w * r2.w) + const_1.x;
    r1.w = (r1.w * r2.w) + const_1.y;
    r2.w = r0.w * r1.w;
    r1.w = (r0.y < r0.x ? 1.0 : 0.0);
    r0.w = (r2.w * const_1.z) + const_1.w;
    r1.w = (r0.w * r1.w) + r2.w;
    r0.w = (IN.position.y < -IN.position.y ? 1.0 : 0.0);
    r2.w = const_0.x;
    OUT.texcoord_1.y = (IN.position.z * r2.w) + UOffset.x;
    r2.w = (r0.w * const_2.x) + r1.w;
    r0.w = min(IN.position.y, IN.position.x);
    r1.w = max(IN.position.y, IN.position.x);
    r0.w = (r0.w < -r0.w ? 1.0 : 0.0);
    r3.w = (r1.w >= -r1.w ? 1.0 : 0.0);
    r1.w = r2.w + r2.w;
    r0.w = r0.w * r3.w;
    r1.w = (r0.w * -r1.w) + r2.w;
    r0 = IN.blendindices.zyxw * const_2.w;
    r1.z = const_2.y;
    OUT.texcoord_1.x = (r1.w * r1.z) + VOffset.x;
    r0 = r0 - floor(r0);
    r2.x = dot(IN.blendweight, const_2.z);
    r1 = (IN.blendindices.zyxw * const_2.w) - r0;
    r0 = (IN.position.xyzx * const_3.xxxy) + const_3.yyyx;
    offset = r1;
    r1.w = const_2.z - r2.x;
    r1.x = dot(const_14[offset.y], r0);
    r1.y = dot(const_15[offset.y], r0);
    r1.z = dot(const_16[offset.y], r0);
    r2.xyz = r1 * IN.blendweight.y;
    r1.x = dot(const_14[offset.x], r0);
    r1.y = dot(const_15[offset.x], r0);
    r1.z = dot(const_16[offset.x], r0);
    r2.xyz = (IN.blendweight.x * r1) + r2;
    r1.x = dot(const_14[offset.z], r0);
    r1.y = dot(const_15[offset.z], r0);
    r1.z = dot(const_16[offset.z], r0);
    r2.xyz = (IN.blendweight.z * r1) + r2;
    r1.x = dot(const_14[offset.w], r0);
    r1.y = dot(const_15[offset.w], r0);
    r1.z = dot(const_16[offset.w], r0);
    r0.xyz = (r1.w * r1) + r2;
    r1.x = dot(const_14[offset.y], IN.normal);
    r1.y = dot(const_15[offset.y], IN.normal);
    r1.z = dot(const_16[offset.y], IN.normal);
    r2.xyz = r1 * IN.blendweight.y;
    r1.x = dot(const_14[offset.x], IN.normal);
    r1.y = dot(const_15[offset.x], IN.normal);
    r1.z = dot(const_16[offset.x], IN.normal);
    r2.xyz = (IN.blendweight.x * r1) + r2;
    r1.x = dot(const_14[offset.z], IN.normal);
    r1.y = dot(const_15[offset.z], IN.normal);
    r1.z = dot(const_16[offset.z], IN.normal);
    r2.xyz = (IN.blendweight.z * r1) + r2;
    r1.x = dot(const_14[offset.w], IN.normal);
    r1.y = dot(const_15[offset.w], IN.normal);
    r1.z = dot(const_16[offset.w], IN.normal);
    r0.w = const_2.z;
    r1.xyz = (r1.w * r1) + r2;
    r3.xyz = normalize(r1);
    r4.xyz = EyePosition - r0;
    OUT.position.w = dot(SkinModelViewProj[3], r0);
    r1.x = dot(r3, r4);
    r2.w = (r1.x < const_2.z ? 1.0 : 0.0);
    r1.x = dot(const_14[offset.y], IN.tangent);
    r1.y = dot(const_15[offset.y], IN.tangent);
    r1.z = dot(const_16[offset.y], IN.tangent);
    r2.xyz = r1 * IN.blendweight.y;
    r1.x = dot(const_14[offset.x], IN.tangent);
    r1.y = dot(const_15[offset.x], IN.tangent);
    r1.z = dot(const_16[offset.x], IN.tangent);
    r2.xyz = (IN.blendweight.x * r1) + r2;
    r1.x = dot(const_14[offset.z], IN.tangent);
    r1.y = dot(const_15[offset.z], IN.tangent);
    r1.z = dot(const_16[offset.z], IN.tangent);
    r5.xyz = (IN.blendweight.z * r1) + r2;
    r2.x = dot(const_14[offset.w], IN.tangent);
    r2.y = dot(const_15[offset.w], IN.tangent);
    r2.z = dot(const_16[offset.w], IN.tangent);
    r1.xyz = r4 * r2.w;
    r2.xyz = (r1.w * r2) + r5;
    r4.xyz = (const_1.z * r1) + r4;
    r1.xyz = normalize(r2);
    r2.x = dot(r1, r4);
    r1.x = dot(const_14[offset.y], IN.binormal);
    r1.y = dot(const_15[offset.y], IN.binormal);
    r1.z = dot(const_16[offset.y], IN.binormal);
    r5.xyz = r1 * IN.blendweight.y;
    r1.x = dot(const_14[offset.x], IN.binormal);
    r1.y = dot(const_15[offset.x], IN.binormal);
    r1.z = dot(const_16[offset.x], IN.binormal);
    r5.xyz = (IN.blendweight.x * r1) + r5;
    r1.x = dot(const_14[offset.z], IN.binormal);
    r1.y = dot(const_15[offset.z], IN.binormal);
    r1.z = dot(const_16[offset.z], IN.binormal);
    r5.xyz = (IN.blendweight.z * r1) + r5;
    r1.x = dot(const_14[offset.w], IN.binormal);
    r1.y = dot(const_15[offset.w], IN.binormal);
    r1.z = dot(const_16[offset.w], IN.binormal);
    r5.xyz = (r1.w * r1) + r5;
    r1.x = dot(SkinModelViewProj[0], r0);
    r1.y = dot(SkinModelViewProj[1], r0);
    r1.z = dot(SkinModelViewProj[2], r0);
    r0.xyz = normalize(r5);
    r5.x = dot(r1, r1);	// normalize + length
    r2.y = dot(r0, r4);
    r0.w = 1.0 / sqrt(r5.x);
    r2.z = dot(r3, r4);
    r0.w = 1.0 / r0.w;
    r0.w = FogParam.x - r0.w;
    r1.w = 1.0 / FogParam.y;
    r0.w = r0.w * r1.w;
    r0.w = max(r0.w, const_3.y);
    r3.xyz = normalize(r2);
    OUT.texcoord_3.xyz = r3;
    r0.w = min(r0.w, const_2.z);
    r1.w = const_2.z - r0.w;
    r0.z = const_3.y;
    r0.w = (r0.z < FogParam.z ? 1.0 : 0.0);
    OUT.position.xyz = r1;
    OUT.color_1.a = r1.w * r0.w;
    OUT.texcoord_0.xy = IN.texcoord_0;
    OUT.color_1.rgb = FogColor;

// approximately 139 instruction slots used
