//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/HDR001.pso /Fcshaderdump19/HDR001.pso.dis
//
//
// Parameters:

float4 BlurOffsets[16];
float2 BlurScale;
sampler2D Src0;

// Structures:

struct VS_OUTPUT {
    float4 position : POSITION;
    float2 texcoord_0 : TEXCOORD0;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    float2 pos, offpos, offs;

    pos  = IN.texcoord_0;
    pos *= 128;
    pos -= floor(pos);

    offs = 2.5 - BlurOffsets[1]; offpos = (pos <= 0.0 ? BlurOffsets[1] : offs); float2 p8 = (offpos * BlurScale) + IN.texcoord_0;
    offs = 2.5 - BlurOffsets[0]; offpos = (pos <= 0.0 ? BlurOffsets[0] : offs); float2 p7 = (offpos * BlurScale) + IN.texcoord_0;
    offs = 2.5 - BlurOffsets[2]; offpos = (pos <= 0.0 ? BlurOffsets[2] : offs); float2 p6 = (offpos * BlurScale) + IN.texcoord_0;
    offs = 2.5 - BlurOffsets[3]; offpos = (pos <= 0.0 ? BlurOffsets[3] : offs); float2 p5 = (offpos * BlurScale) + IN.texcoord_0;
    offs = 2.5 - BlurOffsets[4]; offpos = (pos <= 0.0 ? BlurOffsets[4] : offs); float2 p4 = (offpos * BlurScale) + IN.texcoord_0;
    offs = 2.5 - BlurOffsets[5]; offpos = (pos <= 0.0 ? BlurOffsets[5] : offs); float2 p3 = (offpos * BlurScale) + IN.texcoord_0;
    offs = 2.5 - BlurOffsets[6]; offpos = (pos <= 0.0 ? BlurOffsets[6] : offs); float2 p2 = (offpos * BlurScale) + IN.texcoord_0;
    offs = 2.5 - BlurOffsets[7]; offpos = (pos <= 0.0 ? BlurOffsets[7] : offs); float2 p1 = (offpos * BlurScale) + IN.texcoord_0;
    offs = 2.5 - BlurOffsets[8]; offpos = (pos <= 0.0 ? BlurOffsets[8] : offs); float2 p0 = (offpos * BlurScale) + IN.texcoord_0;

    float3 c8 = tex2D(Src0, p8);
    float3 c7 = tex2D(Src0, p7);
    float3 c6 = tex2D(Src0, p6);
    float3 c5 = tex2D(Src0, p5);
    float3 c4 = tex2D(Src0, p4);
    float3 c3 = tex2D(Src0, p3);
    float3 c2 = tex2D(Src0, p2);
    float3 c1 = tex2D(Src0, p1);
    float3 c0 = tex2D(Src0, p0);

    float3 sum =
    	(BlurOffsets[1].z * c8) +
    	(BlurOffsets[0].z * c7) +
    	(BlurOffsets[2].z * c6) +
    	(BlurOffsets[3].z * c5) +
    	(BlurOffsets[4].z * c4) +
    	(BlurOffsets[5].z * c3) +
    	(BlurOffsets[6].z * c2) +
    	(BlurOffsets[7].z * c1) +
    	(BlurOffsets[8].z * c0);

    OUT.color_0.rgb = sum;
    OUT.color_0.a   = 1;

    return OUT;
};

// approximately 70 instruction slots used (9 texture, 61 arithmetic)
