//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/MAP000.pso /Fcshaderdump19/MAP000.pso.dis
//
//
// Parameters:

float4 CameraPos;
sampler2D Src0;
sampler2D Src1;
sampler2D Src2;

// Structures:

struct VS_OUTPUT {
    float4 position : POSITION;
    float2 texcoord_0 : TEXCOORD0;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    const float3 const_0 = {0.2, 0.2, 0.15};
    const float3 const_3 = {0.458999991, 0.231000006, 0.128999993};
    const int2 const_4 = {1, -1};
    float2 r0, r1, r2, r3, r4, r5, r6, r7;

    r0.xy = const_4;

    r7.xy = (-r0 * CameraPos) + IN.texcoord_0;

    r3.x = IN.texcoord_0.x;
    r3.y = r7.y;

    r5.xy = IN.texcoord_0 - CameraPos;

    r6.x = IN.texcoord_0.x;
    r6.y = r5.y;

    r4.xy = (r0 * CameraPos) + IN.texcoord_0;

    r0.x = r4.x;
    r0.y = IN.texcoord_0.y;

    r1.x = r5.x;
    r1.y = IN.texcoord_0.y;

    r2.xy = IN.texcoord_0 + CameraPos;

    float4 c7 = tex2D(Src0, r7);
    float4 c3 = tex2D(Src0, r3);
    float4 c9 = tex2D(Src0, r6);
    float4 c8 = tex2D(Src0, r5);
    float4 c6 = tex2D(Src0, r4);
    float4 c4 = tex2D(Src0, r2);
    float4 c5 = tex2D(Src0, r1);
    float4 c2 = tex2D(Src0, r0);
    float3 c1 = tex2D(Src1, IN.texcoord_0);
    float3 c0 = tex2D(Src2, IN.texcoord_0);

    c9 = (2 * c9) + c8;
    c9 = c6 + c9;
    c9 = c9 - c7;

    c3 = (2 * -c3) + c9;
    c3 = c3 - c4;
    c3 = c3 * c3;

    c5 = (2 * c5) + c8;
    c5 = c7 + c5;
    c5 = c5 - c6;

    c2 = (2 * -c2) + c5;
    c2 = c2 - c4;
    c2 = (c2 * c2) + c3;

    float aleph1 = c2.a * 10;
    float aleph2 = dot(const_0, c2);
    float aleph0 = min(aleph1, 0.1) + aleph2;
    float aleph3 = min(aleph0, 0.5);

    float3 col = (0.75 * c0) + (0.25 * c1);

    OUT.color_0.rgb = lerp(const_3, col, aleph3);
    OUT.color_0.a   = 1;

    return OUT;
};

// approximately 46 instruction slots used (10 texture, 36 arithmetic)
