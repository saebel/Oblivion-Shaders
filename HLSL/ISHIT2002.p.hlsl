//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/ISHIT2002.pso /Fcshaderdump19/ISHIT2002.pso.dis
//
//
// Parameters:

sampler2D Src0;
sampler2D Src1;
float4 blurParams;
float4 doubleVisParams;

// Structures:

struct VS_OUTPUT {
    float4 position : POSITION;
    float2 texcoord_0 : TEXCOORD0;
    float2 texcoord_1 : TEXCOORD1;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    float4 r0, r1, r2;
    float3 c0, c1, c2;
    float2 p0, p1, p2;

    p0.xy = IN.texcoord_0 - doubleVisParams;
    p2.xy = IN.texcoord_0 + doubleVisParams;

    p1.x = max(p0.x, 0);
    p1.y = max(p0.y, 1 - doubleVisParams.w);
    p0.x = min(p2.x,     doubleVisParams.z);
    p0.y = min(p2.y, 1);

    c2 = tex2D(Src0, p1);
    c1 = tex2D(Src0, p0);
    c0 = tex2D(Src1, IN.texcoord_1);

    r0.w = 1.0 / doubleVisParams.w;
    r0.w = r0.w * doubleVisParams.z;

    // dot2
    r1.w = IN.texcoord_1.x + -0.5;
    r0.w = r0.w * r1.w;
    r0.w = r0.w + r0.w;

    r1.w = IN.texcoord_1.y + -0.5;
    r1.w = r1.w + r1.w;
    r1.w = r1.w * r1.w;

    /* length() */
    r0.w = (r0.w * r0.w);
    r0.w = 1.0 / sqrt(r0.w);
    r0.w = 1.0 / r0.w;

    r1.w = r0.w * blurParams.z;
    r0.w = min(r1.w, 1);
    r1.w = 1 - r0.w;

    c1 = c2 + c1;
    c1 = c1 * r1.w;
    c0 = c0 * r0.w;
    c0 = (0.5 * c1) + c0;

    OUT.color_0.rgb = c0;
    OUT.color_0.a   = 1;

    return OUT;
};

// approximately 31 instruction slots used (3 texture, 28 arithmetic)
