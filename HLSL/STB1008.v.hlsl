//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/STB1008.vso /Fcshaderdump19/STB1008.vso.dis
//
//
// Parameters:

float4 EyePosition;
float4 LightPosition[3];
row_major float4x4 ModelViewProj;
float4 WindMatrices[16];

// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float3 normal : NORMAL;
    float4 texcoord_0 : TEXCOORD0;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
    float4 blendindices : BLENDINDICES;
};

struct VS_OUTPUT {
    float4 position : POSITION;
    float3 color_0 : COLOR0;
    float2 texcoord_0 : TEXCOORD0;
    float2 texcoord_1 : TEXCOORD1;
    float2 texcoord_2 : TEXCOORD2;
    float3 texcoord_3 : TEXCOORD3;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

    /* +term: wind ------------------------------------------------------------- */
    float4 InstanceWind, InstanceProj;
    float offset = IN.blendindices.y;

    InstanceWind.x = dot(WindMatrices[0 + offset], IN.position);
    InstanceWind.y = dot(WindMatrices[1 + offset], IN.position);
    InstanceWind.z = dot(WindMatrices[2 + offset], IN.position);
    InstanceWind.w = dot(WindMatrices[3 + offset], IN.position);

    InstanceWind =                      InstanceWind  - IN.position;
    InstanceWind = (IN.blendindices.x * InstanceWind) + IN.position;

    InstanceProj.x = dot(ModelViewProj[0], InstanceWind);
    InstanceProj.y = dot(ModelViewProj[1], InstanceWind);
    InstanceProj.z = dot(ModelViewProj[2], InstanceWind);
    InstanceProj.w = dot(ModelViewProj[3], InstanceWind);

    OUT.position.xyzw = InstanceProj;

    /* +term: directional point light (spec) ----------------------------------- */
    float3 spcvec;
    float3 spcmod;
    float3 pntvec;
    float3 pntdir;
    float3 pntmod;
    float3 nrmdir;

    spcvec = EyePosition - InstanceWind;
    pntvec = LightPosition[0] - InstanceWind;

    pntdir = normalize(normalize(spcvec) + normalize(pntvec));

    pntdir.x = dot(IN.tangent , pntdir);
    pntdir.y = dot(IN.binormal, pntdir);
    pntdir.z = dot(IN.normal,   pntdir);

    nrmdir.x = dot(IN.tangent,  IN.normal);
    nrmdir.y = dot(IN.binormal, IN.normal);
    nrmdir.z = dot(IN.normal,   IN.normal);
    nrmdir = (0.5 * nrmdir) + 0.5;

    pntvec = pntvec / LightPosition[0].w;
    pntvec = (0.5 * pntvec) + 0.5;

    OUT.color_0.rgb = nrmdir;
    OUT.texcoord_1.xy = pntvec;
    OUT.texcoord_2.x = pntvec.z;
    OUT.texcoord_2.y = 0.5;
    OUT.texcoord_3.xyz = pntdir;

    /* +term: copy ------------------------------------------------------------- */
    OUT.texcoord_0.xy = IN.texcoord_0;

    return OUT;
};

// approximately 37 instruction slots used
