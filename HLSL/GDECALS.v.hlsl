//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/GDECALS.vso /Fcshaderdump19/GDECALS.vso.dis
//
//
// Parameters:

float4 Bones[54];
float4 DecalFade;
row_major float4x4 SkinModelViewProj;

// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float3 normal : NORMAL;
    float3 blendweight : BLENDWEIGHT;
    float4 blendindices : BLENDINDICES;
};

struct VS_OUTPUT {
    float4 position : POSITION;
    float3 texcoord_0 : TEXCOORD0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

    const float4 const_0 = {1, 765.01001, 0, 0};
    float4 r0, r1, r2;
    float3 r3;
    float offset;

    r2.x = dot(IN.blendweight, 1);
    r0 = IN.blendindices.zyxw * const_0.y;
    r1 = (IN.position.xyzx * const_0.xxxz) + const_0.zzzx;
    r2.w = 1 - r2.x;

    offset = r0.y;
    r2.x = dot(Bones[0 + offset], r1);
    r2.y = dot(Bones[1 + offset], r1);
    r2.z = dot(Bones[2 + offset], r1);
    r3.xyz = r2 * IN.blendweight.y;

    offset = r0.x;
    r2.x = dot(Bones[0 + offset], r1);
    r2.y = dot(Bones[1 + offset], r1);
    r2.z = dot(Bones[2 + offset], r1);
    r2.xyz = (IN.blendweight.x * r2) + r3;

    offset = r0.z;
    r0.x = dot(Bones[0 + offset], r1);
    r0.y = dot(Bones[1 + offset], r1);
    r0.z = dot(Bones[2 + offset], r1);
    r2.xyz = (IN.blendweight.z * r0) + r2;

    offset = r0.w;
    r0.x = dot(Bones[0 + offset], r1);
    r0.y = dot(Bones[1 + offset], r1);
    r0.z = dot(Bones[2 + offset], r1);
    r0.xyz = (r2.w * r0) + r2;

    r0.w = 1;

    OUT.position.x = dot(SkinModelViewProj[0], r0);
    OUT.position.y = dot(SkinModelViewProj[1], r0);
    OUT.position.z = dot(SkinModelViewProj[2], r0);
    OUT.position.w = dot(SkinModelViewProj[3], r0);

    OUT.texcoord_0.z = IN.normal.z * DecalFade.x;
    OUT.texcoord_0.xy = IN.normal;

    return OUT;
};

// approximately 31 instruction slots used
