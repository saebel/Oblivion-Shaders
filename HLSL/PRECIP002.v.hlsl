//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/PRECIP002.vso /Fcshaderdump19/PRECIP002.vso.dis
//
//
// Parameters:

float3 EyePosition;
float3 MaxPos;
float3 MinPos;
float3 Params;
float3 Velocity;
row_major float4x4 WorldViewProj;

// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float4 texcoord_0 : TEXCOORD0;
    float4 texcoord_1 : TEXCOORD1;
};

struct VS_OUTPUT {
    float4 position : POSITION;
    float4 color_0 : COLOR0;
    float2 texcoord_0 : TEXCOORD0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	PI	3.14159274

    const float4 const_4 = {0, -1, 1, 0.5};
    const float4 const_5 = {(1.0 / (PI * 2)), 0.5, PI * 2, -PI};
    float3 r0, r1, r2, r3, r4, r5, r6;
    float4 t0, t1, t2;

    r1.xyz = (Params.x * Velocity) + IN.texcoord_1;

    r6.xyz =      MaxPos;
    r5.xyz = r6 - MinPos;
    r1.xyz = r1 - MinPos;

    r2.x = 1.0 / r5.x;
    r2.y = 1.0 / r5.y;
    r2.z = 1.0 / r5.z;

    r1.xyz = r1 * r2;
    r3.xyz = frac(abs(r1));
    r2.xyz = (r1 >= -r1 ? 1.0 : 0.0);
    r1.xyz = lerp(r3, -r3, r2);
    r2.xyz = r5 * r1;
    r1.xyz = MinPos + abs(r2);
    r2.xyz = MaxPos - abs(r2);
    r0.xyz = (0 < Velocity ? 1.0 : 0.0);
    r4.xyz = lerp(r1, r2, r0);

    /* dot2-product */
    t0.xy = r4 - EyePosition;
    t1.xy = t0.xy * t0.xy;
    t0.w = t1.y + t1.x;
    t0.w = 1.0 / sqrt(t0.w);

    t1.xz = -t0.xyyw * t0.w;
    t1.yw = t1.z * const_4.xyzx;
    t0.xyz = t1.zxw * const_4.yzz;
    t0.w = (Params.z * Params.x) + IN.texcoord_1.x;	// I think it 0s out of the next equation
    t1.xy = t0 / sqrt(dot(t1.yxww, t0));

    t0.w = (t0.w * const_5.x) + const_5.y;
    t0.w = frac(t0.w);
    t0.w = (t0.w * const_5.z) + const_5.w;

    float c = cos(t0.w);
    float s = sin(t0.w);

    r3.xyz = float3(  1 * c, 0 * c, 1 * s );
    r2.xyz = float3( -1 * s, 0 * c, 1 * s );

    t2.x = dot(r3, IN.position);
    t2.z = dot(r2, IN.position);
    t2.w = IN.position.y;
    t0.w = t1.x;
    t2.y = dot(t1.ywzw, t2.xzww);
    t2.x = dot(t0.wzyw, t2.xzww);

    r3.xyz = t2;
    r0.xyz = (-0.5 * abs(r5)) + r6;

    r2.x = 1.0 / abs(r5.x);
    r2.y = 1.0 / abs(r5.y);
    r2.z = 1.0 / abs(r5.z);

    r1.xyz = r0 - r4;
    r0.xyz = r4 + r3;
    r1.xyz = r2 * r1;

    t0.w = 1;
    t1.w = 1 - length(r1.xyz);

    OUT.position.x = dot(WorldViewProj[0], r0);
    OUT.position.y = dot(WorldViewProj[1], r0);
    OUT.position.z = dot(WorldViewProj[2], r0);
    OUT.position.w = dot(WorldViewProj[3], r0);
    OUT.color_0.rgb = 1;
    OUT.color_0.a = t1.w * t1.w;
    OUT.texcoord_0.xy = IN.texcoord_0;

    return OUT;
};

// approximately 62 instruction slots used
