//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/MAP000.pso /Fcshaderdump19/MAP000.pso.dis
//
//
// Parameters:

float4 CameraPos;
sampler2D Src0;
sampler2D Src1;
sampler2D Src2;


// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   CameraPos    const_1       1
//   Src0         texture_0       1
//   Src1         texture_1       1
//   Src2         texture_2       1
//



// Structures:

struct VS_OUTPUT {
    float2 texcoord_0 : TEXCOORD0;
};

struct PS_OUTPUT {
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    const float4 const_0 = {0.2, 0.2, 0.15, 0.1};
    const float4 const_2 = {0.5, 0.25, 0.75, 0};
    const float4 const_3 = {0.458999991, 0.231000006, 0.128999993, 0};
    const int4 const_4 = {1, -1, 2, 10};

    r0.xy = const_4.xy;
    r0.y = IN.texcoord_0.y;
    r1.y = IN.texcoord_0.y;
    r2.xy = IN.texcoord_0 + CameraPos.xy;
    r2.xyzw = tex2D(Src0, r0);
    r2.xyzw = (2 * -r2) + r5;
    r2.xyzw = r2 - r4;
    r2.xyzw = (r2 * r2) + r3;
    r2.x = dot(const_0.xyz, r2.xyz);
    r4.xy = (r0 * CameraPos) + IN.texcoord_0;
    r0.x = r4.x;
    r0.xyzw = tex2D(Src2, IN.texcoord_0);
    r5.xy = IN.texcoord_0 - CameraPos.xy;
    r1.x = r5.x;
    r1.xyzw = tex2D(Src1, IN.texcoord_0);
    r1.w = r2.w * 10;
    r0.w = min(r1.w, 0.1);
    r0.w = r2.x + r0.w;
    r1.w = min(r0.w, 0.5);
    r0.w = 1;
    r1.xyz = r1.xyz * 0.25;
    r1.xyz = (0.75 * r0.xyz) + r1.xyz;
    r0.xyz = lerp(const_3, r1, r1.w);
    OUT.color_0.rgba = r0.xyzw;
    r3.x = IN.texcoord_0.x;
    r6.y = r5.y;
    r5.xyzw = tex2D(Src0, r1);
    r5.xyzw = (2 * r5) + r8;
    r5.xyzw = r7 + r5;
    r5.xyzw = r5 - r6;
    r6.x = IN.texcoord_0.x;
    r6.xyzw = tex2D(Src0, r4);
    r7.xy = (-r0 * CameraPos) + IN.texcoord_0;
    r3.y = r7.y;
    r3.xyzw = tex2D(Src0, r3);
    r3.xyzw = (2 * -r3) + r9;
    r3.xyzw = r3 - r4;
    r3.xyzw = r3 * r3;
    r4.xyzw = tex2D(Src0, r2);
    r7.xyzw = tex2D(Src0, r7);
    r8.xyzw = tex2D(Src0, r5);
    r9.xyzw = tex2D(Src0, r6);
    r9.xyzw = (2 * r9) + r8;
    r9.xyzw = r6 + r9;
    r9.xyzw = r9 - r7;

    return OUT;
};

// approximately 46 instruction slots used (10 texture, 36 arithmetic)
