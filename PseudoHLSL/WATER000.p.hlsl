//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/WATER000.pso /Fcshaderdump19/WATER000.pso.dis
//
//
// Parameters:
//
float4 DeepColor;
sampler2D DepthMap;
sampler2D DetailMap;
float4 EyePos;
float4 FogColor;
float4 FogParam;
float FresnelRI;
sampler2D NormalMap;
float4 ReflectionColor;
sampler2D ReflectionMap;
float2 Scroll;
float4 ShallowColor;
float4 SunColor;
float4 SunDir;
float4 VarAmounts;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   Scroll          const_0       1
//   EyePos          const_1       1
//   SunDir          const_2       1
//   SunColor        const_3       1
//   ShallowColor    const_5       1
//   DeepColor       const_6       1
//   ReflectionColor const_7       1
//   VarAmounts      const_8       1
//   FogParam        const_9       1
//   FogColor        const_10      1
//   FresnelRI       const_11      1
//   ReflectionMap   texture_0       1
//   NormalMap       texture_1       1
//   DetailMap       texture_2       1
//   DepthMap        texture_3       1
//


// Structures:

struct VS_OUTPUT {
    float3 texcoord_0 : TEXCOORD0_centroid;
    float3 texcoord_1 : TEXCOORD1_centroid;
    float4 texcoord_2 : TEXCOORD2_centroid;
    float4 texcoord_3 : TEXCOORD3_centroid;
    float4 texcoord_4 : TEXCOORD4_centroid;
    float4 texcoord_5 : TEXCOORD5_centroid;
    float4 texcoord_6 : TEXCOORD6;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    float1 depth30;
    float1 eye21;
    float3 eye6;
    float3 noxel2;
    float2 q0;
    float1 q12;
    float1 q13;
    float1 q14;
    float1 q15;
    float1 q17;
    float3 q35;
    float3 q36;
    float1 q4;
    float1 q45;
    float1 q46;
    float4 q47;
    float4 r0;
    float4 r1;
    float3 r2;
    float3 r3;
    float3 t5;
    float3 t50;

    depth30.x = tex2D(DepthMap, IN.texcoord_6.zw);
    eye21.x = length(EyePos.xy - IN.texcoord_1.xy);
    q4.x = saturate(1 - (eye21.x / 8192));
    q0.xy = IN.texcoord_6.xy + Scroll.xy;
    noxel2.xyz = tex2D(NormalMap, q0.xy);
    r0.xyz = expand(noxel2.xyz);	// [0,1] to [-1,+1]
    r0.xy = sqr(q4.x) * r0.xy;
    r3.xyz = normalize(r0.xyz);
    r1.z = IN.texcoord_0.z;
    eye6.xyz = EyePos.xyz - IN.texcoord_1.xyz;
    q46.x = shades(normalize(eye6.xyz), r3.xyz);
    q45.x = pow(abs(shades(reflect(-normalize(eye6.xyz), r3.xyz), SunDir.xyz)), VarAmounts.x);
    q14.x = 1 - saturate((FogParam.x - length(eye6.xyz)) / FogParam.y);
    q17.x = 1 - ((depth30.x - 0.2) / 0.35);
    r1.w = 1;
    q12.x = ((FresnelRI.x + 1) * ((1 - q46.x) * sqr(sqr(1 - q46.x)))) + FresnelRI.x;
    q13.x = max(VarAmounts.z, q12.x);
    q15.x = (depth30.x >= 1 ? q13.x : (((1 - depth30.x) * (0.25 - q13.x)) + q13.x));
    r1.xy = (((saturate(eye21.x * 0.0002) * 2496) + 4) * r3.xy) + IN.texcoord_0.xy;
    q47.xyzw = mul(float4x4(IN.texcoord_2.xyzw, IN.texcoord_3.xyzw, IN.texcoord_4.xyzw, IN.texcoord_5.xyzw), r1.xyzw);
    t5.xyz = tex2Dproj(ReflectionMap, q47.xyzw);			// partial precision
    t50.xyz = tex2D(DetailMap, (0.1 * r3.xy) + q0.xy);
    r1.w = (depth30.x >= 0.2 ? (depth30.x >= 0.55 ? q15.x : (q15.x * (1 - (q17.x * sqr(q17.x))))) : 0);
    r2.xyz = (VarAmounts.y * (t5.xyz - ReflectionColor.rgb)) + ReflectionColor.rgb;			// partial precision
    q35.xyz = lerp((q46.x * (ShallowColor.rgb - DeepColor.rgb)) + DeepColor.rgb, r2.xyz, q12.x);
    q36.xyz = lerp((saturate(SunDir.w) * (q45.x * SunColor.rgb)) + q35.xyz, t50.xyz, q4.x * VarAmounts.w);
    r1.xyz = (q14.x * (FogColor.rgb - q36.xyz)) + q36.xyz;
    r0.xyzw = (depth30.x <= 0.0 ? 0 : r1.xyzw);
    OUT.color_0.a = r0.w;
    OUT.color_0.rgb = r0.xyz;

    return OUT;
};

// approximately 84 instruction slots used (4 texture, 80 arithmetic)
