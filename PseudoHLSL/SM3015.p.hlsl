//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SM3015.pso /Fcshaderdump19/SM3015.pso.dis
//
//
// Parameters:
//
float4 AmbientColor : register(c0);
sampler2D BaseMap : register(s0);
float3 EyePosition : register(c1);
float4 LightData[20];
float3 MatAlpha : register(c3);
sampler2D NormalMap : register(s1);
sampler2D ShadowMap : register(s2);
sampler2D ShadowMask : register(s3);
float4 ToggleADTS : register(c5);
float4 ToggleNumLights : register(c6);
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    const_0       1
//   EyePosition     const_1       1
//   MatAlpha        const_3       1
//   ToggleADTS      const_5       1
//   ToggleNumLights const_6       1
//   LightData[0]       const_9         1
//   LightData[1]       const_10         1
//   LightData[2]       const_11         1
//   LightData[3]       const_12         1
//   LightData[4]       const_13         1
//   LightData[5]       const_14         1
//   LightData[6]       const_15         1
//   LightData[7]       const_16         1
//   LightData[8]       const_17        1
//   LightData[9]       const_18        1
//   LightData[10]       const_19        1
//   LightData[11]       const_20        1
//   LightData[12]       const_21        1
//   LightData[13]       const_22        1
//   LightData[14]       const_23        1
//   LightData[15]       const_24        1
//   LightData[16]       const_25       1
//   LightData[17]       const_26       1
//   LightData[18]       const_27       1
//   LightData[19]       const_28       1
//   BaseMap         texture_0       1
//   NormalMap       texture_1       1
//   ShadowMap       texture_2       1
//   ShadowMask      texture_3       1
//


// Structures:

struct VS_OUTPUT {
    float2 BaseUV : TEXCOORD0;			// partial precision
    float3 color_0 : COLOR0;			// partial precision
    float3 texcoord_3 : TEXCOORD3_centroid;			// partial precision
    float3 texcoord_4 : TEXCOORD4_centroid;			// partial precision
    float3 texcoord_5 : TEXCOORD5_centroid;			// partial precision
    float3 texcoord_6 : TEXCOORD6_centroid;			// partial precision
    float4 texcoord_1 : TEXCOORD1;			// partial precision
    float4 texcoord_7 : TEXCOORD7_centroid;			// partial precision
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	uvtile(w)		(((w) * 0.04) - 0.02)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const int4 const_29 = {2, -10, -11, -12};
    const int4 const_30 = {2, -8, -9, -10};
    const int4 const_31 = {2, -14, -15, -16};
    const int4 const_32 = {2, -16, -17, -18};
    const int4 const_33 = {2, -18, -19, 0};
    const int4 const_34 = {2, -6, -7, -8};
    const int4 const_35 = {2, -12, -13, -14};
    const int4 const_4 = {0, 1, 10, 2};
    const int4 const_7 = {2, -2, -3, -4};
    const int4 const_8 = {2, -4, -5, -6};

    float3 eye306;
    float3 l107;
    float3 l112;
    float3 l117;
    float3 l122;
    float3 l127;
    float3 l132;
    float3 l137;
    float3 l142;
    float3 l147;
    float3 l159;
    float3 l36;
    float3 l39;
    float3 l5;
    float1 l639;
    float3 m169;
    float3 m177;
    float3 m184;
    float3 m191;
    float3 m198;
    float3 m205;
    float3 m212;
    float3 m219;
    float3 m226;
    float3 m232;
    float4 noxel1;
    float3 q10;
    float1 q11;
    float3 q13;
    float1 q14;
    float3 q16;
    float3 q168;
    float1 q17;
    float3 q19;
    float1 q20;
    float3 q22;
    float1 q23;
    float3 q25;
    float1 q26;
    float3 q28;
    float1 q29;
    float3 q31;
    float1 q32;
    float3 q34;
    float1 q35;
    float3 q4;
    float3 q53;
    float3 q58;
    float1 q6;
    float3 q63;
    float3 q68;
    float3 q73;
    float3 q78;
    float3 q8;
    float3 q83;
    float3 q88;
    float3 q97;
    float4 r0;
    float4 r1;
    float3 r10;
    float2 r12;
    float4 r2;
    float4 r3;
    float3 r4;
    float3 r5;
    float3 r6;
    float3 r7;
    float3 r8;
    float3 r9;
    float3 t2;
    float1 t3;

#define	TanSpaceProj	float3x3(r9.xyz, r8.xyz, r7.xyz)
#define	TanSpaceProj	float3x3(r9.xyz, r8.xyz, r7.xyz)

    r0.xyzw = tex2D(BaseMap, IN.BaseUV.xy);			// partial precision
    r7.xyz = normalize(IN.texcoord_5.xyz);			// partial precision
    r8.xyz = normalize(IN.texcoord_4.xyz);			// partial precision
    r9.xyz = normalize(IN.texcoord_3.xyz);			// partial precision
    eye306.xyz = mul(TanSpaceProj, EyePosition.xyz - IN.texcoord_6.xyz);
    r6.xyz = normalize(eye306.xyz);			// partial precision
    r5.xyz = const_4.xyz;
    r12.xy = (uvtile(r0.w) * r6.xy) + IN.BaseUV.xy;			// partial precision
    noxel1.xyzw = tex2D(NormalMap, r12.xy);
    r0.xyzw = expand(noxel1.xyzw);			// partial precision	// [0,1] to [-1,+1]
    r3.xyz = normalize(r0.xyz);			// partial precision
    r1.w = (ToggleNumLights.x <= 0.0 ? r5.x : r5.y);

    if (0 != r1.w) {
      t2.xyz = tex2D(ShadowMap, IN.texcoord_1.xy);			// partial precision
      l159.xyz = mul(TanSpaceProj, LightData[1].xyz);
      t3.x = tex2D(ShadowMask, IN.texcoord_1.zw);			// partial precision
      l5.xyz = pow(abs(shades(normalize(r6.xyz + l159.xyz), r3.xyz)), ToggleNumLights.z) * LightData[0].xyz;			// partial precision
      r3.w = 1;
      q4.xyz = (t3.x * (t2.xyz - 1)) + 1;			// partial precision
      r0.xyz = q4.xyz * l5.xyz;			// partial precision
      r2.xyz = q4.xyz * (shade(r3.xyz, l159.xyz) * LightData[0].xyz);			// partial precision
    }
    else {
      r3.w = 0;
      r2.xyz = 0;			// partial precision
      r0.xyz = 0;			// partial precision
    }

    q6.x = min(ToggleNumLights.y, r5.z - ToggleNumLights.x);			// partial precision
    r2.w = ((q6.x >= 0.0 ? 0 : 1) * (frac(q6.x) <= 0.0 ? 0 : 1)) + (q6.x - frac(q6.x));
    r1.w = (r2.w <= 0.0 ? 0 : 1);

    if (0 != r1.w) {
      r4.x = 2 * r3.w;
      r4.yz = r4.x - const_4.yw;
      q8.xyz = r4.x - const_4.xyw;
      r3.w = r3.w + 1;
      r10.xyz = (q8.xyz >= 0.0 ? q8.xyz : -r4.xyz);
      r1.xyzw = (r10.z <= 0.0 ? LightData[3].xyzw : (r10.y <= 0.0 ? LightData[2].xyzw : (r10.x <= 0.0 ? LightData[1].xyzw : r5.x)));
      q168.xyz = r1.xyz - IN.texcoord_6.xyz;
      m169.xyz = mul(TanSpaceProj, q168.xyz);
      q11.x = 1 - sqr(saturate(length(q168.xyz) / r1.w));			// partial precision
      l107.xyz = (r10.z <= 0.0 ? LightData[2].xyz : (r10.y <= 0.0 ? LightData[1].xyz : (r10.x <= 0.0 ? LightData[0].xyz : r5.x)));			// partial precision
      q10.xyz = l107.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m169.xyz)), r3.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q11.x * q10.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q11.x * dot(r3.xyz, normalize(m169.xyz)), 0) * l107.xyz) + r2.xyz;			// partial precision
    }


    if (1 != r2.w) {
      r10.xyz = (2 * r3.w) + const_7.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[5].xyzw : (r10.y == 0.0 ? LightData[4].xyzw : (r10.x == 0.0 ? LightData[3].xyzw : r5.x)));
      q53.xyz = r1.xyz - IN.texcoord_6.xyz;
      m177.xyz = mul(TanSpaceProj, q53.xyz);
      q14.x = 1 - sqr(saturate(length(q53.xyz) / r1.w));			// partial precision
      l112.xyz = (r10.z == 0.0 ? LightData[4].xyz : (r10.y == 0.0 ? LightData[3].xyz : (r10.x == 0.0 ? LightData[2].xyz : r5.x)));			// partial precision
      q13.xyz = l112.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m177.xyz)), r3.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q14.x * q13.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q14.x * dot(r3.xyz, normalize(m177.xyz)), 0) * l112.xyz) + r2.xyz;			// partial precision
    }


    if (2 != r2.w) {
      r10.xyz = (2 * r3.w) + const_8.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[7].xyzw : (r10.y == 0.0 ? LightData[6].xyzw : (r10.x == 0.0 ? LightData[5].xyzw : r5.x)));
      q58.xyz = r1.xyz - IN.texcoord_6.xyz;
      m184.xyz = mul(TanSpaceProj, q58.xyz);
      q17.x = 1 - sqr(saturate(length(q58.xyz) / r1.w));			// partial precision
      l117.xyz = (r10.z == 0.0 ? LightData[6].xyz : (r10.y == 0.0 ? LightData[5].xyz : (r10.x == 0.0 ? LightData[4].xyz : r5.x)));			// partial precision
      q16.xyz = l117.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m184.xyz)), r3.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q17.x * q16.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q17.x * dot(r3.xyz, normalize(m184.xyz)), 0) * l117.xyz) + r2.xyz;			// partial precision
    }


    if (3 != r2.w) {
      r10.xyz = (2 * r3.w) + const_34.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[9].xyzw : (r10.y == 0.0 ? LightData[8].xyzw : (r10.x == 0.0 ? LightData[7].xyzw : r5.x)));
      q63.xyz = r1.xyz - IN.texcoord_6.xyz;
      m191.xyz = mul(TanSpaceProj, q63.xyz);
      q20.x = 1 - sqr(saturate(length(q63.xyz) / r1.w));			// partial precision
      l122.xyz = (r10.z == 0.0 ? LightData[8].xyz : (r10.y == 0.0 ? LightData[7].xyz : (r10.x == 0.0 ? LightData[6].xyz : r5.x)));			// partial precision
      q19.xyz = l122.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m191.xyz)), r3.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q20.x * q19.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q20.x * dot(r3.xyz, normalize(m191.xyz)), 0) * l122.xyz) + r2.xyz;			// partial precision
    }


    if (4 != r2.w) {
      r10.xyz = (2 * r3.w) + const_30.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[11].xyzw : (r10.y == 0.0 ? LightData[10].xyzw : (r10.x == 0.0 ? LightData[9].xyzw : r5.x)));
      q68.xyz = r1.xyz - IN.texcoord_6.xyz;
      m198.xyz = mul(TanSpaceProj, q68.xyz);
      q23.x = 1 - sqr(saturate(length(q68.xyz) / r1.w));			// partial precision
      l127.xyz = (r10.z == 0.0 ? LightData[10].xyz : (r10.y == 0.0 ? LightData[9].xyz : (r10.x == 0.0 ? LightData[8].xyz : r5.x)));			// partial precision
      q22.xyz = l127.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m198.xyz)), r3.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q23.x * q22.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q23.x * dot(r3.xyz, normalize(m198.xyz)), 0) * l127.xyz) + r2.xyz;			// partial precision
    }


    if (5 != r2.w) {
      r10.xyz = (2 * r3.w) + const_29.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[13].xyzw : (r10.y == 0.0 ? LightData[12].xyzw : (r10.x == 0.0 ? LightData[11].xyzw : r5.x)));
      q73.xyz = r1.xyz - IN.texcoord_6.xyz;
      m205.xyz = mul(TanSpaceProj, q73.xyz);
      q26.x = 1 - sqr(saturate(length(q73.xyz) / r1.w));			// partial precision
      l132.xyz = (r10.z == 0.0 ? LightData[12].xyz : (r10.y == 0.0 ? LightData[11].xyz : (r10.x == 0.0 ? LightData[10].xyz : r5.x)));			// partial precision
      q25.xyz = l132.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m205.xyz)), r3.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q26.x * q25.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q26.x * dot(r3.xyz, normalize(m205.xyz)), 0) * l132.xyz) + r2.xyz;			// partial precision
    }


    if (6 != r2.w) {
      r10.xyz = (2 * r3.w) + const_35.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[15].xyzw : (r10.y == 0.0 ? LightData[14].xyzw : (r10.x == 0.0 ? LightData[13].xyzw : r5.x)));
      q78.xyz = r1.xyz - IN.texcoord_6.xyz;
      m212.xyz = mul(TanSpaceProj, q78.xyz);
      q29.x = 1 - sqr(saturate(length(q78.xyz) / r1.w));			// partial precision
      l137.xyz = (r10.z == 0.0 ? LightData[14].xyz : (r10.y == 0.0 ? LightData[13].xyz : (r10.x == 0.0 ? LightData[12].xyz : r5.x)));			// partial precision
      q28.xyz = l137.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m212.xyz)), r3.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q29.x * q28.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q29.x * dot(r3.xyz, normalize(m212.xyz)), 0) * l137.xyz) + r2.xyz;			// partial precision
    }


    if (7 != r2.w) {
      r10.xyz = (2 * r3.w) + const_31.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[17].xyzw : (r10.y == 0.0 ? LightData[16].xyzw : (r10.x == 0.0 ? LightData[15].xyzw : r5.x)));
      q83.xyz = r1.xyz - IN.texcoord_6.xyz;
      m219.xyz = mul(TanSpaceProj, q83.xyz);
      q32.x = 1 - sqr(saturate(length(q83.xyz) / r1.w));			// partial precision
      l142.xyz = (r10.z == 0.0 ? LightData[16].xyz : (r10.y == 0.0 ? LightData[15].xyz : (r10.x == 0.0 ? LightData[14].xyz : r5.x)));			// partial precision
      q31.xyz = l142.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m219.xyz)), r3.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q32.x * q31.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q32.x * dot(r3.xyz, normalize(m219.xyz)), 0) * l142.xyz) + r2.xyz;			// partial precision
    }


    if (8 != r2.w) {
      r10.xyz = (2 * r3.w) + const_32.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[19].xyzw : (r10.y == 0.0 ? LightData[18].xyzw : (r10.x == 0.0 ? LightData[17].xyzw : r5.x)));
      q88.xyz = r1.xyz - IN.texcoord_6.xyz;
      m226.xyz = mul(TanSpaceProj, q88.xyz);
      q35.x = 1 - sqr(saturate(length(q88.xyz) / r1.w));			// partial precision
      l147.xyz = (r10.z == 0.0 ? LightData[18].xyz : (r10.y == 0.0 ? LightData[17].xyz : (r10.x == 0.0 ? LightData[16].xyz : r5.x)));			// partial precision
      q34.xyz = l147.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m226.xyz)), r3.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q35.x * q34.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q35.x * dot(r3.xyz, normalize(m226.xyz)), 0) * l147.xyz) + r2.xyz;			// partial precision
    }


    if (9 != r2.w) {
      l36.xyz = LightData[19].xyz - IN.texcoord_6.xyz;
      m232.xyz = mul(TanSpaceProj, l36.xyz);
      r6.xyz = r6.xyz + normalize(m232.xyz);			// partial precision
      r1.xyz = normalize(r6.xyz);			// partial precision
      l639.x = 1 - sqr(saturate(length(l36.xyz) / LightData[19].w));			// partial precision
      r6.xy = (2 * r3.w) + const_33.yz;
      l39.xyz = (r6.y == 0.0 ? LightData[19].xyz : (r6.x == 0.0 ? LightData[18].xyz : r5.x));			// partial precision
      r2.xyz = (max(l639.x * dot(r3.xyz, normalize(m232.xyz)), 0) * l39.xyz) + r2.xyz;			// partial precision
      r0.xyz = (l639.x * (pow(abs(shades(r1.xyz, r3.xyz)), ToggleNumLights.z) * l39.xyz)) + r0.xyz;			// partial precision
    }

    r1.xyz = r2.xyz + ((ToggleADTS.x * AmbientColor.rgb) + (ToggleADTS.x + 1));			// partial precision
    r2.xyz = r0.w * r0.xyz;			// partial precision
    r0.xyzw = tex2D(BaseMap, r12.xy);			// partial precision
    q97.xyz = ((r0.xyz * IN.color_0.rgb) * r1.xyz) + r2.xyz;			// partial precision
    OUT.color_0.a = MatAlpha.x;			// partial precision
    OUT.color_0.rgb = (IN.texcoord_7.w * (IN.texcoord_7.xyz - q97.xyz)) + q97.xyz;			// partial precision

    return OUT;
};

// approximately 444 instruction slots used (5 texture, 439 arithmetic)
