//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SM3024.pso /Fcshaderdump19/SM3024.pso.dis
//
//
// Parameters:
//
sampler2D DecalMap : register(s1);
float4 PSDecalOffsets[8];
float4 PSNumDecals : register(c6);
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   PSNumDecals    const_6       1
//   PSDecalOffsets[0] const_9        1
//   PSDecalOffsets[1] const_10        1
//   PSDecalOffsets[2] const_11        1
//   PSDecalOffsets[3] const_12        1
//   PSDecalOffsets[4] const_13        1
//   PSDecalOffsets[5] const_14        1
//   PSDecalOffsets[6] const_15        1
//   PSDecalOffsets[7] const_16        1
//   DecalMap       texture_1       1
//


// Structures:

struct VS_OUTPUT {
    float3 DecalUV_0 : TEXCOORD0;
    float3 DecalUV_1 : TEXCOORD1;
    float3 DecalUV_2 : TEXCOORD2;
    float3 DecalUV_3 : TEXCOORD3;
    float3 DecalUV_4 : TEXCOORD4;
    float3 DecalUV_5 : TEXCOORD5;
    float3 DecalUV_6 : TEXCOORD6;
    float3 DecalUV_7 : TEXCOORD7;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    float1 q0;
    float1 q2;
    float1 q3;
    float1 q4;
    float1 q5;
    float1 q6;
    float1 q7;
    float1 q8;
    float4 r0;
    float4 r1;
    float4 r2;

    r0.xyzw = tex2D(DecalMap, (PSDecalOffsets[0].yw * saturate(IN.DecalUV_0.xy)) + PSDecalOffsets[0].xz);			// partial precision
    q0.x = min(PSNumDecals.x, 8);			// partial precision
    r2.w = ((q0.x >= 0.0 ? 0 : 1) * (frac(q0.x) <= 0.0 ? 0 : 1)) + (q0.x - frac(q0.x));
    r1.w = (r2.w <= 0.0 ? 0 : 1);			// partial precision

    if (0 != r1.w) {
      r1.w = r0.w * IN.DecalUV_0.z;			// partial precision
      r1.xyz = r0.xyz * r1.w;			// partial precision
    }
    else {
      r1.xyz = 0;			// partial precision
      r1.w = 0;			// partial precision
    }

    r0.xyzw = tex2D(DecalMap, (PSDecalOffsets[1].yw * saturate(IN.DecalUV_1.xy)) + PSDecalOffsets[1].xz);			// partial precision

    if (1 != r2.w) {
      q2.x = r0.w * IN.DecalUV_1.z;			// partial precision
      r1.w = r1.w + q2.x;			// partial precision
      r1.xyz = (q2.x * (r0.xyz - r1.xyz)) + r1.xyz;			// partial precision
    }

    r0.xyzw = tex2D(DecalMap, (PSDecalOffsets[2].yw * saturate(IN.DecalUV_2.xy)) + PSDecalOffsets[2].xz);			// partial precision

    if (2 != r2.w) {
      q3.x = r0.w * IN.DecalUV_2.z;			// partial precision
      r1.w = r1.w + q3.x;			// partial precision
      r1.xyz = (q3.x * (r0.xyz - r1.xyz)) + r1.xyz;			// partial precision
    }

    r0.xyzw = tex2D(DecalMap, (PSDecalOffsets[3].yw * saturate(IN.DecalUV_3.xy)) + PSDecalOffsets[3].xz);			// partial precision

    if (3 != r2.w) {
      q4.x = r0.w * IN.DecalUV_3.z;			// partial precision
      r1.w = r1.w + q4.x;			// partial precision
      r1.xyz = (q4.x * (r0.xyz - r1.xyz)) + r1.xyz;			// partial precision
    }

    r0.xyzw = tex2D(DecalMap, (PSDecalOffsets[4].yw * saturate(IN.DecalUV_4.xy)) + PSDecalOffsets[4].xz);			// partial precision

    if (4 != r2.w) {
      q5.x = r0.w * IN.DecalUV_4.z;			// partial precision
      r1.w = r1.w + q5.x;			// partial precision
      r1.xyz = (q5.x * (r0.xyz - r1.xyz)) + r1.xyz;			// partial precision
    }

    r0.xyzw = tex2D(DecalMap, (PSDecalOffsets[5].yw * saturate(IN.DecalUV_5.xy)) + PSDecalOffsets[5].xz);			// partial precision

    if (5 != r2.w) {
      q6.x = r0.w * IN.DecalUV_5.z;			// partial precision
      r1.w = r1.w + q6.x;			// partial precision
      r1.xyz = (q6.x * (r0.xyz - r1.xyz)) + r1.xyz;			// partial precision
    }

    r0.xyzw = tex2D(DecalMap, (PSDecalOffsets[6].yw * saturate(IN.DecalUV_6.xy)) + PSDecalOffsets[6].xz);			// partial precision

    if (6 != r2.w) {
      q7.x = r0.w * IN.DecalUV_6.z;			// partial precision
      r1.w = r1.w + q7.x;			// partial precision
      r1.xyz = (q7.x * (r0.xyz - r1.xyz)) + r1.xyz;			// partial precision
    }

    r0.xyzw = tex2D(DecalMap, (PSDecalOffsets[7].yw * saturate(IN.DecalUV_7.xy)) + PSDecalOffsets[7].xz);			// partial precision

    if (7 != r2.w) {
      q8.x = r0.w * IN.DecalUV_7.z;			// partial precision
      OUT.color_0.a = saturate(r1.w + q8.x);			// partial precision
      OUT.color_0.rgb = (q8.x * (r0.xyz - r1.xyz)) + r1.xyz;			// partial precision
    }
    else {
      OUT.color_0.a = saturate(r1.w);			// partial precision
      OUT.color_0.rgb = r1.xyz;			// partial precision
    }


    return OUT;
};

// approximately 87 instruction slots used (8 texture, 79 arithmetic)
