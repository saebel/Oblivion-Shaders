//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   psa shaderdump19/WATERHMAP005.pso /Fcshaderdump19/WATERHMAP005.pso.dis
//
//
// Parameters:
//
sampler2D amplitudeSamp : register(s0);
int fResolution : register(c2);
//
//
// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   fResolution   const_2       1
//   amplitudeSamp texture_0       1
//


// Structures:

struct VS_OUTPUT {
    float2 texcoord_0 : TEXCOORD0;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)

    const int4 const_1 = {-1, 1, 0, 0};

    float1 q0;
    float1 q1;
    float1 q3;
    float4 r0;
    float4 r1;
    float4 r2;
    float4 r3;
    float4 r4;
    float4 r5;
    float4 r6;
    float4 r7;

    r2.xyzw = tex2D(amplitudeSamp, IN.texcoord_0.xy + fResolution.x);
    r4.xy = IN.texcoord_0.xy - fResolution.x;
    r5.x = r4.x;
    r1.y = r4.y;
    r4.xyzw = tex2D(amplitudeSamp, r4.xy);
    q0.x = abs(r4.x) * 0.8;
    r6.xy = IN.texcoord_0.xy - (fResolution.x * const_1.xy);
    r7.x = r6.x;
    r6.xyzw = tex2D(amplitudeSamp, r6.xy);
    r7.y = IN.texcoord_0.y;
    r7.xyzw = tex2D(amplitudeSamp, r7.xy);
    r5.y = IN.texcoord_0.y;
    r5.xyzw = tex2D(amplitudeSamp, r5.xy);
    r1.x = IN.texcoord_0.x;
    r1.xyzw = tex2D(amplitudeSamp, r1.xy);
    r0.x = IN.texcoord_0.x;
    r3.xy = (fResolution.x * const_1.xy) + IN.texcoord_0.xy;
    r0.y = r3.y;
    r3.xyzw = tex2D(amplitudeSamp, r3.xy);
    r0.xyzw = tex2D(amplitudeSamp, r0.xy);
    q1.x = abs(r3.x);
    r0.z = 1;
    q3.x = (abs(r7.x) * 1.6) + ((abs(r6.x) * 0.8) + (((abs(r5.x) * -1.6) - q0.x) - (q1.x * 0.8)));
    r0.y = (abs(r2.x) * 0.8) + ((abs(r0.x) * 1.6) + ((q1.x * 0.8) + (((abs(r1.x) * -1.6) - q0.x) - (abs(r6.x) * 0.8))));
    r0.x = -((abs(r2.x) * 0.8) + q3.x);
    r0.z = 1.0 / length(r0.xyz);
    r0.xy = r0.xy * r0.z;
    OUT.color_0.a = 1;
    OUT.color_0.rgb = compress(r0.xyz);

    return OUT;
};

// approximately 48 instruction slots used (8 texture, 40 arithmetic)
