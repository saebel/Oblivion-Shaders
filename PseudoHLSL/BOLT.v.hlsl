//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/BOLT.vso /Fcshaderdump19/BOLT.vso.dis
//
//
// Parameters:
//
row_major float4x4 ModelViewProj : register(c0);
float4 SegmentData[2] : register(c14);
float4 fVars0 : register(c4);
float4 fVars1 : register(c5);
float4 fVars2 : register(c6);
//
//
// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   ModelViewProj[0] const_0        1
//   ModelViewProj[1] const_1        1
//   ModelViewProj[2] const_2        1
//   ModelViewProj[3] const_3        1
//   fVars0        const_4       1
//   fVars1        const_5       1
//   fVars2        const_6       1
//   SegmentData[0]   const_14       1
//   SegmentData[1]   const_15       1
//


// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float4 color_1 : COLOR1;
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
    float4 position : POSITION;
    float2 texcoord_0 : TEXCOORD0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const int4 const_7 = {-1, 1, 0, -2};

    float1 m4;
    float2 mdl100;
    float2 mdl102;
    float2 mdl104;
    float1 q0;
    float4 q1;
    float1 q10;
    float1 q11;
    float1 q12;
    float1 q13;
    float1 q14;
    float1 q15;
    float1 q16;
    float4 q2;
    float4 q3;
    float2 q32;
    float2 q33;
    float2 q36;
    float1 q5;
    float1 q7;
    float1 q9;
    float2 r1;
    float3 r3;

    q5.x = fVars0.z - exp2(fVars0.z);
    r3.xyz = const_7.xyz;
    q7.x = IN.color_1.r / q5.x;
    q0.x = IN.color_1.r - (IN.color_1.r >= fVars0.y ? fVars0.y : 0);
    q3.xyzw = (SegmentData[1 + q0.x].xyzx * r3.yyyz) + r3.zzzy;
    mdl100.xy = mul(float2x4(ModelViewProj[0].xyzw, ModelViewProj[1].xyzw), q3.xyzw);
    q1.xyzw = (SegmentData[0 + q0.x].xyzx * r3.yyyz) + r3.zzzy;
    q11.x = r3.x + fVars1.y;
    mdl104.xy = mul(float2x4(ModelViewProj[0].xyzw, ModelViewProj[1].xyzw), q1.xyzw);
    q32.xy = normalize(mdl100.xy - mdl104.xy);
    q10.x = (q7.x == 0 ? exp2(abs(q7.x)) : -exp2(abs(q7.x)));
    q12.x = (q10.x * q5.x) - exp2(q5.x * q10.x);
    q13.x = (q12.x < fVars1.x ? 1.0 : 0.0);
    q14.x = 1 - (q12.x >= q11.x ? q13.x : 0);
    q15.x = q14.x - (((q12.x * fVars2.x) >= q11.x ? 1.0 : 0.0) * q14.x);
    q16.x = q15.x - ((r3.z < fVars2.x ? q13.x : 0) * q15.x);
    OUT.color_0.rgb = 1;
    OUT.color_0.a = (q16.x - (q12.x >= q5.x ? q16.x : 0)) * fVars2.y;
    q2.xyzw = (SegmentData[0 + (q0.x - 1)].xyzx * r3.yyyz) + r3.zzzy;
    mdl102.xy = mul(float2x4(ModelViewProj[0].xyzw, ModelViewProj[1].xyzw), q2.xyzw);
    q33.xy = normalize(mdl102.xy - mdl104.xy) + q32.xy;
    m4.x = determinant(float2x2(q33.xy, q32.xy));
    q36.xy = q33.xy - (2 * (m4.x < 0 ? q33.xy : 0));
    r1.xy = sqr(q36.xy);
    q9.x = ((((IN.color_1.r / q5.x) - exp2(q7.x)) * fVars1.w) + fVars1.z) * IN.position.x;
    OUT.position.zw = mul(float2x4(ModelViewProj[2].xyzw, ModelViewProj[3].xyzw), q1.xyzw);
    OUT.position.xy = (q9.x * (q36.xy / sqrt(r1.y + r1.x))) + mdl104.xy;
    OUT.texcoord_0.xy = IN.position.xy;

    return OUT;
};

// approximately 73 instruction slots used
