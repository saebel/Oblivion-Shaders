//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   psa shaderdump19/SM3LL004.pso /Fcshaderdump19/SM3LL004.pso.dis
//
//
// Parameters:
//
float4 AmbientColor : register(c0);
sampler2D BaseMap : register(s0);
float3 EyePosition : register(c1);
float4 LightData[8] : register(c9);
float3 MatAlpha : register(c3);
sampler2D NormalMap : register(s1);
float4 ToggleADTS : register(c5);
float4 ToggleNumLights : register(c6);
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    const_0       1
//   EyePosition     const_1       1
//   MatAlpha        const_3       1
//   ToggleADTS      const_5       1
//   ToggleNumLights const_6       1
//   LightData[0]       const_9        1
//   LightData[1]       const_10        1
//   LightData[2]       const_11        1
//   LightData[3]       const_12        1
//   LightData[4]       const_13        1
//   LightData[5]       const_14        1
//   LightData[6]       const_15        1
//   LightData[7]       const_16        1
//   BaseMap         texture_0       1
//   NormalMap       texture_1       1
//


// Structures:

struct VS_OUTPUT {
    float2 BaseUV : TEXCOORD0;			// partial precision
    float3 color_0 : COLOR0;			// partial precision
    float3 texcoord_3 : TEXCOORD3_centroid;			// partial precision
    float3 texcoord_4 : TEXCOORD4_centroid;			// partial precision
    float3 texcoord_5 : TEXCOORD5_centroid;			// partial precision
    float3 texcoord_6 : TEXCOORD6_centroid;			// partial precision
    float4 texcoord_7 : TEXCOORD7_centroid;			// partial precision
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	uvtile(w)		(((w) * 0.04) - 0.02)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const int4 const_17 = {2, -2, -3, -4};
    const int4 const_4 = {1, 4, 0, 2};
    const int4 const_7 = {2, -6, -7, 0};
    const int4 const_8 = {2, -4, -5, -6};

    float3 l10;
    float3 l18;
    float3 l19;
    float3 l21;
    float3 m47;
    float3 m50;
    float3 m54;
    float3 m57;
    float1 q1;
    float3 q12;
    float3 q3;
    float3 q4;
    float1 q5;
    float3 q6;
    float1 q7;
    float3 q8;
    float1 q9;
    float4 r0;
    float4 r1;
    float2 r10;
    float4 r2;
    float4 r3;
    float3 r4;
    float3 r5;
    float3 r6;
    float2 r9;

#define	TanSpaceProj	float3x3(r6.xyz, r5.xyz, r4.xyz)

    r0.xyzw = tex2D(BaseMap, IN.BaseUV.xy);			// partial precision
    r4.xyz = normalize(IN.texcoord_5.xyz);			// partial precision
    r5.xyz = normalize(IN.texcoord_4.xyz);			// partial precision
    r6.xyz = normalize(IN.texcoord_3.xyz);			// partial precision
    r0.xyz = mul(TanSpaceProj, EyePosition.xyz - IN.texcoord_6.xyz);
    r1.z = dot(r4.xyz, LightData[1].xyz);			// partial precision
    r9.xy = const_4.xy;
    q1.x = min(ToggleNumLights.y, r9.y - ToggleNumLights.x);			// partial precision
    r2.w = 0;
    r10.xy = (uvtile(r0.w) * (r0.xy / length(r0.xyz))) + IN.BaseUV.xy;			// partial precision
    r0.xyzw = tex2D(NormalMap, r10.xy);
    r2.xyz = normalize(expand(r0.xyz));			// partial precision
    r1.x = dot(r6.xyz, LightData[1].xyz);			// partial precision
    r1.y = dot(r5.xyz, LightData[1].xyz);			// partial precision
    r0.xyz = shade(r2.xyz, r1.xyz) * LightData[0].xyz;			// partial precision
    r0.w = 1;
    r3.w = (q1.x >= 0.0 ? 0 : (frac(q1.x) <= 0.0 ? 0 : 1)) + (q1.x - frac(q1.x));
    r1.w = (r3.w <= 0.0 ? 0 : 1);
    r0.xyzw = (ToggleNumLights.x <= 0.0 ? r2.w : r0.xyzw);

    if (0 != r1.w) {
      r3.x = 2 * r0.w;
      r3.yz = r3.x - const_4.xw;
      q3.xyz = r3.x - const_4.zxw;
      r0.w = r0.w + 1;
      r3.xyz = (q3.xyz >= 0.0 ? q3.xyz : -r3.xyz);
      r1.xyzw = (r3.z <= 0.0 ? LightData[3].xyzw : (r3.y <= 0.0 ? LightData[2].xyzw : (r3.x <= 0.0 ? LightData[1].xyzw : r2.w)));
      q4.xyz = r1.xyz - IN.texcoord_6.xyz;
      q5.x = saturate(length(q4.xyz) / r1.w);
      m47.xyz = mul(TanSpaceProj, q4.xyz);
      l18.xyz = (r3.z <= 0.0 ? LightData[2].xyz : (r3.y <= 0.0 ? LightData[1].xyz : (r3.x <= 0.0 ? LightData[0].xyz : r2.w)));			// partial precision
      r0.xyz = (max(dot(r2.xyz, normalize(m47.xyz)) * (1.0 - sqr(q5.x)), 0) * l18.xyz) + r0.xyz;			// partial precision
    }


    if (1 != r3.w) {
      r3.xyz = (2 * r0.w) + const_17.yzw;
      r1.xyzw = (r3.z == 0.0 ? LightData[5].xyzw : (r3.y == 0.0 ? LightData[4].xyzw : (r3.x == 0.0 ? LightData[3].xyzw : r2.w)));
      q6.xyz = r1.xyz - IN.texcoord_6.xyz;
      q7.x = saturate(length(q6.xyz) / r1.w);
      r1.w = r0.w + 1;
      m50.xyz = mul(TanSpaceProj, q6.xyz);
      l19.xyz = (r3.z == 0.0 ? LightData[4].xyz : (r3.y == 0.0 ? LightData[3].xyz : (r3.x == 0.0 ? LightData[2].xyz : r2.w)));			// partial precision
      r3.xyz = (max(dot(r2.xyz, normalize(m50.xyz)) * (1.0 - sqr(q7.x)), 0) * l19.xyz) + r0.xyz;			// partial precision
    }
    else {
      r3.xyz = r0.xyz;			// partial precision
      r1.w = r0.w;
    }


    if (2 != r3.w) {
      r1.xyz = (2 * r1.w) + const_8.yzw;
      r1.w = r1.w + 1;
      r0.xyzw = (r1.z == 0.0 ? LightData[7].xyzw : (r1.y == 0.0 ? LightData[6].xyzw : (r1.x == 0.0 ? LightData[5].xyzw : r2.w)));
      q8.xyz = r0.xyz - IN.texcoord_6.xyz;
      q9.x = saturate(length(q8.xyz) / r0.w);
      m54.xyz = mul(TanSpaceProj, q8.xyz);
      l21.xyz = (r1.z == 0.0 ? LightData[6].xyz : (r1.y == 0.0 ? LightData[5].xyz : (r1.x == 0.0 ? LightData[4].xyz : r2.w)));			// partial precision
      r3.xyz = (max(dot(r2.xyz, normalize(m54.xyz)) * (1.0 - sqr(q9.x)), 0) * l21.xyz) + r3.xyz;			// partial precision
    }


    if (3 != r3.w) {
      l10.xyz = LightData[7].xyz - IN.texcoord_6.xyz;
      m57.xyz = mul(TanSpaceProj, l10.xyz);
      r1.xy = (2 * r1.w) + const_7.yz;
      r3.xyz = (max(dot(r2.xyz, normalize(m57.xyz)) * (1.0 - sqr(saturate(length(l10.xyz) / LightData[7].w))), 0) * (r1.y == 0.0 ? LightData[7].xyz : (r1.x == 0.0 ? LightData[6].xyz : r2.w))) + r3.xyz;			// partial precision
    }

    r0.xyzw = tex2D(BaseMap, r10.xy);			// partial precision
    q12.xyz = (r0.xyz * IN.color_0.rgb) * (r3.xyz + ((ToggleADTS.x * AmbientColor.rgb) + (r9.x - ToggleADTS.x)));			// partial precision
    OUT.color_0.a = MatAlpha.x;			// partial precision
    OUT.color_0.rgb = (IN.texcoord_7.w * (IN.texcoord_7.xyz - q12.xyz)) + q12.xyz;			// partial precision

    return OUT;
};

// approximately 162 instruction slots used (3 texture, 159 arithmetic)
