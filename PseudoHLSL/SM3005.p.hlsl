//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SM3005.pso /Fcshaderdump19/SM3005.pso.dis
//
//
// Parameters:

float4 AmbientColor;
sampler2D BaseMap;
float3 EyePosition;
float4 LightData[20];
float3 MatAlpha;
sampler2D NormalMap;
float4 ToggleADTS;
float4 ToggleNumLights;


// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    const_0       1
//   EyePosition     const_1       1
//   MatAlpha        const_3       1
//   ToggleADTS      const_5       1
//   ToggleNumLights const_6       1
//   LightData[0]       const_9         1
//   LightData[1]       const_10         1
//   LightData[2]       const_11         1
//   LightData[3]       const_12         1
//   LightData[4]       const_13         1
//   LightData[5]       const_14         1
//   LightData[6]       const_15         1
//   LightData[7]       const_16         1
//   LightData[8]       const_17        1
//   LightData[9]       const_18        1
//   LightData[10]       const_19        1
//   LightData[11]       const_20        1
//   LightData[12]       const_21        1
//   LightData[13]       const_22        1
//   LightData[14]       const_23        1
//   LightData[15]       const_24        1
//   LightData[16]       const_25       1
//   LightData[17]       const_26       1
//   LightData[18]       const_27       1
//   LightData[19]       const_28       1
//   BaseMap         texture_0       1
//   NormalMap       texture_1       1
//



// Structures:

struct VS_OUTPUT {
    float2 texcoord_0 : TEXCOORD0;			// partial precision
    float3 color_0 : COLOR0;			// partial precision
    float3 input_2 : TEXCOORD3_centroid;			// partial precision
    float3 input_3 : TEXCOORD4_centroid;			// partial precision
    float3 input_4 : TEXCOORD5_centroid;			// partial precision
    float3 input_5 : TEXCOORD6_centroid;			// partial precision
    float4 input_6 : TEXCOORD7_centroid;			// partial precision
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    const float4 const_2 = {0.04, -0.02, -0.5, 0};
    const int4 const_4 = {0, 1, 10, 2};
    const int4 const_7 = {2, -2, -3, -4};
    const int4 const_8 = {2, -4, -5, -6};
    const int4 const_29 = {2, -6, -7, -8};
    const int4 const_30 = {2, -10, -11, -12};
    const int4 const_31 = {2, -16, -17, -18};
    const int4 const_32 = {2, -18, -19, 0};
    const int4 const_33 = {2, -8, -9, -10};
    const int4 const_34 = {2, -12, -13, -14};
    const int4 const_35 = {2, -14, -15, -16};

    float4 r0;
    float4 r1;
    float3 r10;
    float3 r11;
    float2 r12;
    float4 r2;
    float4 r3;
    float4 r4;
    float3 r5;
    float3 r6;
    float3 r7;
    float3 r8;
    float3 r9;

    r0.xyzw = tex2D(BaseMap, IN.texcoord_0.xy);			// partial precision
    r1.xyz = EyePosition.xyz - IN.input_5.xyz;			// partial precision
    r9.xyz = normalize(IN.input_2.xyz);			// partial precision
    r0.x = dot(r9.xyz, r1.xyz);			// partial precision
    r8.xyz = normalize(IN.input_3.xyz);			// partial precision
    r0.y = dot(r8.xyz, r1.xyz);			// partial precision
    r7.xyz = normalize(IN.input_4.xyz);			// partial precision
    r0.z = dot(r7.xyz, r1.xyz);			// partial precision
    r6.xyz = normalize(r0.xyz);			// partial precision
    r12.xy = (((r0.w * 0.04) - 0.02) * r6.xy) + IN.texcoord_0.xy;			// partial precision
    r3.xyz = const_4.xyz;
    r1.w = (ToggleNumLights.x <= 0.0 ? r3.y : r3.x);
    r0.xyzw = 2 * ((tex2D(NormalMap, r12.xy)) - 0.5);			// partial precision	// [0,1] to [-1,+1]
    r4.xyz = normalize(r0.xyz);			// partial precision

    if (0 != r1.w) {
      r0.x = dot(r9.xyz, LightData[1].xyz);			// partial precision
      r0.y = dot(r8.xyz, LightData[1].xyz);			// partial precision
      r0.z = dot(r7.xyz, LightData[1].xyz);			// partial precision
      r1.w = dot(r4.xyz, r0.xyz);			// partial precision
      r1.xyz = normalize(r6.xyz + r0.xyz);			// partial precision
      r1.z = saturate(dot(r1.xyz, r4.xyz));			// partial precision
      r0.xyz = pow(abs(r1.z), ToggleNumLights.z) * LightData[0].xyz;			// partial precision
      r2.xyz = max(r1.w, 0) * LightData[0].xyz;			// partial precision
      r3.w = 1;
    }
    else {
      r0.xyz = r1.w;			// partial precision
      r2.xyz = r1.w;			// partial precision
      r3.w = 0;
    }

    r1.x = min(ToggleNumLights.y, r3.z - ToggleNumLights.x);			// partial precision
    r1.y = frac(r1.x);			// partial precision
    r2.w = ((r1.x >= 0.0 ? 1 : 0) * (r1.y <= 0.0 ? 1 : 0)) + (r1.x - r1.y);
    r1.w = (r2.w <= 0.0 ? 1 : 0);

    if (0 != r1.w) {
      r5.x = 2 * r3.w;
      r1.xyz = r5.x - const_4.xyw;
      r5.yz = r5.x - const_4.xy;
      r10.xyz = (r1.xyz >= 0.0 ? -r5.xyz : r1.xyz);
      r1.xyzw = (r10.z <= 0.0 ? ((r10.y <= 0.0 ? (r10.x <= 0.0 ? 0 : LightData[1].xyzw) : LightData[2].xyzw)) : LightData[3].xyzw);
      r5.xyz = r1.xyz - IN.input_5.xyz;
      r11.x = dot(r9.xyz, r5.xyz);
      r11.y = dot(r8.xyz, r5.xyz);
      r11.z = dot(r7.xyz, r5.xyz);
      r1.xyz = (r10.z <= 0.0 ? ((r10.y <= 0.0 ? (r10.x <= 0.0 ? r3.x : LightData[0].xyz) : LightData[1].xyz)) : LightData[2].xyz);			// partial precision
      r10.xyz = normalize(r11.xyz);			// partial precision
      r11.xyz = r6.xyz + r10.xyz;			// partial precision
      r3.x = length(r5.xyz);
      r1.w = saturate(r3.x / r1.w);
      r3.z = 1.0 - (r1.w * r1.w);			// partial precision
      r4.w = saturate(dot(normalize(r11.xyz), r4.xyz));			// partial precision
      r5.xyz = r1.xyz * pow(abs(r4.w), ToggleNumLights.z);			// partial precision
      r0.xyz = (r3.z * r5.xyz) + r0.xyz;			// partial precision
      r3.z = r3.z * dot(r4.xyz, r10.xyz);			// partial precision
      r1.w = max(r3.z, 0);			// partial precision
      r2.xyz = (r1.w * r1.xyz) + r2.xyz;			// partial precision
      r3.w = r3.w + 1;
    }


    if (1 != r2.w) {
      r10.xyz = (2 * r3.w) + const_7.yzw;
      r1.xyzw = (r10.z == 0.0 ? LightData[5].xyzw : ((r10.y == 0.0 ? LightData[4].xyzw : (r10.x == 0.0 ? LightData[3].xyzw : 0))));
      r5.xyz = r1.xyz - IN.input_5.xyz;
      r11.x = dot(r9.xyz, r5.xyz);
      r11.y = dot(r8.xyz, r5.xyz);
      r11.z = dot(r7.xyz, r5.xyz);
      r1.xyz = (r10.z == 0.0 ? LightData[4].xyz : ((r10.y == 0.0 ? LightData[3].xyz : (r10.x == 0.0 ? LightData[2].xyz : r3.x))));			// partial precision
      r10.xyz = normalize(r11.xyz);			// partial precision
      r11.xyz = r6.xyz + r10.xyz;			// partial precision
      r3.x = length(r5.xyz);
      r1.w = saturate(r3.x / r1.w);
      r3.z = 1.0 - (r1.w * r1.w);			// partial precision
      r4.w = saturate(dot(normalize(r11.xyz), r4.xyz));			// partial precision
      r5.xyz = r1.xyz * pow(abs(r4.w), ToggleNumLights.z);			// partial precision
      r0.xyz = (r3.z * r5.xyz) + r0.xyz;			// partial precision
      r3.z = r3.z * dot(r4.xyz, r10.xyz);			// partial precision
      r1.w = max(r3.z, 0);			// partial precision
      r2.xyz = (r1.w * r1.xyz) + r2.xyz;			// partial precision
      r3.w = r3.w + 1;
    }


    if (2 != r2.w) {
      r10.xyz = (2 * r3.w) + const_8.yzw;
      r1.xyzw = (r10.z == 0.0 ? LightData[7].xyzw : ((r10.y == 0.0 ? LightData[6].xyzw : (r10.x == 0.0 ? LightData[5].xyzw : 0))));
      r5.xyz = r1.xyz - IN.input_5.xyz;
      r11.x = dot(r9.xyz, r5.xyz);
      r11.y = dot(r8.xyz, r5.xyz);
      r11.z = dot(r7.xyz, r5.xyz);
      r1.xyz = (r10.z == 0.0 ? LightData[6].xyz : ((r10.y == 0.0 ? LightData[5].xyz : (r10.x == 0.0 ? LightData[4].xyz : r3.x))));			// partial precision
      r10.xyz = normalize(r11.xyz);			// partial precision
      r11.xyz = r6.xyz + r10.xyz;			// partial precision
      r3.x = length(r5.xyz);
      r1.w = saturate(r3.x / r1.w);
      r3.z = 1.0 - (r1.w * r1.w);			// partial precision
      r4.w = saturate(dot(normalize(r11.xyz), r4.xyz));			// partial precision
      r5.xyz = r1.xyz * pow(abs(r4.w), ToggleNumLights.z);			// partial precision
      r0.xyz = (r3.z * r5.xyz) + r0.xyz;			// partial precision
      r3.z = r3.z * dot(r4.xyz, r10.xyz);			// partial precision
      r1.w = max(r3.z, 0);			// partial precision
      r2.xyz = (r1.w * r1.xyz) + r2.xyz;			// partial precision
      r3.w = r3.w + 1;
    }


    if (3 != r2.w) {
      r10.xyz = (2 * r3.w) + const_29.yzw;
      r1.xyzw = (r10.z == 0.0 ? LightData[9].xyzw : ((r10.y == 0.0 ? LightData[8].xyzw : (r10.x == 0.0 ? LightData[7].xyzw : 0))));
      r5.xyz = r1.xyz - IN.input_5.xyz;
      r11.x = dot(r9.xyz, r5.xyz);
      r11.y = dot(r8.xyz, r5.xyz);
      r11.z = dot(r7.xyz, r5.xyz);
      r1.xyz = (r10.z == 0.0 ? LightData[8].xyz : ((r10.y == 0.0 ? LightData[7].xyz : (r10.x == 0.0 ? LightData[6].xyz : r3.x))));			// partial precision
      r10.xyz = normalize(r11.xyz);			// partial precision
      r11.xyz = r6.xyz + r10.xyz;			// partial precision
      r3.x = length(r5.xyz);
      r1.w = saturate(r3.x / r1.w);
      r3.z = 1.0 - (r1.w * r1.w);			// partial precision
      r4.w = saturate(dot(normalize(r11.xyz), r4.xyz));			// partial precision
      r5.xyz = r1.xyz * pow(abs(r4.w), ToggleNumLights.z);			// partial precision
      r0.xyz = (r3.z * r5.xyz) + r0.xyz;			// partial precision
      r3.z = r3.z * dot(r4.xyz, r10.xyz);			// partial precision
      r1.w = max(r3.z, 0);			// partial precision
      r2.xyz = (r1.w * r1.xyz) + r2.xyz;			// partial precision
      r3.w = r3.w + 1;
    }


    if (4 != r2.w) {
      r10.xyz = (2 * r3.w) + const_33.yzw;
      r1.xyzw = (r10.z == 0.0 ? LightData[11].xyzw : ((r10.y == 0.0 ? LightData[10].xyzw : (r10.x == 0.0 ? LightData[9].xyzw : 0))));
      r5.xyz = r1.xyz - IN.input_5.xyz;
      r11.x = dot(r9.xyz, r5.xyz);
      r11.y = dot(r8.xyz, r5.xyz);
      r11.z = dot(r7.xyz, r5.xyz);
      r1.xyz = (r10.z == 0.0 ? LightData[10].xyz : ((r10.y == 0.0 ? LightData[9].xyz : (r10.x == 0.0 ? LightData[8].xyz : r3.x))));			// partial precision
      r10.xyz = normalize(r11.xyz);			// partial precision
      r11.xyz = r6.xyz + r10.xyz;			// partial precision
      r3.x = length(r5.xyz);
      r1.w = saturate(r3.x / r1.w);
      r3.z = 1.0 - (r1.w * r1.w);			// partial precision
      r4.w = saturate(dot(normalize(r11.xyz), r4.xyz));			// partial precision
      r5.xyz = r1.xyz * pow(abs(r4.w), ToggleNumLights.z);			// partial precision
      r0.xyz = (r3.z * r5.xyz) + r0.xyz;			// partial precision
      r3.z = r3.z * dot(r4.xyz, r10.xyz);			// partial precision
      r1.w = max(r3.z, 0);			// partial precision
      r2.xyz = (r1.w * r1.xyz) + r2.xyz;			// partial precision
      r3.w = r3.w + 1;
    }


    if (5 != r2.w) {
      r10.xyz = (2 * r3.w) + const_30.yzw;
      r1.xyzw = (r10.z == 0.0 ? LightData[13].xyzw : ((r10.y == 0.0 ? LightData[12].xyzw : (r10.x == 0.0 ? LightData[11].xyzw : 0))));
      r5.xyz = r1.xyz - IN.input_5.xyz;
      r11.x = dot(r9.xyz, r5.xyz);
      r11.y = dot(r8.xyz, r5.xyz);
      r11.z = dot(r7.xyz, r5.xyz);
      r1.xyz = (r10.z == 0.0 ? LightData[12].xyz : ((r10.y == 0.0 ? LightData[11].xyz : (r10.x == 0.0 ? LightData[10].xyz : r3.x))));			// partial precision
      r10.xyz = normalize(r11.xyz);			// partial precision
      r11.xyz = r6.xyz + r10.xyz;			// partial precision
      r3.x = length(r5.xyz);
      r1.w = saturate(r3.x / r1.w);
      r3.z = 1.0 - (r1.w * r1.w);			// partial precision
      r4.w = saturate(dot(normalize(r11.xyz), r4.xyz));			// partial precision
      r5.xyz = r1.xyz * pow(abs(r4.w), ToggleNumLights.z);			// partial precision
      r0.xyz = (r3.z * r5.xyz) + r0.xyz;			// partial precision
      r3.z = r3.z * dot(r4.xyz, r10.xyz);			// partial precision
      r1.w = max(r3.z, 0);			// partial precision
      r2.xyz = (r1.w * r1.xyz) + r2.xyz;			// partial precision
      r3.w = r3.w + 1;
    }


    if (6 != r2.w) {
      r10.xyz = (2 * r3.w) + const_34.yzw;
      r1.xyzw = (r10.z == 0.0 ? LightData[15].xyzw : ((r10.y == 0.0 ? LightData[14].xyzw : (r10.x == 0.0 ? LightData[13].xyzw : 0))));
      r5.xyz = r1.xyz - IN.input_5.xyz;
      r11.x = dot(r9.xyz, r5.xyz);
      r11.y = dot(r8.xyz, r5.xyz);
      r11.z = dot(r7.xyz, r5.xyz);
      r1.xyz = (r10.z == 0.0 ? LightData[14].xyz : ((r10.y == 0.0 ? LightData[13].xyz : (r10.x == 0.0 ? LightData[12].xyz : r3.x))));			// partial precision
      r10.xyz = normalize(r11.xyz);			// partial precision
      r11.xyz = r6.xyz + r10.xyz;			// partial precision
      r3.x = length(r5.xyz);
      r1.w = saturate(r3.x / r1.w);
      r3.z = 1.0 - (r1.w * r1.w);			// partial precision
      r4.w = saturate(dot(normalize(r11.xyz), r4.xyz));			// partial precision
      r5.xyz = r1.xyz * pow(abs(r4.w), ToggleNumLights.z);			// partial precision
      r0.xyz = (r3.z * r5.xyz) + r0.xyz;			// partial precision
      r3.z = r3.z * dot(r4.xyz, r10.xyz);			// partial precision
      r1.w = max(r3.z, 0);			// partial precision
      r2.xyz = (r1.w * r1.xyz) + r2.xyz;			// partial precision
      r3.w = r3.w + 1;
    }


    if (7 != r2.w) {
      r10.xyz = (2 * r3.w) + const_35.yzw;
      r1.xyzw = (r10.z == 0.0 ? LightData[17].xyzw : ((r10.y == 0.0 ? LightData[16].xyzw : (r10.x == 0.0 ? LightData[15].xyzw : 0))));
      r5.xyz = r1.xyz - IN.input_5.xyz;
      r11.x = dot(r9.xyz, r5.xyz);
      r11.y = dot(r8.xyz, r5.xyz);
      r11.z = dot(r7.xyz, r5.xyz);
      r1.xyz = (r10.z == 0.0 ? LightData[16].xyz : ((r10.y == 0.0 ? LightData[15].xyz : (r10.x == 0.0 ? LightData[14].xyz : r3.x))));			// partial precision
      r10.xyz = normalize(r11.xyz);			// partial precision
      r11.xyz = r6.xyz + r10.xyz;			// partial precision
      r3.x = length(r5.xyz);
      r1.w = saturate(r3.x / r1.w);
      r3.z = 1.0 - (r1.w * r1.w);			// partial precision
      r4.w = saturate(dot(normalize(r11.xyz), r4.xyz));			// partial precision
      r5.xyz = r1.xyz * pow(abs(r4.w), ToggleNumLights.z);			// partial precision
      r0.xyz = (r3.z * r5.xyz) + r0.xyz;			// partial precision
      r3.z = r3.z * dot(r4.xyz, r10.xyz);			// partial precision
      r1.w = max(r3.z, 0);			// partial precision
      r2.xyz = (r1.w * r1.xyz) + r2.xyz;			// partial precision
      r3.w = r3.w + 1;
    }


    if (8 != r2.w) {
      r10.xyz = (2 * r3.w) + const_31.yzw;
      r1.xyzw = (r10.z == 0.0 ? LightData[19].xyzw : ((r10.y == 0.0 ? LightData[18].xyzw : (r10.x == 0.0 ? LightData[17].xyzw : 0))));
      r5.xyz = r1.xyz - IN.input_5.xyz;
      r11.x = dot(r9.xyz, r5.xyz);
      r11.y = dot(r8.xyz, r5.xyz);
      r11.z = dot(r7.xyz, r5.xyz);
      r1.xyz = (r10.z == 0.0 ? LightData[18].xyz : ((r10.y == 0.0 ? LightData[17].xyz : (r10.x == 0.0 ? LightData[16].xyz : r3.x))));			// partial precision
      r10.xyz = normalize(r11.xyz);			// partial precision
      r11.xyz = r6.xyz + r10.xyz;			// partial precision
      r3.x = length(r5.xyz);
      r1.w = saturate(r3.x / r1.w);
      r3.z = 1.0 - (r1.w * r1.w);			// partial precision
      r4.w = saturate(dot(normalize(r11.xyz), r4.xyz));			// partial precision
      r5.xyz = r1.xyz * pow(abs(r4.w), ToggleNumLights.z);			// partial precision
      r0.xyz = (r3.z * r5.xyz) + r0.xyz;			// partial precision
      r3.z = r3.z * dot(r4.xyz, r10.xyz);			// partial precision
      r1.w = max(r3.z, 0);			// partial precision
      r2.xyz = (r1.w * r1.xyz) + r2.xyz;			// partial precision
      r3.w = r3.w + 1;
    }


    if (9 != r2.w) {
      r5.xyz = LightData[19].xyz - IN.input_5.xyz;
      r1.w = saturate(length(r5.xyz) / LightData[19].w);
      r1.x = dot(r9.xyz, r5.xyz);
      r1.y = dot(r8.xyz, r5.xyz);
      r1.z = dot(r7.xyz, r5.xyz);
      r5.xyz = normalize(r1.xyz);			// partial precision
      r6.xyz = r6.xyz + r5.xyz;			// partial precision
      r3.z = saturate(dot(normalize(r6.xyz), r4.xyz));			// partial precision
      r6.xy = (2 * r3.w) + const_32.yz;
      r1.xyz = (r6.y == 0.0 ? LightData[19].xyz : (r6.x == 0.0 ? LightData[18].xyz : 0));			// partial precision
      r2.w = 1.0 - (r1.w * r1.w);			// partial precision
      r0.xyz = (r2.w * (pow(abs(r3.z), ToggleNumLights.z) * r1.xyz)) + r0.xyz;			// partial precision
    }

    r1.xyz = ((max(r2.w * dot(r4.xyz, r5.xyz), 0) * r1.xyz) + r2.xyz) + ((ToggleADTS.x * AmbientColor.rgb) + (r3.y - ToggleADTS.x));			// partial precision
    r2.xyz = r0.w * r0.xyz;			// partial precision
    r0.xyzw = tex2D(BaseMap, r12.xy);			// partial precision
    r1.xyz = ((r0.xyz * IN.color_0.rgb) * r1.xyz) + r2.xyz;			// partial precision
    OUT.color_0.rgb = (IN.input_6.w * (IN.input_6.xyz - r1.xyz)) + r1.xyz;			// partial precision
    OUT.color_0.a = MatAlpha.x;			// partial precision

    return OUT;
};

// approximately 447 instruction slots used (3 texture, 444 arithmetic)
