//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   psa shaderdump19/WATER008.pso /Fcshaderdump19/WATER008.pso.dis
//
//
// Parameters:
//
float2 BlendRadius;
float4 DeepColor;
sampler2D DepthMap;
sampler2D DetailMap;
sampler2D DisplacementMap;
float4 EyePos;
float4 FogColor;
float4 FogParam;
float FresnelRI;
sampler2D NormalMap;
float4 ReflectionColor;
float2 Scroll;
float4 ShallowColor;
float4 SunColor;
float4 SunDir;
float4 VarAmounts;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   Scroll          const_0       1
//   EyePos          const_1       1
//   SunDir          const_2       1
//   SunColor        const_3       1
//   ShallowColor    const_5       1
//   DeepColor       const_6       1
//   ReflectionColor const_7       1
//   VarAmounts      const_8       1
//   FogParam        const_9       1
//   FogColor        const_10      1
//   FresnelRI       const_11      1
//   BlendRadius     const_12      1
//   NormalMap       texture_1       1
//   DetailMap       texture_2       1
//   DepthMap        texture_3       1
//   DisplacementMap texture_4       1
//


// Structures:

struct VS_OUTPUT {
    float3 texcoord_1 : TEXCOORD1_centroid;
    float4 texcoord_6 : TEXCOORD6;
    float4 texcoord_7 : TEXCOORD7;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const float4 const_14 = {2, -1, 0, -(1.0 / 8192)};

    float1 depth15;
    float1 eye23;
    float3 eye6;
    float3 noxel3;
    float3 q10;
    float1 q12;
    float3 q14;
    float1 q17;
    float1 q18;
    float2 q20;
    float1 q27;
    float1 q38;
    float1 q39;
    float1 q5;
    float1 q50;
    float1 q54;
    float3 q57;
    float3 q9;
    float4 r0;
    float4 r1;
    float2 r3;
    float3 t13;

    r0.xyzw = tex2D(DisplacementMap, IN.texcoord_6.xy);
    depth15.x = tex2D(DepthMap, IN.texcoord_6.zw);
    eye23.x = saturate(1 - (length(EyePos.xy - IN.texcoord_1.xy) / 8192));
    r1.xyz = expand(r0.xyz);	// [0,1] to [-1,+1]
    r3.xy = const_14.xy;
    q20.xy = IN.texcoord_7.zw + Scroll.xy;
    noxel3.xyz = tex2D(NormalMap, q20.xy);
    r0.xyz = expand(noxel3.xyz);	// [0,1] to [-1,+1]
    r0.xy = sqr(eye23.x) * r0.xy;
    eye6.xyz = EyePos.xyz - IN.texcoord_1.xyz;
    q5.x = 1 - saturate(max(0.1, (2 * length(IN.texcoord_6.xy - 0.5)) / BlendRadius.x));
    r0.xyz = normalize(lerp(r0.xyz, r1.xyz, q5.x * BlendRadius.y));
    t13.xyz = tex2D(DetailMap, (0.1 * r0.xy) + q20.xy);
    q27.x = shades(normalize(eye6.xyz), r0.xyz);
    q50.x = pow(abs(shades(reflect(-normalize(eye6.xyz), r0.xyz), SunDir.xyz)), VarAmounts.x);
    q12.x = 1 - saturate((FogParam.x - length(eye6.xyz)) / FogParam.y);
    q17.x = 1 - ((depth15.x - 0.2) / 0.35);
    q9.xyz = (q27.x * (ShallowColor.rgb - DeepColor.rgb)) + DeepColor.rgb;			// partial precision
    q54.x = ((FresnelRI.x - r3.y) * ((1 - q27.x) * sqr(sqr(1 - q27.x)))) + FresnelRI.x;
    q38.x = max(VarAmounts.z, q54.x);
    q39.x = (depth15.x >= 1 ? q38.x : (((1 - depth15.x) * (0.25 - q38.x)) + q38.x));
    q18.x = (depth15.x >= 0.2 ? (depth15.x >= 0.55 ? q39.x : (q39.x * (1 - (q17.x * sqr(q17.x))))) : 0);
    r1.w = ((BlendRadius.x - (r3.x * length(IN.texcoord_6.xy - 0.5))) >= 0.0 ? q18.x : 0);
    q10.xyz = (((VarAmounts.y - r3.y) * (ReflectionColor.rgb - q9.xyz)) + q9.xyz) * VarAmounts.y;
    q57.xyz = saturate((saturate(SunDir.w) * (q50.x * SunColor.rgb)) + ((q54.x * q10.xyz) + q9.xyz));
    q14.xyz = lerp(q57.xyz, t13.xyz, eye23.x * VarAmounts.w);
    r1.xyz = (q12.x * (FogColor.rgb - q14.xyz)) + q14.xyz;
    r0.xyzw = (depth15.x <= 0.0 ? 0 : r1.xyzw);
    OUT.color_0.a = r0.w;
    OUT.color_0.rgb = r0.xyz;

    return OUT;
};

// approximately 91 instruction slots used (4 texture, 87 arithmetic)
