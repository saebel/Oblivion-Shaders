//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2072.vso /Fcshaderdump19/SLS2072.vso.dis
//
//
// Parameters:

float4 Bones[54];
float4 EyePosition;
float3 FogColor;
float4 FogParam;
row_major float4x4 SkinModelViewProj;
float UOffset;
float VOffset;


// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   SkinModelViewProj[0] const_4        1
//   SkinModelViewProj[1] const_5        1
//   SkinModelViewProj[2] const_6        1
//   SkinModelViewProj[3] const_7        1
//   EyePosition       const_8       1
//   UOffset           const_9       1
//   VOffset           const_10      1
//   FogParam          const_12      1
//   FogColor          const_13      1
//   Bones             const_14     54
//



// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
    float3 normal : NORMAL;
    float4 texcoord_0 : TEXCOORD0;
    float3 blendweight : BLENDWEIGHT;
    float4 blendindices : BLENDINDICES;
};

struct VS_OUTPUT {
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

    const float4 const_0 = {0.025, 0.0208350997, -0.0851330012, 0.180141002};
    const float4 const_1 = {-0.330299497, 0.999866009, -2, PI / 2};
    const float4 const_2 = {-PI, 0.318471342, 1, 765.01001};
    const int4 const_3 = {1, 0, 0, 0};

    OUT.color_1.rgb = FogColor.rgb;
    OUT.texcoord_0.xy = IN.texcoord_0;
    r0.xy = abs(IN.position);
    r0.w = max(r0.y, r0.x);
    r1.w = 1.0 / r0.w;
    r0.w = min(r0.y, r0.x);
    r0.w = r1.w * r0.w;
    r1.w = r0.w * r0.w;
    r1.z = 0.318471342;
    r2.w = (r1.w * 0.0208350997) + -0.0851330012;
    r2.w = (r1.w * r2.w) + 0.180141002;
    r2.w = (r1.w * r2.w) + -0.330299497;
    r1.w = (r1.w * r2.w) + 0.999866009;
    r2.w = r0.w * r1.w;
    r0.w = (r2.w * -2) + PI / 2;
    r1.w = (r0.y < r0.x ? 1.0 : 0.0);
    r1.w = (r0.w * r1.w) + r2.w;
    r2.w = 0.025;
    OUT.texcoord_1.y = (IN.position.z * r2.w) + UOffset.x;
    r0.w = (IN.position.y < -IN.position.y ? 1.0 : 0.0);
    r2.w = (r0.w * -PI) + r1.w;
    r0.w = min(IN.position.y, IN.position.x);
    r0.w = (r0.w < -r0.w ? 1.0 : 0.0);
    r1.w = max(IN.position.y, IN.position.x);
    r2.x = dot(IN.blendweight.xyz, 1.xyz);
    r3.w = (r1.w >= -r1.w ? 1.0 : 0.0);
    r0.w = r0.w * r3.w;
    r1.w = r2.w + r2.w;
    r1.w = (r0.w * -r1.w) + r2.w;
    OUT.texcoord_1.x = (r1.w * r1.z) + VOffset.x;
    r1.xyzw = (IN.blendindices.zyxw * 765.01001) - r0;
    offset.xyzw = r1.xyzw;
    r0.xyzw = IN.blendindices.zyxw * 765.01001;
    r0.xyzw = frac(r0);
    r0.xyzw = (IN.position.xyzx * const_3.xxxy) + const_3.yyyx;
    r1.w = 1 - r2.x;
    r1.x = dot(const_14[offset.y].xyzw, r0.xyzw);
    r1.y = dot(const_15[offset.y].xyzw, r0.xyzw);
    r1.z = dot(const_16[offset.y].xyzw, r0.xyzw);
    r2.xyz = r1.xyz * IN.blendweight.y;
    r1.x = dot(const_14[offset.x].xyzw, r0.xyzw);
    r1.y = dot(const_15[offset.x].xyzw, r0.xyzw);
    r1.z = dot(const_16[offset.x].xyzw, r0.xyzw);
    r2.xyz = (IN.blendweight.x * r1.xyz) + r2.xyz;
    r1.x = dot(const_14[offset.z].xyzw, r0.xyzw);
    r1.y = dot(const_15[offset.z].xyzw, r0.xyzw);
    r1.z = dot(const_16[offset.z].xyzw, r0.xyzw);
    r2.xyz = (IN.blendweight.z * r1.xyz) + r2.xyz;
    r1.x = dot(const_14[offset.w].xyzw, r0.xyzw);
    r1.y = dot(const_15[offset.w].xyzw, r0.xyzw);
    r1.z = dot(const_16[offset.w].xyzw, r0.xyzw);
    r0.w = 1;
    r0.xyz = (r1.w * r1.xyz) + r2.xyz;
    OUT.position.w = dot(SkinModelViewProj[3].xyzw, r0.xyzw);
    r1.x = dot(const_14[offset.y].xyz, IN.normal.xyz);
    r1.y = dot(const_15[offset.y].xyz, IN.normal.xyz);
    r1.z = dot(const_16[offset.y].xyz, IN.normal.xyz);
    r2.xyz = r1.xyz * IN.blendweight.y;
    r1.x = dot(const_14[offset.x].xyz, IN.normal.xyz);
    r1.y = dot(const_15[offset.x].xyz, IN.normal.xyz);
    r1.z = dot(const_16[offset.x].xyz, IN.normal.xyz);
    r2.xyz = (IN.blendweight.x * r1.xyz) + r2.xyz;
    r1.x = dot(const_14[offset.z].xyz, IN.normal.xyz);
    r1.y = dot(const_15[offset.z].xyz, IN.normal.xyz);
    r1.z = dot(const_16[offset.z].xyz, IN.normal.xyz);
    r2.xyz = (IN.blendweight.z * r1.xyz) + r2.xyz;
    r1.x = dot(const_14[offset.w].xyz, IN.normal.xyz);
    r1.y = dot(const_15[offset.w].xyz, IN.normal.xyz);
    r1.z = dot(const_16[offset.w].xyz, IN.normal.xyz);
    r1.xyz = (r1.w * r1.xyz) + r2.xyz;
    r1.y = dot(const_15[offset.y].xyz, IN.tangent.xyz);
    r1.z = dot(const_16[offset.y].xyz, IN.tangent.xyz);
    r3.xyz = normalize(r1);
    r4.xyz = EyePosition.xyz - r0.xyz;
    r1.x = dot(r3.xyz, r4.xyz);
    r2.w = (r1.x < 1 ? 1.0 : 0.0);
    r1.x = dot(const_14[offset.y].xyz, IN.tangent.xyz);
    r2.xyz = r1.xyz * IN.blendweight.y;
    r1.x = dot(const_14[offset.x].xyz, IN.tangent.xyz);
    r1.y = dot(const_15[offset.x].xyz, IN.tangent.xyz);
    r1.z = dot(const_16[offset.x].xyz, IN.tangent.xyz);
    r2.xyz = (IN.blendweight.x * r1.xyz) + r2.xyz;
    r1.x = dot(const_14[offset.z].xyz, IN.tangent.xyz);
    r1.y = dot(const_15[offset.z].xyz, IN.tangent.xyz);
    r1.z = dot(const_16[offset.z].xyz, IN.tangent.xyz);
    r5.xyz = (IN.blendweight.z * r1.xyz) + r2.xyz;
    r1.xyz = r4.xyz * r2.w;
    r4.xyz = (-2 * r1.xyz) + r4.xyz;
    r1.xyz = normalize(r2);
    r2.x = dot(const_14[offset.w].xyz, IN.tangent.xyz);
    r2.y = dot(const_15[offset.w].xyz, IN.tangent.xyz);
    r2.z = dot(const_16[offset.w].xyz, IN.tangent.xyz);
    r2.xyz = (r1.w * r2.xyz) + r5.xyz;
    r2.z = dot(r3.xyz, r4.xyz);
    r3.xyz = normalize(r2);
    OUT.texcoord_3.xyz = r3.xyz;
    r2.x = dot(r1.xyz, r4.xyz);
    r1.x = dot(const_14[offset.y].xyz, IN.binormal.xyz);
    r1.y = dot(const_15[offset.y].xyz, IN.binormal.xyz);
    r1.z = dot(const_16[offset.y].xyz, IN.binormal.xyz);
    r5.xyz = r1.xyz * IN.blendweight.y;
    r1.x = dot(const_14[offset.x].xyz, IN.binormal.xyz);
    r1.y = dot(const_15[offset.x].xyz, IN.binormal.xyz);
    r1.z = dot(const_16[offset.x].xyz, IN.binormal.xyz);
    r5.xyz = (IN.blendweight.x * r1.xyz) + r5.xyz;
    r1.x = dot(const_14[offset.z].xyz, IN.binormal.xyz);
    r1.y = dot(const_15[offset.z].xyz, IN.binormal.xyz);
    r1.z = dot(const_16[offset.z].xyz, IN.binormal.xyz);
    r5.xyz = (IN.blendweight.z * r1.xyz) + r5.xyz;
    r1.x = dot(const_14[offset.w].xyz, IN.binormal.xyz);
    r1.y = dot(const_15[offset.w].xyz, IN.binormal.xyz);
    r1.z = dot(const_16[offset.w].xyz, IN.binormal.xyz);
    r5.xyz = (r1.w * r1.xyz) + r5.xyz;
    r1.w = 1.0 / FogParam.y;
    r1.x = dot(SkinModelViewProj[0].xyzw, r0.xyzw);
    r1.y = dot(SkinModelViewProj[1].xyzw, r0.xyzw);
    r1.z = dot(SkinModelViewProj[2].xyzw, r0.xyzw);
    OUT.position.xyz = r1.xyz;
    r5.x = dot(r1.xyz, r1.xyz);	// normalize + length
    r0.w = 1.0 / sqrt(r5.x);
    r0.w = 1.0 / r0.w;
    r0.w = FogParam.x - r0.w;
    r0.w = r0.w * r1.w;
    r0.w = max(r0.w, 0);
    r0.w = min(r0.w, 1);
    r0.xyz = normalize(r5);
    r1.w = 1 - r0.w;
    r2.y = dot(r0.xyz, r4.xyz);
    r0.z = 0;
    r0.w = (r0.z < FogParam.z ? 1.0 : 0.0);
    OUT.color_1.a = r1.w * r0.w;

    return OUT;
};

// approximately 139 instruction slots used
