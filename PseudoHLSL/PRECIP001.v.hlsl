//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/PRECIP001.vso /Fcshaderdump19/PRECIP001.vso.dis
//
//
// Parameters:

float3 CameraUp;
float3 EyePosition;
float3 MaxPos;
float3 MinPos;
float3 Params;
float3 Velocity;
row_major float4x4 WorldViewProj;


// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   WorldViewProj[0] const_0        1
//   WorldViewProj[1] const_1        1
//   WorldViewProj[2] const_2        1
//   WorldViewProj[3] const_3        1
//   EyePosition   const_8       1
//   Velocity      const_9       1
//   MinPos        const_10      1
//   MaxPos        const_11      1
//   Params        const_12      1
//   CameraUp      const_13      1
//



// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float4 texcoord_0 : TEXCOORD0;
    float4 texcoord_1 : TEXCOORD1;
};

struct VS_OUTPUT {
    float4 position : POSITION;
    float4 color_0 : COLOR0;
    float2 texcoord_0 : TEXCOORD0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	PI	3.14159274
#define	D3DSINCOSCONST1	-1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
#define	D3DSINCOSCONST2	-0.020833334, -0.125, 1, 0.5

    const float4 const_4 = {0, 1, 0.5, 0};

    float4 r0;
    float4 r1;
    float3 r2;
    float3 r3;
    float3 r4;
    float3 r5;

    r0.xyz = (0 < r0 ? 1.0 : 0.0);
    r2.xyz = MaxPos.xyz - MinPos.xyz;
    r4.x = 1.0 / r2.x;
    r4.y = 1.0 / r2.y;
    r4.z = 1.0 / r2.z;
    r3.xyz = (((Params.x * Velocity.xyz) + IN.texcoord_1.xyz) - MinPos.xyz) * r4.xyz;
    r4.xyz = (r3 >= -r3 ? 1.0 : 0.0);
    r5.xyz = frac(abs(r3));
    r3.xyz = r2.xyz * lerp(r5.xyz, -r5.xyz, r4);
    r3.xyz = lerp(abs(r3) + MinPos, (MaxPos - abs(r3)), r0);
    r0.xyz = r3.xyz + ((IN.position.z * CameraUp.xyz) + ((IN.position.x * normalize((CameraUp.yzx * r0.zxy) - (r0.yzx * CameraUp.zxy))) + (normalize(EyePosition.xyz - r3.xyz) * IN.position.y)));
    r0.w = 1;
    r2.x = 1.0 / abs(r2.x);
    r2.y = 1.0 / abs(r2.y);
    r2.z = 1.0 / abs(r2.z);
    r1.w = 1 - length(r2.xyz * (((-0.5 * abs(r2)) + r1) - r3.xyz));
    OUT.position.x = dot(WorldViewProj[0].xyzw, r0.xyzw);
    OUT.position.y = dot(WorldViewProj[1].xyzw, r0.xyzw);
    OUT.position.z = dot(WorldViewProj[2].xyzw, r0.xyzw);
    OUT.position.w = dot(WorldViewProj[3].xyzw, r0.xyzw);
    OUT.color_0.a = r1.w * r1.w;
    OUT.color_0.rgb = 1;
    OUT.texcoord_0.xy = IN.texcoord_0.xy;

    return OUT;
};

// approximately 50 instruction slots used
