//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/GRASS2038.vso /Fcshaderdump19/GRASS2038.vso.dis
//
//
// Parameters:

float4 AddlParams;
float4 AlphaParam;
float4 AmbientColor;
float3 DiffuseColor;
float3 DiffuseDir;
float4 EyeVector;
float4 FogColor;
float4 FogParam;
float4 InstanceData[2];
float4 LightPosition;
row_major float4x4 ModelViewProj;
float3 ScaleMask;
float4 WindData;


// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   DiffuseDir    const_0       1
//   DiffuseColor  const_1       1
//   ScaleMask     const_2       1
//   LightPosition const_3       1
//   WindData      const_4       1
//   AlphaParam    const_5       1
//   AmbientColor  const_6       1
//   AddlParams    const_7       1
//   ModelViewProj[0] const_9        1
//   ModelViewProj[1] const_10        1
//   ModelViewProj[2] const_11        1
//   ModelViewProj[3] const_12        1
//   EyeVector     const_13      1
//   FogColor      const_14      1
//   FogParam      const_15      1
//   InstanceData[0]  const_20       1
//   InstanceData[1]  const_21       1
//



// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float4 color_0 : COLOR0;
    float4 texcoord_0 : TEXCOORD0;
    float4 texcoord_1 : TEXCOORD1;
};

struct VS_OUTPUT {
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

    const float4 const_8 = {-0.5, 0.01, 1, 0};
    const float4 const_16 = {-1, 1, (1.0 / 128), 0};
    const float4 const_17 = {(1.0 / (PI * 2)), 0.5, PI * 2, -PI};
    const float4 const_18 = {D3DSINCOSCONST1};
    const float4 const_19 = {D3DSINCOSCONST2};

    OUT.color_0.rgb = FogColor.rgb;
    OUT.texcoord_0.xy = IN.texcoord_0;
    OUT.texcoord_1.w = --0.5;
    OUT.texcoord_1.xyz = (--0.5 * r0) - -0.5;
    OUT.texcoord_4.xyzw = AmbientColor.rgba;
    r0.w = frac(IN.texcoord_1.x);
    r0.w = IN.texcoord_1.x - r0.w;
    offset.w = r0.w;
    r0.xyzw = frac(InstanceData[0 + offset.w]);
    r0.xyz = r0.xyz + -0.5;
    r1.xyz = r0.xyz + r0.xyz;
    r0.xyz = r0.w * IN.color_0;
    r1.x = dot(DiffuseDir.xyz, r1.xyz);
    r1.w = max(r1.x, 0);
    r1.w = min(r1.w, 1);
    r1.y = (1.0 / 128);
    r2.xyz = r0.xyz * r1.w;
    r2.xyz = r2.xyz * DiffuseColor.rgb;
    OUT.texcoord_5.xyz = r2.xyz * AddlParams.x;
    r0.w = InstanceData[0 + offset.w].y + InstanceData[0 + offset.w].x;
    r0.w = (r0.w * r1.y) + WindData.w;
    r0.w = (r0.w * (1.0 / (PI * 2))) + 0.5;
    r0.w = frac(r0.w);
    r0.xy = EyeVector.xy * EyeVector.xy;
    r1.w = r0.y + r0.x;
    r2.w = (r0.w * PI * 2) + -PI;
    r0.w = 1.0 / sqrt(r1.w);
    r1.xz = r0.w * -EyeVector.xyyw;
    r0.w = IN.color_0.a * IN.color_0.a;
    r0.y = sin(r2.w);
    r1.yw = r1.z * -const_8.xzzw;
    r2.w = r0.y * WindData.z;
    r0.xyz = r1.zxww * const_16.xyyw;
    r1.x = dot(r1.yxww.xyz, r0.xyz);
    r2.w = r2.w * r0.w;
    r3.yz = const_8.yz;
    r0.w = r3.y * InstanceData[0 + offset.w].w;
    r3.xyz = (r0.w * ScaleMask) + r3.z;
    r0.w = 1.0 / sqrt(r1.x);
    r1.xy = r0.xy * r0.w;
    r0.w = r1.x;
    r3.xyz = r3.xyz * IN.position;
    r1.y = dot(r1.yzww.xyz, r3.xyz);
    r1.w = IN.position.w;
    r1.x = dot(r0.wyzw.xyz, r3.xyz);
    r0.xy = (r2.w * WindData.xy) + r1.xy;
    r0.z = r3.z;
    r1.xyz = r0.xyz + InstanceData[0 + offset.w];
    r0.w = dot(ModelViewProj[3].xyzw, r1.xyzw);
    r0.x = dot(ModelViewProj[0].xyzw, r1.xyzw);
    r0.y = dot(ModelViewProj[1].xyzw, r1.xyzw);
    r0.z = dot(ModelViewProj[2].xyzw, r1.xyzw);
    OUT.position.xyzw = r0.xyzw;
    r1.xyz = LightPosition.xyz - r1.xyz;
    r2.w = 1.0 / FogParam.y;
    r2.x = dot(r0.xyz, r0.xyz);	// normalize + length
    r1.w = 1.0 / sqrt(r2.x);
    r1.w = 1.0 / r1.w;
    r1.w = FogParam.x - r1.w;
    r1.w = r1.w * r2.w;
    r1.w = max(r1.w, 0);
    r1.w = min(r1.w, 1);
    OUT.color_0.a = 1 - r1.w;
    r1.w = 1.0 / LightPosition.w;
    r2.w = dot(r0.xyzw, r0.xyzw);	// normalize + length
    r2.w = 1.0 / sqrt(r2.w);
    r2.w = 1.0 / r2.w;
    r2.xy = r2.w - AlphaParam.xzzw;
    r3.x = 1.0 / AlphaParam.y;
    r3.y = 1.0 / AlphaParam.w;
    r2.xy = r2.xy * r3.xy;
    r0.xy = max(r2.xy, 0);
    r2.xy = min(r0.xy, 1);
    r0.w = 1 - r2.y;
    OUT.texcoord_5.w = r2.x * r0.w;
    r0.xyz = r1.xyz * r1.w;

    return OUT;
};

// approximately 83 instruction slots used
