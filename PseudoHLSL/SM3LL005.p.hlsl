//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   psa shaderdump19/SM3LL005.pso /Fcshaderdump19/SM3LL005.pso.dis
//
//
// Parameters:
//
float4 AmbientColor : register(c0);
sampler2D BaseMap : register(s0);
float3 EyePosition : register(c1);
float4 LightData[8] : register(c9);
float3 MatAlpha : register(c3);
sampler2D NormalMap : register(s1);
float4 ToggleADTS : register(c5);
float4 ToggleNumLights : register(c6);
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   AmbientColor    const_0       1
//   EyePosition     const_1       1
//   MatAlpha        const_3       1
//   ToggleADTS      const_5       1
//   ToggleNumLights const_6       1
//   LightData[0]       const_9        1
//   LightData[1]       const_10        1
//   LightData[2]       const_11        1
//   LightData[3]       const_12        1
//   LightData[4]       const_13        1
//   LightData[5]       const_14        1
//   LightData[6]       const_15        1
//   LightData[7]       const_16        1
//   BaseMap         texture_0       1
//   NormalMap       texture_1       1
//


// Structures:

struct VS_OUTPUT {
    float2 BaseUV : TEXCOORD0;			// partial precision
    float3 color_0 : COLOR0;			// partial precision
    float3 texcoord_3 : TEXCOORD3_centroid;			// partial precision
    float3 texcoord_4 : TEXCOORD4_centroid;			// partial precision
    float3 texcoord_5 : TEXCOORD5_centroid;			// partial precision
    float3 texcoord_6 : TEXCOORD6_centroid;			// partial precision
    float4 texcoord_7 : TEXCOORD7_centroid;			// partial precision
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	uvtile(w)		(((w) * 0.04) - 0.02)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const int4 const_17 = {2, -4, -5, -6};
    const int4 const_4 = {0, 1, 4, 2};
    const int4 const_7 = {2, -2, -3, -4};
    const int4 const_8 = {2, -6, -7, 0};

    float3 eye131;
    float3 l14;
    float3 l17;
    float1 l270;
    float3 l48;
    float3 l53;
    float3 l58;
    float3 l70;
    float3 m76;
    float3 m85;
    float3 m91;
    float3 m97;
    float4 noxel1;
    float1 q10;
    float3 q12;
    float1 q13;
    float1 q2;
    float3 q23;
    float3 q28;
    float3 q33;
    float3 q4;
    float3 q42;
    float3 q6;
    float1 q7;
    float3 q9;
    float4 r0;
    float4 r1;
    float3 r10;
    float2 r12;
    float4 r2;
    float4 r3;
    float3 r4;
    float3 r5;
    float3 r6;
    float3 r7;
    float3 r8;
    float3 r9;

#define	TanSpaceProj	float3x3(r9.xyz, r8.xyz, r7.xyz)
#define	TanSpaceProj	float3x3(r9.xyz, r8.xyz, r7.xyz)

    r0.xyzw = tex2D(BaseMap, IN.BaseUV.xy);			// partial precision
    r7.xyz = normalize(IN.texcoord_5.xyz);			// partial precision
    r8.xyz = normalize(IN.texcoord_4.xyz);			// partial precision
    r9.xyz = normalize(IN.texcoord_3.xyz);			// partial precision
    eye131.xyz = mul(TanSpaceProj, EyePosition.xyz - IN.texcoord_6.xyz);
    r6.xyz = normalize(eye131.xyz);			// partial precision
    r3.xyz = const_4.xyz;
    r12.xy = (uvtile(r0.w) * r6.xy) + IN.BaseUV.xy;			// partial precision
    noxel1.xyzw = tex2D(NormalMap, r12.xy);
    r0.xyzw = expand(noxel1.xyzw);			// partial precision	// [0,1] to [-1,+1]
    r4.xyz = normalize(r0.xyz);			// partial precision
    r1.w = (ToggleNumLights.x <= 0.0 ? r3.x : r3.y);

    if (0 != r1.w) {
      l70.xyz = mul(TanSpaceProj, LightData[1].xyz);
      r2.xyz = shade(r4.xyz, l70.xyz) * LightData[0].xyz;			// partial precision
      r0.xyz = pow(abs(shades(normalize(r6.xyz + l70.xyz), r4.xyz)), ToggleNumLights.z) * LightData[0].xyz;			// partial precision
      r3.w = 1;
    }
    else {
      r3.w = 0;
      r2.xyz = 0;			// partial precision
      r0.xyz = 0;			// partial precision
    }

    q2.x = min(ToggleNumLights.y, r3.z - ToggleNumLights.x);			// partial precision
    r2.w = ((q2.x >= 0.0 ? 0 : 1) * (frac(q2.x) <= 0.0 ? 0 : 1)) + (q2.x - frac(q2.x));
    r1.w = (r2.w <= 0.0 ? 0 : 1);

    if (0 != r1.w) {
      r5.x = 2 * r3.w;
      r5.yz = r5.x - const_4.yw;
      q4.xyz = r5.x - const_4.xyw;
      r3.w = r3.w + 1;
      r10.xyz = (q4.xyz >= 0.0 ? q4.xyz : -r5.xyz);
      r1.xyzw = (r10.z <= 0.0 ? LightData[3].xyzw : (r10.y <= 0.0 ? LightData[2].xyzw : (r10.x <= 0.0 ? LightData[1].xyzw : 0)));
      q23.xyz = r1.xyz - IN.texcoord_6.xyz;
      m76.xyz = mul(TanSpaceProj, q23.xyz);
      q7.x = 1.0 - sqr(saturate(length(q23.xyz) / r1.w));			// partial precision
      l48.xyz = (r10.z <= 0.0 ? LightData[2].xyz : (r10.y <= 0.0 ? LightData[1].xyz : (r10.x <= 0.0 ? LightData[0].xyz : 0)));			// partial precision
      q6.xyz = l48.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m76.xyz)), r4.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q7.x * q6.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q7.x * dot(r4.xyz, normalize(m76.xyz)), 0) * l48.xyz) + r2.xyz;			// partial precision
    }


    if (1 != r2.w) {
      r10.xyz = (2 * r3.w) + const_7.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[5].xyzw : (r10.y == 0.0 ? LightData[4].xyzw : (r10.x == 0.0 ? LightData[3].xyzw : 0)));
      q28.xyz = r1.xyz - IN.texcoord_6.xyz;
      m85.xyz = mul(TanSpaceProj, q28.xyz);
      q10.x = 1.0 - sqr(saturate(length(q28.xyz) / r1.w));			// partial precision
      l53.xyz = (r10.z == 0.0 ? LightData[4].xyz : (r10.y == 0.0 ? LightData[3].xyz : (r10.x == 0.0 ? LightData[2].xyz : 0)));			// partial precision
      q9.xyz = l53.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m85.xyz)), r4.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q10.x * q9.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q10.x * dot(r4.xyz, normalize(m85.xyz)), 0) * l53.xyz) + r2.xyz;			// partial precision
    }


    if (2 != r2.w) {
      r10.xyz = (2 * r3.w) + const_17.yzw;
      r3.w = r3.w + 1;
      r1.xyzw = (r10.z == 0.0 ? LightData[7].xyzw : (r10.y == 0.0 ? LightData[6].xyzw : (r10.x == 0.0 ? LightData[5].xyzw : 0)));
      q33.xyz = r1.xyz - IN.texcoord_6.xyz;
      m91.xyz = mul(TanSpaceProj, q33.xyz);
      q13.x = 1.0 - sqr(saturate(length(q33.xyz) / r1.w));			// partial precision
      l58.xyz = (r10.z == 0.0 ? LightData[6].xyz : (r10.y == 0.0 ? LightData[5].xyz : (r10.x == 0.0 ? LightData[4].xyz : 0)));			// partial precision
      q12.xyz = l58.xyz * pow(abs(shades(normalize(r6.xyz + normalize(m91.xyz)), r4.xyz)), ToggleNumLights.z);			// partial precision
      r0.xyz = (q13.x * q12.xyz) + r0.xyz;			// partial precision
      r2.xyz = (max(q13.x * dot(r4.xyz, normalize(m91.xyz)), 0) * l58.xyz) + r2.xyz;			// partial precision
    }


    if (3 != r2.w) {
      l14.xyz = LightData[7].xyz - IN.texcoord_6.xyz;
      m97.xyz = mul(TanSpaceProj, l14.xyz);
      r6.xyz = r6.xyz + normalize(m97.xyz);			// partial precision
      r1.xyz = normalize(r6.xyz);			// partial precision
      l270.x = 1.0 - sqr(saturate(length(l14.xyz) / LightData[7].w));			// partial precision
      r6.xy = (2 * r3.w) + const_8.yz;
      l17.xyz = (r6.y == 0.0 ? LightData[7].xyz : (r6.x == 0.0 ? LightData[6].xyz : 0));			// partial precision
      r2.xyz = (max(l270.x * dot(r4.xyz, normalize(m97.xyz)), 0) * l17.xyz) + r2.xyz;			// partial precision
      r0.xyz = (l270.x * (pow(abs(shades(r1.xyz, r4.xyz)), ToggleNumLights.z) * l17.xyz)) + r0.xyz;			// partial precision
    }

    r1.xyz = r2.xyz + ((ToggleADTS.x * AmbientColor.rgb) + (r3.y - ToggleADTS.x));			// partial precision
    r2.xyz = r0.w * r0.xyz;			// partial precision
    r0.xyzw = tex2D(BaseMap, r12.xy);			// partial precision
    q42.xyz = ((r0.xyz * IN.color_0.rgb) * r1.xyz) + r2.xyz;			// partial precision
    OUT.color_0.a = MatAlpha.x;			// partial precision
    OUT.color_0.rgb = (IN.texcoord_7.w * (IN.texcoord_7.xyz - q42.xyz)) + q42.xyz;			// partial precision

    return OUT;
};

// approximately 219 instruction slots used (3 texture, 216 arithmetic)
