//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/PRECIP002.vso /Fcshaderdump19/PRECIP002.vso.dis
//
//
// Parameters:

float3 EyePosition;
float3 MaxPos;
float3 MinPos;
float3 Params;
float3 Velocity;
row_major float4x4 WorldViewProj;


// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   WorldViewProj[0] const_0        1
//   WorldViewProj[1] const_1        1
//   WorldViewProj[2] const_2        1
//   WorldViewProj[3] const_3        1
//   EyePosition   const_8       1
//   Velocity      const_9       1
//   MinPos        const_10      1
//   MaxPos        const_11      1
//   Params        const_12      1
//



// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float4 texcoord_0 : TEXCOORD0;
    float4 texcoord_1 : TEXCOORD1;
};

struct VS_OUTPUT {
    float4 position : POSITION;
    float4 color_0 : COLOR0;
    float2 texcoord_0 : TEXCOORD0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	PI	3.14159274
#define	D3DSINCOSCONST1	-1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
#define	D3DSINCOSCONST2	-0.020833334, -0.125, 1, 0.5

    const float4 const_4 = {0, -1, 1, 0.5};
    const float4 const_5 = {(1.0 / (PI * 2)), 0.5, PI * 2, -PI};

    float4 r0;
    float4 r1;
    float3 r2;
    float4 r3;
    float3 r4;
    float3 r5;

    r0.xyz = (0 < r0 ? 1.0 : 0.0);
    r5.xyz = MaxPos.xyz - MinPos.xyz;
    r2.x = 1.0 / r5.x;
    r2.y = 1.0 / r5.y;
    r2.z = 1.0 / r5.z;
    r1.xyz = (((Params.x * Velocity.xyz) + IN.texcoord_1.xyz) - MinPos.xyz) * r2.xyz;
    r2.xyz = (r1 >= -r1 ? 1.0 : 0.0);
    r3.xyz = frac(abs(r1));
    r2.xyz = r5.xyz * lerp(r3.xyz, -r3.xyz, r2);
    r1.xyz = abs(r2) + MinPos;
    r2.xyz = MaxPos - abs(r2);
    r4.xyz = lerp(r1.xyz, r2.xyz, r0);
    r0.xy = r4.xy - EyePosition.xy;
    r1.xy = r0.xy * r0.xy;
    r1.xz = -r0.xyyw / sqrt(r1.y + r1.x);
    r1.yw = r1.z * const_4.xy;
    r0.xyz = r1.zxw * const_4.yzz;
    r0.w = (frac((((Params.z * Params.x) + IN.texcoord_1.x) / (PI * 2)) + 0.5) * PI * 2) + -PI;
    r1.xy = r0.xy / sqrt(dot(r1.yxw, r0.xyz));
    r2.x = cos(r0.w); r2.y = sin(r0.w);
    r0.w = r1.x;
    r3.xyz = r2.xxy * const_4.zxz;
    r2.xyz = r2.yxx * const_4.yxz;
    r3.x = dot(r3.xyz, IN.position.xyz);
    r3.z = dot(r2.xyz, IN.position.xyz);
    r3.w = IN.position.y;
    r3.y = dot(r1.ywz, r3.xyz);.xzww
    r3.x = dot(r0.wzy, r3.xyz);.xzww
    r0.xyz = r4.xyz + r3.xyz;
    r0.w = 1;
    r2.x = 1.0 / abs(r5.x);
    r2.y = 1.0 / abs(r5.y);
    r2.z = 1.0 / abs(r5.z);
    r1.w = 1 - length(r2.xyz * (((-0.5 * abs(r5)) + r6) - r4.xyz));
    OUT.position.x = dot(WorldViewProj[0].xyzw, r0.xyzw);
    OUT.position.y = dot(WorldViewProj[1].xyzw, r0.xyzw);
    OUT.position.z = dot(WorldViewProj[2].xyzw, r0.xyzw);
    OUT.position.w = dot(WorldViewProj[3].xyzw, r0.xyzw);
    OUT.color_0.a = r1.w * r1.w;
    OUT.color_0.rgb = 1;
    OUT.texcoord_0.xy = IN.texcoord_0.xy;

    return OUT;
};

// approximately 62 instruction slots used
