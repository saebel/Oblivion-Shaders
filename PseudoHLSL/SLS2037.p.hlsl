//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2037.pso /Fcshaderdump19/SLS2037.pso.dis
//
//
// Parameters:
//
sampler2D NormalMap;
float4 PSLightColor[4];
float4 Toggles;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   PSLightColor[0] const_2        1
//   Toggles      const_7       1
//   NormalMap    texture_0       1
//


// Structures:

struct VS_OUTPUT {
    float2 NormalUV : TEXCOORD0;			// partial precision
    float3 texcoord_1 : TEXCOORD1_centroid;			// partial precision
    float3 texcoord_3 : TEXCOORD3_centroid;			// partial precision
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    float1 q1;
    float3 q2;
    float1 q6;
    float4 r0;

    r0.xyzw = tex2D(NormalMap, IN.NormalUV.xy);			// partial precision
    q6.x = r0.w * pow(abs(shades(normalize(expand(r0.xyz)), normalize(IN.texcoord_3.xyz))), Toggles.z);			// partial precision
    q1.x = dot(normalize(expand(r0.xyz)), normalize(IN.texcoord_1.xyz));			// partial precision
    q2.xyz = (0.2 >= q1.x ? (q6.x * max(q1.x + 0.5, 0)) : q6.x) * PSLightColor[0].rgb;			// partial precision
    OUT.color_0.a = weight(q2.xyz);			// partial precision
    OUT.color_0.rgb = saturate(q2.xyz);			// partial precision

    return OUT;
};

// approximately 27 instruction slots used (1 texture, 26 arithmetic)
