//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/STB1006.vso /Fcshaderdump19/STB1006.vso.dis
//
//
// Parameters:

row_major float4x4 ModelViewProj;
float4 WindMatrices[16];


// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   ModelViewProj[0] const_0        1
//   ModelViewProj[1] const_1        1
//   ModelViewProj[2] const_2        1
//   ModelViewProj[3] const_3        1
//   WindMatrices[0]  const_38      4
//   WindMatrices[1]  const_39      4
//   WindMatrices[2]  const_40      4
//   WindMatrices[3]  const_41      4
//



// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float4 texcoord_0 : TEXCOORD0;
    float4 blendindices : BLENDINDICES;
};

struct VS_OUTPUT {
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

    const int4 const_4 = {1, 0, 0, 0};

    OUT.color_0.rgba = (IN.blendindices.z * const_4.xxxy) + const_4.yyyx;
    OUT.texcoord_0.xy = IN.texcoord_0;
    offset.x = IN.blendindices.y;
    r0.w = dot(WindMatrices[3 + offset.x].xyzw, IN.position.xyzw);
    r0.x = dot(WindMatrices[0 + offset.x].xyzw, IN.position.xyzw);
    r0.y = dot(WindMatrices[1 + offset.x].xyzw, IN.position.xyzw);
    r0.z = dot(WindMatrices[2 + offset.x].xyzw, IN.position.xyzw);
    r0.xyzw = r0 - IN.position;
    r1.w = IN.blendindices.x;
    r0.xyzw = (r1.w * r0) + IN.position;
    OUT.position.w = dot(ModelViewProj[3].xyzw, r0.xyzw);
    OUT.position.x = dot(ModelViewProj[0].xyzw, r0.xyzw);
    OUT.position.y = dot(ModelViewProj[1].xyzw, r0.xyzw);
    OUT.position.z = dot(ModelViewProj[2].xyzw, r0.xyzw);

    return OUT;
};

// approximately 14 instruction slots used
