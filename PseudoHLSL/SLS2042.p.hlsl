//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2042.pso /Fcshaderdump19/SLS2042.pso.dis
//
//
// Parameters:
//
sampler2D AttenuationMap : register(s3);
sampler2D NormalMap : register(s0);
float4 PSLightColor[4] : register(c2);
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   PSLightColor[0]   const_2        1
//   NormalMap      texture_0       1
//   AttenuationMap texture_3       1
//


// Structures:

struct VS_OUTPUT {
    float2 NormalUV : TEXCOORD0;			// partial precision
    float3 texcoord_1 : TEXCOORD1_centroid;			// partial precision
    float3 texcoord_3 : TEXCOORD3_centroid;			// partial precision
    float4 texcoord_5 : TEXCOORD5;			// partial precision
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const float4 const_3 = {0, 0, 1, 0.5};

    float1 att2;
    float1 att4;
    float1 q11;
    float1 q20;
    float1 q3;
    float3 q5;
    float3 q9;
    float4 r0;
    float3 r1;
    float4 r2;

    r0.xyzw = tex2D(NormalMap, IN.NormalUV.xy);			// partial precision
    att4.x = tex2D(AttenuationMap, IN.texcoord_5.zw);			// partial precision
    att2.x = tex2D(AttenuationMap, IN.texcoord_5.xy);			// partial precision
    r0.xyz = normalize(expand(r0.xyz));			// partial precision
    r2.xy = r0.xy * 0.5;			// partial precision
    q11.x = dot(r0.xyz, normalize(IN.texcoord_1.xyz));			// partial precision
    r1.xyz = (0.5 * r0.xyz) + const_3.xyz;			// partial precision
    q9.xyz = r1.xyz / sqrt((((r0.z * 0.5) + 1) * r1.z) + ((r2.y * r1.y) + (r2.x * r1.x)));			// partial precision
    q3.x = 1 - saturate(abs(dot(q9.xyz, normalize(IN.texcoord_1.xyz)) - dot(q9.xyz, normalize(IN.texcoord_3.xyz))));			// partial precision
    q20.x = (r0.w * 0.7) * pow(abs(q3.x), 30);			// partial precision
    r2.w = (0.2 >= q11.x ? (q20.x * max(q11.x + 0.5, 0)) : q20.x);			// partial precision
    q5.xyz = (r2.w * PSLightColor[0].rgb) * saturate((1 - att2.x) - att4.x);			// partial precision
    OUT.color_0.a = weight(q5.xyz);			// partial precision
    OUT.color_0.rgb = saturate(q5.xyz);			// partial precision

    return OUT;
};

// approximately 47 instruction slots used (3 texture, 44 arithmetic)
