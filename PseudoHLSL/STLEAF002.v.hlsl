//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/STLEAF002.vso /Fcshaderdump19/STLEAF002.vso.dis
//
//
// Parameters:

float4 AmbientColor;
float4 BillboardRight;
float4 BillboardUp;
float4 DiffColor;
float4 DiffColorPt;
float4 LeafBase[48];
float4 LeafLighting;
float4 LightPos;
float4 LightVector;
row_major float4x4 ModelViewProj;
float4 RockParams;
float4 RustleParams;
float SunDimmer;
float4 WindMatrices[16];


// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   ModelViewProj[0]  const_0        1
//   ModelViewProj[1]  const_1        1
//   ModelViewProj[2]  const_2        1
//   ModelViewProj[3]  const_3        1
//   AmbientColor   const_5       1
//   DiffColor      const_6       1
//   DiffColorPt    const_7       1
//   SunDimmer      const_10      1
//   LightVector    const_11      1
//   LightPos       const_12      1
//   BillboardRight const_13      1
//   BillboardUp    const_14      1
//   RockParams     const_15      1
//   RustleParams   const_16      1
//   LeafLighting   const_17      1
//   WindMatrices[0]   const_18      4
//   WindMatrices[1]   const_19      4
//   WindMatrices[2]   const_20      4
//   WindMatrices[3]   const_21      4
//   LeafBase       const_34     48
//



// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float3 normal : NORMAL;
    float4 texcoord_0 : TEXCOORD0;
    float4 blendindices : BLENDINDICES;
};

struct VS_OUTPUT {
    float4 position : POSITION;
    float2 texcoord_0 : TEXCOORD0;
    float4 texcoord_1 : TEXCOORD1;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	PI	3.14159274

    const float4 const_4 = {PI * 2, -PI, -2.52398507e-007, 2.47609005e-005};
    const float4 const_8 = {(1.0 / 48), 0.499999553, 0.25, -0.00138883968};
    const float4 const_9 = {(1.0 / (PI * 2)), 0.25, 0.5, 0};
    const float4 const_82 = {(1.0 / 24), -0.5, 1, 0};

    float1 offset;
    float4 r0;
    float4 r1;
    float4 r2;
    float4 r3;
    float1 r4;
    float1 r5;

    offset.x = IN.blendindices.z;
    r0.w = (pow(2.0, (((IN.blendindices.z / 48) + RustleParams.y) * 0.499999553) + 0.25) * PI * 2) - PI;
    r0.w = r0.w * r0.w;
    r1.w = (pow(2.0, (((IN.blendindices.z / 48) + RockParams.y) * 0.499999553) + 0.25) * PI * 2) - PI;
    r1.w = r1.w * r1.w;
    r2.w = (r1.w * ((r1.w * ((r1.w * -2.52398507e-007) + 2.47609005e-005)) - 0.00138883968)) + (1.0 / 24);
    r1.xy = (((((r1.w * ((r1.w * r2.w) - 0.5)) + 1) * RockParams.z) * RockParams.x) / (PI * 2)) + const_9.yz;
    r0.xy = (PI * 2 * frac(r1.xy)) - PI;
    r0.xy = r0.xy * r0.xy;
    r1.w = (r0.w * ((r0.w * ((r0.w * -2.52398507e-007) + 2.47609005e-005)) - 0.00138883968)) + (1.0 / 24);
    r1.xy = (-2.52398507e-007 * r0.xy) + 2.47609005e-005;
    r1.xy = (r1 * r0.xy) - 0.00138883968;
    r1.xy = (r1 * r0.xy) + (1.0 / 24);
    r1.xy = (r1 * r0.xy) - 0.5;
    r3.xy = (((((r0.w * ((r0.w * r1.w) - 0.5)) + 1) * RustleParams.z) * RustleParams.x) / (PI * 2)) + const_9.yz;
    r0.xw = (r0.yyzx * r1.yyzx) + 1;
    r2.xy = (PI * 2 * frac(r3.xy)) - PI;
    r2.xy = r2.xy * r2.xy;
    r1.xy = (-2.52398507e-007 * r2.xy) + 2.47609005e-005;
    r1.xy = (r1 * r2.xy) - 0.00138883968;
    r3.xy = (r1 * r2.xy) + (1.0 / 24);
    r1.xyzw = IN.blendindices.w * LeafBase[offset.x];
    offset.x = IN.blendindices.y;
    r0.y = -r0.w;
    r0.z = 0;
    r3.xy = (r3 * r2.xy) - 0.5;
    r3.xw = (r2.yyzx * r3.yyzx) + 1;
    r3.y = -r3.w;
    r3.z = 0;
    r4.x = dot(r0.zwx, r1.xyz);
    r5.x = dot(r0.zxy, r1.xyz);
    r0.x = dot(r3.xyz, BillboardUp.xyz);
    r0.y = dot(r3.wxz, BillboardUp.xyz);
    r0.zw = BillboardUp.zw;
    r2.x = dot(r3.xyz, BillboardRight.xyz);
    r2.y = dot(r3.wxz, BillboardRight.xyz);
    r2.zw = BillboardRight.zw;
    r0.xyzw = (r4.x * r0.xyzw) + (r5.x * r2.xyzw);
    r2.xyzw = r0.xyzw + IN.position.xyzw;
    r0.w = dot(WindMatrices[3 + offset.x], r2.xyzw);
    r0.x = dot(WindMatrices[0 + offset.x], r2.xyzw);
    r0.y = dot(WindMatrices[1 + offset.x], r2.xyzw);
    r0.z = dot(WindMatrices[2 + offset.x], r2.xyzw);
    r0.xyzw = (IN.blendindices.x * (r0.xyzw - r2.xyzw)) + r2.xyzw;
    r2.xyz = r1.xyz / length(r1.xyzw);
    r1.xyz = LightPos.xyz - r0.xyz;
    OUT.position.x = dot(ModelViewProj[0].xyzw, r0.xyzw);
    OUT.position.y = dot(ModelViewProj[1].xyzw, r0.xyzw);
    OUT.position.z = dot(ModelViewProj[2].xyzw, r0.xyzw);
    OUT.position.w = dot(ModelViewProj[3].xyzw, r0.xyzw);
    r0.w = 1.0 / length(r1.xyz);
    r0.xyz = normalize((LeafLighting.y * r2.xyz) + IN.normal.xyz);
    r2.x = dot(r0.xyz, r1.xyz * r0.w);
    r1.xyzw = (SunDimmer.x * (saturate(dot(r0.xyz, LightVector.xyz)) * DiffColor.rgba)) + AmbientColor.rgba;
    r1.xyz = r1.xyz * pow(2.0, IN.blendindices.z);
    r2.w = saturate((1.0 / r0.w) / LightPos.w);
    OUT.texcoord_1.xyzw = ((1.0 - (r2.w * r2.w)) * (saturate(r2.x) * DiffColorPt.xyzw)) + r1.xyzw;
    OUT.texcoord_0.xy = IN.texcoord_0.xy;

    return OUT;
};

// approximately 109 instruction slots used
