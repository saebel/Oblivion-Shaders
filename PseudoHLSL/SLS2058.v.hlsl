//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2058.vso /Fcshaderdump19/SLS2058.vso.dis
//
//
// Parameters:
//
float4 Bones[54] : register(c42);
row_major float4x4 SkinModelViewProj : register(c1);
row_major float4x4 SkinWorldViewTranspose : register(c5);
//
//
// Registers:
//
//   Name                   Reg   Size
//   ---------------------- ----- ----
//   SkinModelViewProj[0]      const_1        1
//   SkinModelViewProj[1]      const_2        1
//   SkinModelViewProj[2]      const_3        1
//   SkinModelViewProj[3]      const_4        1
//   SkinWorldViewTranspose[0] const_5        1
//   SkinWorldViewTranspose[1] const_6        1
//   Bones[0]                  const_42      18
//   Bones[1]                  const_43      18
//   Bones[2]                  const_44      18
//


// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float3 normal : NORMAL;
    float4 texcoord_0 : TEXCOORD0;
    float3 blendweight : BLENDWEIGHT;
    float4 blendindices : BLENDINDICES;
};

struct VS_OUTPUT {
    float4 position : POSITION;
    float3 texcoord_0 : TEXCOORD0;
    float2 texcoord_1 : TEXCOORD1;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const float4 const_0 = {1, 765.01001, 0, 0.1};

    float1 mdl2;
    float4 offset;
    float4 q1;
    float3 q11;
    float3 q12;
    float3 q13;
    float3 q14;
    float3 q15;
    float3 q17;
    float3 q18;
    float3 q19;
    float3 q20;
    float3 q21;
    float3 q22;
    float2 q56;
    float4 r0;

    offset.xyzw = IN.blendindices.zyxw * 765.01001;
    r0.w = 1;
    q1.xyzw = (IN.position.xyzx * const_0.xxxz) + const_0.zzzx;
    q15.xyz = mul(float3x4(Bones[0 + offset.w].xyzw, Bones[1 + offset.w].xyzw, Bones[2 + offset.w].xyzw), q1.xyzw);
    q13.xyz = mul(float3x4(Bones[0 + offset.z].xyzw, Bones[1 + offset.z].xyzw, Bones[2 + offset.z].xyzw), q1.xyzw);
    q12.xyz = mul(float3x4(Bones[0 + offset.x].xyzw, Bones[1 + offset.x].xyzw, Bones[2 + offset.x].xyzw), q1.xyzw);
    q11.xyz = mul(float3x4(Bones[0 + offset.y].xyzw, Bones[1 + offset.y].xyzw, Bones[2 + offset.y].xyzw), q1.xyzw);
    q21.xyz = mul(float3x3(Bones[0 + offset.w].xyz, Bones[1 + offset.w].xyz, Bones[2 + offset.w].xyz), IN.normal.xyz);
    q19.xyz = mul(float3x3(Bones[0 + offset.z].xyz, Bones[1 + offset.z].xyz, Bones[2 + offset.z].xyz), IN.normal.xyz);
    q18.xyz = mul(float3x3(Bones[0 + offset.x].xyz, Bones[1 + offset.x].xyz, Bones[2 + offset.x].xyz), IN.normal.xyz);
    q17.xyz = mul(float3x3(Bones[0 + offset.y].xyz, Bones[1 + offset.y].xyz, Bones[2 + offset.y].xyz), IN.normal.xyz);
    q20.xyz = (IN.blendweight.z * q19.xyz) + ((IN.blendweight.x * q18.xyz) + (q17.xyz * IN.blendweight.y));
    q22.xyz = normalize(((1 - weight(IN.blendweight.xyz)) * q21.xyz) + q20.xyz);
    q56.xy = mul(float2x3(SkinWorldViewTranspose[0].xyz, SkinWorldViewTranspose[1].xyz), q22.xyz);
    q14.xyz = (IN.blendweight.z * q13.xyz) + ((IN.blendweight.x * q12.xyz) + (q11.xyz * IN.blendweight.y));
    r0.xyz = ((1 - weight(IN.blendweight.xyz)) * q15.xyz) + q14.xyz;
    mdl2.x = dot(SkinModelViewProj[2].xyzw, r0.xyzw);
    OUT.position.w = dot(SkinModelViewProj[3].xyzw, r0.xyzw);
    OUT.position.xy = mul(float2x4(SkinModelViewProj[0].xyzw, SkinModelViewProj[1].xyzw), r0.xyzw);
    OUT.position.z = mdl2.x;
    OUT.texcoord_0.xy = IN.texcoord_0.xy;
    OUT.texcoord_0.z = max((mdl2.x / 750) + 0.8, 1);
    OUT.texcoord_1.xy = max(min(q56.xy, 0.1), -0.1);

    return OUT;
};

// approximately 55 instruction slots used
