//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/PAR2009.vso /Fcshaderdump19/PAR2009.vso.dis
//
//
// Parameters:

float4 Bones[54];
float4 EyePosition;
float3 FogColor;
float4 FogParam;
float3 LightDirection[3];
row_major float4x4 SkinModelViewProj;


// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   SkinModelViewProj[0] const_1        1
//   SkinModelViewProj[1] const_2        1
//   SkinModelViewProj[2] const_3        1
//   SkinModelViewProj[3] const_4        1
//   LightDirection[0]    const_13       1
//   FogParam          const_23      1
//   FogColor          const_24      1
//   EyePosition       const_25      1
//   Bones[0]             const_42      18
//   Bones[1]             const_43      18
//   Bones[2]             const_44      18
//



// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
    float3 normal : NORMAL;
    float4 texcoord_0 : TEXCOORD0;
    float4 color_0 : COLOR0;
    float3 blendweight : BLENDWEIGHT;
    float4 blendindices : BLENDINDICES;
};

struct VS_OUTPUT {
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

    const float4 const_0 = {1, 765.01001, 0, 0};

    OUT.color_0.rgba = IN.color_0;
    OUT.color_1.rgb = FogColor.rgb;
    OUT.texcoord_0.xy = IN.texcoord_0;
    r2.w = 1.0 / FogParam.y;
    r7.xyz = normalize(r3);
    OUT.texcoord_1.xyz = r7.xyz;
    r7.xyz = normalize(r3);
    OUT.texcoord_3.xyz = r7.xyz;
    r7.xyz = normalize(r2);
    OUT.texcoord_6.xyz = r7.xyz;
    r1.xyzw = (IN.blendindices.zyxw * 765.01001) - r0;
    offset.xyzw = r1.xyzw;
    r0.xyzw = IN.blendindices.zyxw * 765.01001;
    r0.xyzw = frac(r0);
    r0.xyzw = (IN.position.xyzx * const_0.xxxz) + const_0.zzzx;
    r2.x = dot(IN.blendweight.xyz, 1.xyz);
    r1.w = 1 - r2.x;
    r1.x = dot(Bones[0 + offset.y].xyzw, r0.xyzw);
    r1.y = dot(Bones[1 + offset.y].xyzw, r0.xyzw);
    r1.z = dot(Bones[2 + offset.y].xyzw, r0.xyzw);
    r2.xyz = r1.xyz * IN.blendweight.y;
    r1.x = dot(Bones[0 + offset.x].xyzw, r0.xyzw);
    r1.y = dot(Bones[1 + offset.x].xyzw, r0.xyzw);
    r1.z = dot(Bones[2 + offset.x].xyzw, r0.xyzw);
    r2.xyz = (IN.blendweight.x * r1.xyz) + r2.xyz;
    r1.x = dot(Bones[0 + offset.z].xyzw, r0.xyzw);
    r1.y = dot(Bones[1 + offset.z].xyzw, r0.xyzw);
    r1.z = dot(Bones[2 + offset.z].xyzw, r0.xyzw);
    r2.xyz = (IN.blendweight.z * r1.xyz) + r2.xyz;
    r1.x = dot(Bones[0 + offset.w].xyzw, r0.xyzw);
    r1.y = dot(Bones[1 + offset.w].xyzw, r0.xyzw);
    r1.z = dot(Bones[2 + offset.w].xyzw, r0.xyzw);
    r0.w = 1;
    r0.xyz = (r1.w * r1.xyz) + r2.xyz;
    OUT.position.w = dot(SkinModelViewProj[3].xyzw, r0.xyzw);
    r1.x = dot(Bones[0 + offset.y].xyz, IN.tangent.xyz);
    r1.y = dot(Bones[1 + offset.y].xyz, IN.tangent.xyz);
    r1.z = dot(Bones[2 + offset.y].xyz, IN.tangent.xyz);
    r2.xyz = r1.xyz * IN.blendweight.y;
    r1.x = dot(Bones[0 + offset.x].xyz, IN.tangent.xyz);
    r1.y = dot(Bones[1 + offset.x].xyz, IN.tangent.xyz);
    r1.z = dot(Bones[2 + offset.x].xyz, IN.tangent.xyz);
    r2.xyz = (IN.blendweight.x * r1.xyz) + r2.xyz;
    r1.x = dot(Bones[0 + offset.z].xyz, IN.tangent.xyz);
    r1.y = dot(Bones[1 + offset.z].xyz, IN.tangent.xyz);
    r1.z = dot(Bones[2 + offset.z].xyz, IN.tangent.xyz);
    r2.xyz = (IN.blendweight.z * r1.xyz) + r2.xyz;
    r1.x = dot(Bones[0 + offset.w].xyz, IN.tangent.xyz);
    r1.y = dot(Bones[1 + offset.w].xyz, IN.tangent.xyz);
    r1.z = dot(Bones[2 + offset.w].xyz, IN.tangent.xyz);
    r1.xyz = (r1.w * r1.xyz) + r2.xyz;
    r1.x = dot(Bones[0 + offset.y].xyz, IN.binormal.xyz);
    r1.y = dot(Bones[1 + offset.y].xyz, IN.binormal.xyz);
    r1.z = dot(Bones[2 + offset.y].xyz, IN.binormal.xyz);
    r6.xyz = normalize(r5);
    r3.y = dot(r6.xyz, LightDirection[0].xyz);
    r4.xyz = r1.xyz * IN.blendweight.y;
    r1.x = dot(Bones[0 + offset.x].xyz, IN.binormal.xyz);
    r1.y = dot(Bones[1 + offset.x].xyz, IN.binormal.xyz);
    r1.z = dot(Bones[2 + offset.x].xyz, IN.binormal.xyz);
    r4.xyz = (IN.blendweight.x * r1.xyz) + r4.xyz;
    r1.x = dot(Bones[0 + offset.z].xyz, IN.binormal.xyz);
    r1.y = dot(Bones[1 + offset.z].xyz, IN.binormal.xyz);
    r1.z = dot(Bones[2 + offset.z].xyz, IN.binormal.xyz);
    r4.xyz = (IN.blendweight.z * r1.xyz) + r4.xyz;
    r1.x = dot(Bones[0 + offset.w].xyz, IN.binormal.xyz);
    r1.y = dot(Bones[1 + offset.w].xyz, IN.binormal.xyz);
    r1.z = dot(Bones[2 + offset.w].xyz, IN.binormal.xyz);
    r5.xyz = (r1.w * r1.xyz) + r4.xyz;
    r1.x = dot(Bones[0 + offset.y].xyz, IN.normal.xyz);
    r1.y = dot(Bones[1 + offset.y].xyz, IN.normal.xyz);
    r1.z = dot(Bones[2 + offset.y].xyz, IN.normal.xyz);
    r4.xyz = r1.xyz * IN.blendweight.y;
    r1.x = dot(Bones[0 + offset.x].xyz, IN.normal.xyz);
    r1.y = dot(Bones[1 + offset.x].xyz, IN.normal.xyz);
    r1.z = dot(Bones[2 + offset.x].xyz, IN.normal.xyz);
    r4.xyz = (IN.blendweight.x * r1.xyz) + r4.xyz;
    r1.x = dot(Bones[0 + offset.z].xyz, IN.normal.xyz);
    r1.y = dot(Bones[1 + offset.z].xyz, IN.normal.xyz);
    r1.z = dot(Bones[2 + offset.z].xyz, IN.normal.xyz);
    r4.xyz = (IN.blendweight.z * r1.xyz) + r4.xyz;
    r1.x = dot(Bones[0 + offset.w].xyz, IN.normal.xyz);
    r1.y = dot(Bones[1 + offset.w].xyz, IN.normal.xyz);
    r1.z = dot(Bones[2 + offset.w].xyz, IN.normal.xyz);
    r4.xyz = (r1.w * r1.xyz) + r4.xyz;
    r4.xyz = EyePosition.xyz - r0.xyz;
    r5.x = dot(r4.xyz, r4.xyz);	// normalize + length
    r1.w = 1.0 / sqrt(r5.x);
    r1.xyz = normalize(r4);
    r2.xyz = normalize(r1);
    r3.x = dot(r2.xyz, LightDirection[0].xyz);
    r3.z = dot(r1.xyz, LightDirection[0].xyz);
    r3.xyz = (r1.w * r4.xyz) + LightDirection[0].xyz;
    r5.xyz = r4.xyz * r1.w;
    r4.xyz = normalize(r3);
    r3.x = dot(r2.xyz, r4.xyz);
    r2.x = dot(r2.xyz, r5.xyz);
    r2.z = dot(r1.xyz, r5.xyz);
    r3.y = dot(r6.xyz, r4.xyz);
    r3.z = dot(r1.xyz, r4.xyz);
    r1.x = dot(SkinModelViewProj[0].xyzw, r0.xyzw);
    r1.y = dot(SkinModelViewProj[1].xyzw, r0.xyzw);
    r1.z = dot(SkinModelViewProj[2].xyzw, r0.xyzw);
    OUT.position.xyz = r1.xyz;
    r0.x = dot(r1.xyz, r1.xyz);	// normalize + length
    r0.w = 1.0 / sqrt(r0.x);
    r0.w = 1.0 / r0.w;
    r0.w = FogParam.x - r0.w;
    r0.w = r0.w * r2.w;
    r0.w = max(r0.w, 0);
    r0.w = min(r0.w, 1);
    OUT.color_1.a = 1 - r0.w;
    r2.y = dot(r6.xyz, r5.xyz);

    return OUT;
};

// approximately 127 instruction slots used
