//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/PARTICLE.vso /Fcshaderdump19/PARTICLE.vso.dis
//
//
// Parameters:
//
float4 Acceleration;
float4 Color1;
float4 Color2;
float4 Color3;
float4 InstanceData[2];
float4 Velocity;
row_major float4x4 WorldViewProj;
float4 fVars0;
float4 fVars1;
float4 fVars2;
float4 fVars3;
//
//
// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   WorldViewProj[0] const_0        1
//   WorldViewProj[1] const_1        1
//   WorldViewProj[2] const_2        1
//   WorldViewProj[3] const_3        1
//   fVars0        const_4       1
//   fVars1        const_5       1
//   fVars2        const_6       1
//   fVars3        const_7       1
//   Color1        const_8       1
//   Color2        const_9       1
//   Color3        const_10      1
//   Velocity      const_11      1
//   Acceleration  const_12      1
//   InstanceData[0]  const_15       1
//   InstanceData[1]  const_16       1
//


// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float4 texcoord_0 : TEXCOORD0;
    float4 color_1 : COLOR1;
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
    float4 position : POSITION;
    float2 texcoord_0 : TEXCOORD0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const float4 const_13 = {2, 0.5, 1, 0};

    float1 q0;
    float3 q1;
    float1 q2;
    float3 q3;
    float4 q4;
    float4 q5;
    float4 r0;
    float4 r1;
    float4 r2;
    float4 r3;
    float4 r4;
    float2 wld35;

    r1.xzw = fVars0.xzw;
    r4.zw = const_13.zw;
    q1.xyz = InstanceData[1 + (2 * IN.color_1.r)];
    q0.x = 1.0 / fVars0.y;
    r0.w = 1;
    r3.w = (r1.x - InstanceData[0 + (2 * IN.color_1.r)].w) * InstanceData[1 + (2 * IN.color_1.r)].w;
    q2.x = r3.w * q0.x;
    q3.xyz = (r3.w * ((r1.z * q1.xyz) + Velocity.xyz)) + InstanceData[0 + (2 * IN.color_1.r)];
    r3.xy = (fVars2.zw < q2.x ? 1.0 : 0.0);
    r2.yw = lerp(fVars2.xz, fVars2.yw, r3.x);
    r2.xz = fVars2.xz * r3.x;
    r1.y = -r2.y;
    r0.xyz = ((0.5 * (((r1.w * q1.xyz) + Acceleration.xyz) * sqr(r3.w))) + q3.xyz) - fVars3.xyz;
    wld35.xy = mul(float2x4(WorldViewProj[0].xyzw, WorldViewProj[1].xyzw), r0.xyzw);
    r1.xzw = ((fVars2.yywy * r4.zyzw) + r4.wywz) - r2.xzw;
    r1.xyzw = (r3.y * r1.xyzw) + r2.xyzw;
    r2.w = 1.0 / (r1.w - r1.z);
    OUT.position.zw = mul(float2x4(WorldViewProj[2].xyzw, WorldViewProj[3].xyzw), r0.xyzw);
    r3.xyz = (fVars1.xyz < q2.x ? 1.0 : 0.0);
    q5.xyzw = lerp(lerp((r3.x * (Color2.rgba - Color1.rgba)) + Color1.rgba, Color3.rgba, r3.y), const_13.zzzw, r3.z);
    q4.xyzw = lerp(lerp((r3.x * (Color1.rgba - r4.zzzw)) + const_13.zzzw, Color2.rgba, r3.y), Color3.rgba, r3.z);
    OUT.position.xy = ((1.0 / fVars1.w) * (lerp(r1.x, r1.y, ((r3.w * q0.x) - r1.z) * r2.w) * IN.position.xy)) + wld35.xy;
    r1.x = r3.x * fVars1.x;
    r1.z = lerp(fVars1.x, fVars1.y, r3.x);
    r1.xy = lerp(lerp(r1.xz, fVars1.yz, r3.y), (fVars1.z * r4.zw) + r4.wz, r3.z);
    r0.xyzw = lerp(q4.xyzw, q5.xyzw, ((r3.w * q0.x) - r1.x) / (r1.y - r1.x));
    OUT.color_0.a = r0.w * fVars3.w;
    OUT.color_0.rgb = r0.xyz;
    OUT.texcoord_0.xy = IN.texcoord_0.xy;

    return OUT;
};

// approximately 73 instruction slots used
