//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/STB1008.vso /Fcshaderdump19/STB1008.vso.dis
//
//
// Parameters:

float4 EyePosition;
float4 LightPosition[3];
row_major float4x4 ModelViewProj;
float4 WindMatrices[16];


// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   ModelViewProj[0] const_0        1
//   ModelViewProj[1] const_1        1
//   ModelViewProj[2] const_2        1
//   ModelViewProj[3] const_3        1
//   LightPosition[0] const_16       1
//   EyePosition   const_25      1
//   WindMatrices[0]  const_38      4
//   WindMatrices[1]  const_39      4
//   WindMatrices[2]  const_40      4
//   WindMatrices[3]  const_41      4
//



// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float3 normal : NORMAL;
    float4 texcoord_0 : TEXCOORD0;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
    float4 blendindices : BLENDINDICES;
};

struct VS_OUTPUT {
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

    const float4 const_4 = {0.5, 0, 0, 0};

    OUT.color_0.rgb = (0.5 * r0) + 0.5;
    OUT.texcoord_0.xy = IN.texcoord_0;
    OUT.texcoord_1.xy = (0.5 * r0) + 0.5;
    OUT.texcoord_2.y = 0.5;
    offset.x = IN.blendindices.y;
    r0.w = dot(WindMatrices[3 + offset.x].xyzw, IN.position.xyzw);
    r0.x = dot(WindMatrices[0 + offset.x].xyzw, IN.position.xyzw);
    r0.y = dot(WindMatrices[1 + offset.x].xyzw, IN.position.xyzw);
    r0.z = dot(WindMatrices[2 + offset.x].xyzw, IN.position.xyzw);
    r0.xyzw = r0 - IN.position;
    r0.xyzw = (IN.blendindices.x * r0) + r1;
    OUT.position.w = dot(ModelViewProj[3].xyzw, r0.xyzw);
    OUT.position.x = dot(ModelViewProj[0].xyzw, r0.xyzw);
    OUT.position.y = dot(ModelViewProj[1].xyzw, r0.xyzw);
    OUT.position.z = dot(ModelViewProj[2].xyzw, r0.xyzw);
    r0.w = 1.0 / LightPosition[0].w;
    r1.xyzw = IN.position;
    r1.xyz = LightPosition[0].xyz - r0.xyz;
    r2.xyz = EyePosition.xyz - r0.xyz;
    r0.z = dot(IN.normal.xyz, IN.normal.xyz);
    r3.x = dot(r2.xyz, r2.xyz);	// normalize + length
    r1.w = 1.0 / sqrt(r3.x);
    r2.xyz = r2.xyz * r1.w;
    r3.x = dot(r1.xyz, r1.xyz);	// normalize + length
    r1.w = 1.0 / sqrt(r3.x);
    r2.xyz = (r1.w * r1.xyz) + r2.xyz;
    r3.x = dot(r2.xyz, r2.xyz);	// normalize + length
    r1.w = 1.0 / sqrt(r3.x);
    r2.xyz = r2.xyz * r1.w;
    OUT.texcoord_3.x = dot(IN.tangent.xyz, r2.xyz);
    OUT.texcoord_3.y = dot(IN.binormal.xyz, r2.xyz);
    OUT.texcoord_3.z = dot(IN.normal.xyz, r2.xyz);
    r2.xyz = IN.normal;
    r0.x = dot(IN.tangent.xyz, r2.xyz);
    r0.y = dot(IN.binormal.xyz, r2.xyz);
    r0.xyz = r1.xyz * r0.w;
    OUT.texcoord_2.x = (r0.z * 0.5) + 0.5;

    return OUT;
};

// approximately 37 instruction slots used
