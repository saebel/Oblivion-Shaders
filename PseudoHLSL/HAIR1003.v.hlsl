//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/HAIR1003.vso /Fcshaderdump19/HAIR1003.vso.dis
//
//
// Parameters:
//
float4 EyePosition : register(c25);
float3 LightColor[3];
float3 LightDirection[3];
float4 LightPosition[3];
row_major float4x4 ModelViewProj;
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   ModelViewProj[0]  const_0        1
//   ModelViewProj[1]  const_1        1
//   ModelViewProj[2]  const_2        1
//   ModelViewProj[3]  const_3        1
//   LightDirection[0] const_13       1
//   LightPosition[0]  const_16       1
//   LightPosition[1]  const_17       1
//   LightPosition[2]  const_18       1
//   LightColor[0]     const_19       1
//   LightColor[1]     const_20       1
//   EyePosition    const_25      1
//


// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
    float3 normal : NORMAL;
    float4 texcoord_0 : TEXCOORD0;
    float4 color_0 : COLOR0;

#define	TanSpaceProj	float3x3(IN.tangent.xyz, IN.binormal.xyz, IN.normal.xyz)
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
    float4 color_1 : COLOR1;
    float4 position : POSITION;
    float2 texcoord_0 : TEXCOORD0;
    float2 texcoord_1 : TEXCOORD1;
    float3 texcoord_2 : TEXCOORD2;
    float3 texcoord_3 : TEXCOORD3;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    float3 eye42;
    float1 lit11;
    float3 lit3;
    float3 lit6;
    float1 lit9;
    float3 q5;
    float3 r0;

    eye42.xyz = mul(TanSpaceProj, normalize(normalize(EyePosition.xyz - IN.position.xyz) + LightDirection[0].xyz));
    lit3.xyz = LightPosition[2].xyz - IN.position.xyz;
    q5.xyz = normalize(lit3.xyz);
    lit6.xyz = LightPosition[1].xyz - IN.position.xyz;
    r0.xyz = shades(IN.normal.xyz, normalize(lit6.xyz)) * LightColor[1].rgb;
    lit11.x = 1 - saturate(length(lit6.xyz) / LightPosition[1].w);
    lit9.x = 1 - saturate(length(lit3.xyz) / LightPosition[2].w);
    OUT.color_0.a = 1;
    OUT.color_0.rgb = (sqr(lit11.x) * r0.xyz) + ((shades(IN.normal.xyz, q5.xyz) * LightColor[1].rgb) * sqr(lit9.x));
    OUT.color_1.rgba = IN.color_0.rgba;
    OUT.position.xyzw = mul(ModelViewProj, IN.position.xyzw);
    OUT.texcoord_0.xy = IN.texcoord_0.xy;
    OUT.texcoord_1.xy = IN.texcoord_0.xy;
    OUT.texcoord_2.xyz = normalize(mul(TanSpaceProj, LightDirection[0].xyz));
    OUT.texcoord_3.xyz = normalize(eye42.xyz);

    return OUT;
};

// approximately 59 instruction slots used
