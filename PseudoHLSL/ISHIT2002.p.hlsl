//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/ISHIT2002.pso /Fcshaderdump19/ISHIT2002.pso.dis
//
//
// Parameters:

sampler2D Src0;
sampler2D Src1;
float4 blurParams;
float4 doubleVisParams;


// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   blurParams      const_1       1
//   doubleVisParams const_2       1
//   Src0            texture_0       1
//   Src1            texture_1       1
//



// Structures:

struct VS_OUTPUT {
    float2 texcoord_0 : TEXCOORD0;
    float2 texcoord_1 : TEXCOORD1;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    const float4 const_0 = {1, 0, -0.5, 0.5};

    float4 r0;
    float4 r1;
    float4 r2;

    r0.xy = IN.texcoord_0.xy - doubleVisParams.xy;
    r1.x = max(r0.x, 0);
    r2.xy = IN.texcoord_0.xy + doubleVisParams.xy;
    r0.x = min(doubleVisParams.z, r2.x);
    r1.y = max(r0.y, 1 - doubleVisParams.w);
    r0.y = min(r2.y, 1);
    r2.xyzw = tex2D(Src0, r1.xy);
    r1.xyzw = tex2D(Src0, r0.xy);
    r0.xyzw = tex2D(Src1, IN.texcoord_1.xy);
    r0.w = 2 * (((1.0 / doubleVisParams.w) * doubleVisParams.z) * (IN.texcoord_1.x - 0.5));	// [0,1] to [-1,+1]
    r0.w = min(sqrt((r0.w * r0.w) + ((2 * (IN.texcoord_1.y - 0.5)) * (2 * (IN.texcoord_1.y - 0.5)))) * blurParams.z, 1);	// [0,1] to [-1,+1]
    r0.xyz = r0.xyz * r0.w;
    r1.w = 1 - r0.w;
    r0.w = 1;
    r0.xyz = (0.5 * ((r2.xyz + r1.xyz) * r1.w)) + r0.xyz;
    OUT.color_0.rgba = r0.xyzw;

    return OUT;
};

// approximately 31 instruction slots used (3 texture, 28 arithmetic)
