//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2039.vso /Fcshaderdump19/SLS2039.vso.dis
//
//
// Parameters:
//
float4 BoundWorldCenter : register(c46);
float4 EyePosition : register(c25);
row_major float4x4 ModelViewProj : register(c0);
row_major float4x4 ObjToCubeSpace : register(c8);
//
//
// Registers:
//
//   Name             Reg   Size
//   ---------------- ----- ----
//   ModelViewProj[0]    const_0        1
//   ModelViewProj[1]    const_1        1
//   ModelViewProj[2]    const_2        1
//   ModelViewProj[3]    const_3        1
//   ObjToCubeSpace[0]   const_8        1
//   ObjToCubeSpace[1]   const_9        1
//   ObjToCubeSpace[2]   const_10        1
//   ObjToCubeSpace[3]   const_11        1
//   EyePosition      const_25      1
//   BoundWorldCenter const_46      1
//


// Structures:

struct VS_INPUT {
    float4 position : POSITION;
    float4 texcoord_0 : TEXCOORD0;
    float4 color_0 : COLOR0;
};

struct VS_OUTPUT {
    float3 color_0 : COLOR0;
    float4 position : POSITION;
    float2 texcoord_0 : TEXCOORD0;
    float4 texcoord_1 : TEXCOORD1;
    float3 texcoord_2 : TEXCOORD2;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    float3 eye5;
    float1 q1;
    float3 q2;
    float4 r0;
    float4 r1;

    r1.xyz = mul(float3x4(ObjToCubeSpace[0].xyzw, ObjToCubeSpace[1].xyzw, ObjToCubeSpace[2].xyzw), IN.position.xyzw);
    eye5.xyz = normalize(EyePosition.xyz - r1.xyz);
    r1.w = dot(ObjToCubeSpace[3].xyzw, IN.position.xyzw);
    r0.xyzw = r1.xyzw - BoundWorldCenter.xyzw;
    q2.xyz = r0.xyz / length(r0.xyzw);
    q1.x = saturate(((dot(q2.xyz, eye5.xyz) / length(q2.xyz)) - 0.8) * 6.66666651);
    OUT.color_0.rgb = IN.color_0.rgb;
    OUT.position.xyzw = mul(ModelViewProj, IN.position.xyzw);
    OUT.texcoord_0.xy = IN.texcoord_0.xy;
    OUT.texcoord_1.w = (3 - (q1.x * 2)) * sqr(q1.x);
    OUT.texcoord_1.xyz = compress(q2.xyz);	// [-1,+1] to [0,1]
    OUT.texcoord_2.xyz = eye5.xyz;

    return OUT;
};

// approximately 30 instruction slots used
